
SmartWaterTank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800bf90  0800bf90  0001bf90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c534  0800c534  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c53c  0800c53c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c53c  0800c53c  0001c53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000005ac  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000078c  2000078c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018144  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c17  00000000  00000000  00038397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001107  00000000  00000000  0003d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026bac  00000000  00000000  0003e6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000217e3  00000000  00000000  00065253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e5584  00000000  00000000  00086a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c64  00000000  00000000  0016bfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00172c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf74 	.word	0x0800bf74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bf74 	.word	0x0800bf74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_7SEG_GPIO_Init>:
#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b6b      	ldr	r3, [pc, #428]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6a      	ldr	r2, [pc, #424]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b68      	ldr	r3, [pc, #416]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b64      	ldr	r3, [pc, #400]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b61      	ldr	r3, [pc, #388]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5c      	ldr	r2, [pc, #368]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5a      	ldr	r3, [pc, #360]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <_7SEG_GPIO_Init+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 8000f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	484b      	ldr	r0, [pc, #300]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f34:	f004 fefe 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8000f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4847      	ldr	r0, [pc, #284]	; (8001064 <_7SEG_GPIO_Init+0x1c0>)
 8000f46:	f004 fef5 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4842      	ldr	r0, [pc, #264]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f56:	f004 feed 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000f5a:	2320      	movs	r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	483e      	ldr	r0, [pc, #248]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f66:	f004 fee5 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000f6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	483c      	ldr	r0, [pc, #240]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f78:	f004 fedc 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4837      	ldr	r0, [pc, #220]	; (8001068 <_7SEG_GPIO_Init+0x1c4>)
 8000f8a:	f004 fed3 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4831      	ldr	r0, [pc, #196]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000f9c:	f004 feca 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	482d      	ldr	r0, [pc, #180]	; (8001060 <_7SEG_GPIO_Init+0x1bc>)
 8000fac:	f004 fec2 	bl	8005d34 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482b      	ldr	r0, [pc, #172]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fbe:	f004 feb9 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4827      	ldr	r0, [pc, #156]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fd0:	f004 feb0 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000fe2:	f004 fea7 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	481e      	ldr	r0, [pc, #120]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8000ff4:	f004 fe9e 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8000ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4819      	ldr	r0, [pc, #100]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001006:	f004 fe95 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800100a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4815      	ldr	r0, [pc, #84]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 8001018:	f004 fe8c 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800102a:	f004 fe83 	bl	8005d34 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 800102e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001032:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <_7SEG_GPIO_Init+0x1c8>)
 800103c:	f004 fe7a 	bl	8005d34 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8001040:	2201      	movs	r2, #1
 8001042:	2100      	movs	r1, #0
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f813 	bl	8001070 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800104a:	2201      	movs	r2, #1
 800104c:	2100      	movs	r1, #0
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f80e 	bl	8001070 <_7SEG_SetNumber>
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800
 800106c:	40021000 	.word	0x40021000

08001070 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 81dc 	bne.w	800143c <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4bcb      	ldr	r3, [pc, #812]	; (80013b4 <_7SEG_SetNumber+0x344>)
 8001088:	fb83 2301 	smull	r2, r3, r3, r1
 800108c:	109a      	asrs	r2, r3, #2
 800108e:	17cb      	asrs	r3, r1, #31
 8001090:	1ad2      	subs	r2, r2, r3
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	1aca      	subs	r2, r1, r3
 800109c:	2a09      	cmp	r2, #9
 800109e:	f200 81ba 	bhi.w	8001416 <_7SEG_SetNumber+0x3a6>
 80010a2:	a301      	add	r3, pc, #4	; (adr r3, 80010a8 <_7SEG_SetNumber+0x38>)
 80010a4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80010a8:	080010d1 	.word	0x080010d1
 80010ac:	08001123 	.word	0x08001123
 80010b0:	08001175 	.word	0x08001175
 80010b4:	080011c7 	.word	0x080011c7
 80010b8:	08001219 	.word	0x08001219
 80010bc:	0800126b 	.word	0x0800126b
 80010c0:	080012bd 	.word	0x080012bd
 80010c4:	0800130f 	.word	0x0800130f
 80010c8:	08001361 	.word	0x08001361
 80010cc:	080013c5 	.word	0x080013c5
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d6:	48b8      	ldr	r0, [pc, #736]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010d8:	f004 ffe0 	bl	800609c <HAL_GPIO_WritePin>
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	48b6      	ldr	r0, [pc, #728]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80010e4:	f004 ffda 	bl	800609c <HAL_GPIO_WritePin>
 80010e8:	2200      	movs	r2, #0
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	48b2      	ldr	r0, [pc, #712]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010ee:	f004 ffd5 	bl	800609c <HAL_GPIO_WritePin>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2120      	movs	r1, #32
 80010f6:	48b0      	ldr	r0, [pc, #704]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80010f8:	f004 ffd0 	bl	800609c <HAL_GPIO_WritePin>
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	48af      	ldr	r0, [pc, #700]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001104:	f004 ffca 	bl	800609c <HAL_GPIO_WritePin>
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	48ac      	ldr	r0, [pc, #688]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001110:	f004 ffc4 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	48a7      	ldr	r0, [pc, #668]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800111c:	f004 ffbe 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001120:	e179      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001128:	48a4      	ldr	r0, [pc, #656]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800112a:	f004 ffb7 	bl	800609c <HAL_GPIO_WritePin>
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	48a1      	ldr	r0, [pc, #644]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001134:	f004 ffb2 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113e:	489e      	ldr	r0, [pc, #632]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001140:	f004 ffac 	bl	800609c <HAL_GPIO_WritePin>
 8001144:	2201      	movs	r2, #1
 8001146:	2120      	movs	r1, #32
 8001148:	489b      	ldr	r0, [pc, #620]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800114a:	f004 ffa7 	bl	800609c <HAL_GPIO_WritePin>
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	489a      	ldr	r0, [pc, #616]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001156:	f004 ffa1 	bl	800609c <HAL_GPIO_WritePin>
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001160:	4897      	ldr	r0, [pc, #604]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001162:	f004 ff9b 	bl	800609c <HAL_GPIO_WritePin>
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116c:	4892      	ldr	r0, [pc, #584]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800116e:	f004 ff95 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001172:	e150      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117a:	488f      	ldr	r0, [pc, #572]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800117c:	f004 ff8e 	bl	800609c <HAL_GPIO_WritePin>
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001186:	488d      	ldr	r0, [pc, #564]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001188:	f004 ff88 	bl	800609c <HAL_GPIO_WritePin>
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001192:	4889      	ldr	r0, [pc, #548]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001194:	f004 ff82 	bl	800609c <HAL_GPIO_WritePin>
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800119e:	4888      	ldr	r0, [pc, #544]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011a0:	f004 ff7c 	bl	800609c <HAL_GPIO_WritePin>
 80011a4:	2200      	movs	r2, #0
 80011a6:	2120      	movs	r1, #32
 80011a8:	4883      	ldr	r0, [pc, #524]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011aa:	f004 ff77 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80011ae:	2201      	movs	r2, #1
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	4881      	ldr	r0, [pc, #516]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011b4:	f004 ff72 	bl	800609c <HAL_GPIO_WritePin>
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011be:	4880      	ldr	r0, [pc, #512]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80011c0:	f004 ff6c 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80011c4:	e127      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	487a      	ldr	r0, [pc, #488]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ce:	f004 ff65 	bl	800609c <HAL_GPIO_WritePin>
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d8:	4878      	ldr	r0, [pc, #480]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80011da:	f004 ff5f 	bl	800609c <HAL_GPIO_WritePin>
 80011de:	2200      	movs	r2, #0
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	4875      	ldr	r0, [pc, #468]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011e4:	f004 ff5a 	bl	800609c <HAL_GPIO_WritePin>
 80011e8:	2200      	movs	r2, #0
 80011ea:	2120      	movs	r1, #32
 80011ec:	4872      	ldr	r0, [pc, #456]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011ee:	f004 ff55 	bl	800609c <HAL_GPIO_WritePin>
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f8:	486f      	ldr	r0, [pc, #444]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80011fa:	f004 ff4f 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80011fe:	2201      	movs	r2, #1
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	486e      	ldr	r0, [pc, #440]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001206:	f004 ff49 	bl	800609c <HAL_GPIO_WritePin>
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001210:	486b      	ldr	r0, [pc, #428]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001212:	f004 ff43 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001216:	e0fe      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121e:	4868      	ldr	r0, [pc, #416]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001220:	f004 ff3c 	bl	800609c <HAL_GPIO_WritePin>
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800122a:	4863      	ldr	r0, [pc, #396]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800122c:	f004 ff36 	bl	800609c <HAL_GPIO_WritePin>
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	4861      	ldr	r0, [pc, #388]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001238:	f004 ff30 	bl	800609c <HAL_GPIO_WritePin>
 800123c:	2200      	movs	r2, #0
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	485d      	ldr	r0, [pc, #372]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001242:	f004 ff2b 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	485a      	ldr	r0, [pc, #360]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800124e:	f004 ff25 	bl	800609c <HAL_GPIO_WritePin>
 8001252:	2201      	movs	r2, #1
 8001254:	2120      	movs	r1, #32
 8001256:	4858      	ldr	r0, [pc, #352]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001258:	f004 ff20 	bl	800609c <HAL_GPIO_WritePin>
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001262:	4857      	ldr	r0, [pc, #348]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001264:	f004 ff1a 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001268:	e0d5      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	4851      	ldr	r0, [pc, #324]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001272:	f004 ff13 	bl	800609c <HAL_GPIO_WritePin>
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127c:	4850      	ldr	r0, [pc, #320]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800127e:	f004 ff0d 	bl	800609c <HAL_GPIO_WritePin>
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	484b      	ldr	r0, [pc, #300]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800128a:	f004 ff07 	bl	800609c <HAL_GPIO_WritePin>
 800128e:	2200      	movs	r2, #0
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	4849      	ldr	r0, [pc, #292]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001294:	f004 ff02 	bl	800609c <HAL_GPIO_WritePin>
 8001298:	2200      	movs	r2, #0
 800129a:	2120      	movs	r1, #32
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800129e:	f004 fefd 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4844      	ldr	r0, [pc, #272]	; (80013bc <_7SEG_SetNumber+0x34c>)
 80012aa:	f004 fef7 	bl	800609c <HAL_GPIO_WritePin>
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b4:	4842      	ldr	r0, [pc, #264]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012b6:	f004 fef1 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80012ba:	e0ac      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c2:	483d      	ldr	r0, [pc, #244]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012c4:	f004 feea 	bl	800609c <HAL_GPIO_WritePin>
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	483a      	ldr	r0, [pc, #232]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012ce:	f004 fee5 	bl	800609c <HAL_GPIO_WritePin>
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4838      	ldr	r0, [pc, #224]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012d8:	f004 fee0 	bl	800609c <HAL_GPIO_WritePin>
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e2:	4837      	ldr	r0, [pc, #220]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012e4:	f004 feda 	bl	800609c <HAL_GPIO_WritePin>
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80012f0:	f004 fed4 	bl	800609c <HAL_GPIO_WritePin>
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fa:	482f      	ldr	r0, [pc, #188]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80012fc:	f004 fece 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	482d      	ldr	r0, [pc, #180]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001308:	f004 fec8 	bl	800609c <HAL_GPIO_WritePin>
				break;
 800130c:	e083      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	482a      	ldr	r0, [pc, #168]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001316:	f004 fec1 	bl	800609c <HAL_GPIO_WritePin>
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001320:	4825      	ldr	r0, [pc, #148]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001322:	f004 febb 	bl	800609c <HAL_GPIO_WritePin>
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7180 	mov.w	r1, #256	; 0x100
 800132c:	4823      	ldr	r0, [pc, #140]	; (80013bc <_7SEG_SetNumber+0x34c>)
 800132e:	f004 feb5 	bl	800609c <HAL_GPIO_WritePin>
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001338:	f004 feb0 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	481d      	ldr	r0, [pc, #116]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001342:	f004 feab 	bl	800609c <HAL_GPIO_WritePin>
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <_7SEG_SetNumber+0x350>)
 800134e:	f004 fea5 	bl	800609c <HAL_GPIO_WritePin>
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4817      	ldr	r0, [pc, #92]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800135a:	f004 fe9f 	bl	800609c <HAL_GPIO_WritePin>
				break;
 800135e:	e05a      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001368:	f004 fe98 	bl	800609c <HAL_GPIO_WritePin>
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <_7SEG_SetNumber+0x34c>)
 8001374:	f004 fe92 	bl	800609c <HAL_GPIO_WritePin>
 8001378:	2200      	movs	r2, #0
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <_7SEG_SetNumber+0x348>)
 800137e:	f004 fe8d 	bl	800609c <HAL_GPIO_WritePin>
 8001382:	2200      	movs	r2, #0
 8001384:	2120      	movs	r1, #32
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <_7SEG_SetNumber+0x348>)
 8001388:	f004 fe88 	bl	800609c <HAL_GPIO_WritePin>
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <_7SEG_SetNumber+0x350>)
 8001394:	f004 fe82 	bl	800609c <HAL_GPIO_WritePin>
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <_7SEG_SetNumber+0x350>)
 80013a0:	f004 fe7c 	bl	800609c <HAL_GPIO_WritePin>
 80013a4:	2200      	movs	r2, #0
 80013a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_7SEG_SetNumber+0x348>)
 80013ac:	f004 fe76 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80013b0:	e031      	b.n	8001416 <_7SEG_SetNumber+0x3a6>
 80013b2:	bf00      	nop
 80013b4:	66666667 	.word	0x66666667
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	48c8      	ldr	r0, [pc, #800]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013cc:	f004 fe66 	bl	800609c <HAL_GPIO_WritePin>
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	48c6      	ldr	r0, [pc, #792]	; (80016f0 <_7SEG_SetNumber+0x680>)
 80013d8:	f004 fe60 	bl	800609c <HAL_GPIO_WritePin>
 80013dc:	2200      	movs	r2, #0
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	48c2      	ldr	r0, [pc, #776]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013e2:	f004 fe5b 	bl	800609c <HAL_GPIO_WritePin>
 80013e6:	2200      	movs	r2, #0
 80013e8:	2120      	movs	r1, #32
 80013ea:	48c0      	ldr	r0, [pc, #768]	; (80016ec <_7SEG_SetNumber+0x67c>)
 80013ec:	f004 fe56 	bl	800609c <HAL_GPIO_WritePin>
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	48bf      	ldr	r0, [pc, #764]	; (80016f4 <_7SEG_SetNumber+0x684>)
 80013f8:	f004 fe50 	bl	800609c <HAL_GPIO_WritePin>
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	48ba      	ldr	r0, [pc, #744]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001404:	f004 fe4a 	bl	800609c <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140e:	48b9      	ldr	r0, [pc, #740]	; (80016f4 <_7SEG_SetNumber+0x684>)
 8001410:	f004 fe44 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001414:	bf00      	nop
		}

		if(dp == ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 800141c:	2200      	movs	r2, #0
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	48b2      	ldr	r0, [pc, #712]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001422:	f004 fe3b 	bl	800609c <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8001426:	e1ff      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 81fc 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8001430:	2201      	movs	r2, #1
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	48ad      	ldr	r0, [pc, #692]	; (80016ec <_7SEG_SetNumber+0x67c>)
 8001436:	f004 fe31 	bl	800609c <HAL_GPIO_WritePin>
}
 800143a:	e1f5      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 81f2 	bne.w	8001828 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	4bac      	ldr	r3, [pc, #688]	; (80016f8 <_7SEG_SetNumber+0x688>)
 8001448:	fb83 2301 	smull	r2, r3, r3, r1
 800144c:	109a      	asrs	r2, r3, #2
 800144e:	17cb      	asrs	r3, r1, #31
 8001450:	1ad2      	subs	r2, r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	1aca      	subs	r2, r1, r3
 800145c:	2a09      	cmp	r2, #9
 800145e:	f200 81d0 	bhi.w	8001802 <_7SEG_SetNumber+0x792>
 8001462:	a301      	add	r3, pc, #4	; (adr r3, 8001468 <_7SEG_SetNumber+0x3f8>)
 8001464:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001468:	08001491 	.word	0x08001491
 800146c:	080014e7 	.word	0x080014e7
 8001470:	0800153d 	.word	0x0800153d
 8001474:	08001593 	.word	0x08001593
 8001478:	080015e9 	.word	0x080015e9
 800147c:	0800163f 	.word	0x0800163f
 8001480:	08001695 	.word	0x08001695
 8001484:	08001701 	.word	0x08001701
 8001488:	08001757 	.word	0x08001757
 800148c:	080017ad 	.word	0x080017ad
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4899      	ldr	r0, [pc, #612]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001498:	f004 fe00 	bl	800609c <HAL_GPIO_WritePin>
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a2:	4896      	ldr	r0, [pc, #600]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014a4:	f004 fdfa 	bl	800609c <HAL_GPIO_WritePin>
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	4893      	ldr	r0, [pc, #588]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014b0:	f004 fdf4 	bl	800609c <HAL_GPIO_WritePin>
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	4890      	ldr	r0, [pc, #576]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014bc:	f004 fdee 	bl	800609c <HAL_GPIO_WritePin>
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	488d      	ldr	r0, [pc, #564]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014c8:	f004 fde8 	bl	800609c <HAL_GPIO_WritePin>
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d2:	488a      	ldr	r0, [pc, #552]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014d4:	f004 fde2 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	4887      	ldr	r0, [pc, #540]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014e0:	f004 fddc 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80014e4:	e18d      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ec:	4883      	ldr	r0, [pc, #524]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014ee:	f004 fdd5 	bl	800609c <HAL_GPIO_WritePin>
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f8:	4880      	ldr	r0, [pc, #512]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80014fa:	f004 fdcf 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001504:	487d      	ldr	r0, [pc, #500]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001506:	f004 fdc9 	bl	800609c <HAL_GPIO_WritePin>
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001510:	487a      	ldr	r0, [pc, #488]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001512:	f004 fdc3 	bl	800609c <HAL_GPIO_WritePin>
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	4877      	ldr	r0, [pc, #476]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800151e:	f004 fdbd 	bl	800609c <HAL_GPIO_WritePin>
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	4874      	ldr	r0, [pc, #464]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800152a:	f004 fdb7 	bl	800609c <HAL_GPIO_WritePin>
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4871      	ldr	r0, [pc, #452]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001536:	f004 fdb1 	bl	800609c <HAL_GPIO_WritePin>
				break;
 800153a:	e162      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	486e      	ldr	r0, [pc, #440]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001544:	f004 fdaa 	bl	800609c <HAL_GPIO_WritePin>
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	486b      	ldr	r0, [pc, #428]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001550:	f004 fda4 	bl	800609c <HAL_GPIO_WritePin>
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	4868      	ldr	r0, [pc, #416]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800155c:	f004 fd9e 	bl	800609c <HAL_GPIO_WritePin>
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	4865      	ldr	r0, [pc, #404]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001568:	f004 fd98 	bl	800609c <HAL_GPIO_WritePin>
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001572:	4862      	ldr	r0, [pc, #392]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001574:	f004 fd92 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	485f      	ldr	r0, [pc, #380]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001580:	f004 fd8c 	bl	800609c <HAL_GPIO_WritePin>
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	485c      	ldr	r0, [pc, #368]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800158c:	f004 fd86 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001590:	e137      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001598:	4858      	ldr	r0, [pc, #352]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800159a:	f004 fd7f 	bl	800609c <HAL_GPIO_WritePin>
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015a6:	f004 fd79 	bl	800609c <HAL_GPIO_WritePin>
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b0:	4852      	ldr	r0, [pc, #328]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015b2:	f004 fd73 	bl	800609c <HAL_GPIO_WritePin>
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015bc:	484f      	ldr	r0, [pc, #316]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015be:	f004 fd6d 	bl	800609c <HAL_GPIO_WritePin>
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c8:	484c      	ldr	r0, [pc, #304]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015ca:	f004 fd67 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015d6:	f004 fd61 	bl	800609c <HAL_GPIO_WritePin>
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e0:	4846      	ldr	r0, [pc, #280]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015e2:	f004 fd5b 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80015e6:	e10c      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ee:	4843      	ldr	r0, [pc, #268]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015f0:	f004 fd54 	bl	800609c <HAL_GPIO_WritePin>
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fa:	4840      	ldr	r0, [pc, #256]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80015fc:	f004 fd4e 	bl	800609c <HAL_GPIO_WritePin>
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001606:	483d      	ldr	r0, [pc, #244]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001608:	f004 fd48 	bl	800609c <HAL_GPIO_WritePin>
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	483a      	ldr	r0, [pc, #232]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001614:	f004 fd42 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161e:	4837      	ldr	r0, [pc, #220]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001620:	f004 fd3c 	bl	800609c <HAL_GPIO_WritePin>
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	4834      	ldr	r0, [pc, #208]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800162c:	f004 fd36 	bl	800609c <HAL_GPIO_WritePin>
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001636:	4831      	ldr	r0, [pc, #196]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001638:	f004 fd30 	bl	800609c <HAL_GPIO_WritePin>
				break;
 800163c:	e0e1      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001644:	482d      	ldr	r0, [pc, #180]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001646:	f004 fd29 	bl	800609c <HAL_GPIO_WritePin>
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001652:	f004 fd23 	bl	800609c <HAL_GPIO_WritePin>
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165c:	4827      	ldr	r0, [pc, #156]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800165e:	f004 fd1d 	bl	800609c <HAL_GPIO_WritePin>
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4824      	ldr	r0, [pc, #144]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800166a:	f004 fd17 	bl	800609c <HAL_GPIO_WritePin>
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4821      	ldr	r0, [pc, #132]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001676:	f004 fd11 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001680:	481e      	ldr	r0, [pc, #120]	; (80016fc <_7SEG_SetNumber+0x68c>)
 8001682:	f004 fd0b 	bl	800609c <HAL_GPIO_WritePin>
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800168c:	481b      	ldr	r0, [pc, #108]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800168e:	f004 fd05 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001692:	e0b6      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169a:	4818      	ldr	r0, [pc, #96]	; (80016fc <_7SEG_SetNumber+0x68c>)
 800169c:	f004 fcfe 	bl	800609c <HAL_GPIO_WritePin>
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016a8:	f004 fcf8 	bl	800609c <HAL_GPIO_WritePin>
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016b4:	f004 fcf2 	bl	800609c <HAL_GPIO_WritePin>
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016be:	480f      	ldr	r0, [pc, #60]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016c0:	f004 fcec 	bl	800609c <HAL_GPIO_WritePin>
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016cc:	f004 fce6 	bl	800609c <HAL_GPIO_WritePin>
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016d8:	f004 fce0 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <_7SEG_SetNumber+0x68c>)
 80016e4:	f004 fcda 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80016e8:	e08b      	b.n	8001802 <_7SEG_SetNumber+0x792>
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020800 	.word	0x40020800
 80016f8:	66666667 	.word	0x66666667
 80016fc:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	484a      	ldr	r0, [pc, #296]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001708:	f004 fcc8 	bl	800609c <HAL_GPIO_WritePin>
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001712:	4847      	ldr	r0, [pc, #284]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001714:	f004 fcc2 	bl	800609c <HAL_GPIO_WritePin>
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4844      	ldr	r0, [pc, #272]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001720:	f004 fcbc 	bl	800609c <HAL_GPIO_WritePin>
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4841      	ldr	r0, [pc, #260]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800172c:	f004 fcb6 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8001730:	2201      	movs	r2, #1
 8001732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001736:	483e      	ldr	r0, [pc, #248]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001738:	f004 fcb0 	bl	800609c <HAL_GPIO_WritePin>
 800173c:	2201      	movs	r2, #1
 800173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001742:	483b      	ldr	r0, [pc, #236]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001744:	f004 fcaa 	bl	800609c <HAL_GPIO_WritePin>
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174e:	4838      	ldr	r0, [pc, #224]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001750:	f004 fca4 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001754:	e055      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4834      	ldr	r0, [pc, #208]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800175e:	f004 fc9d 	bl	800609c <HAL_GPIO_WritePin>
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	4831      	ldr	r0, [pc, #196]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800176a:	f004 fc97 	bl	800609c <HAL_GPIO_WritePin>
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001776:	f004 fc91 	bl	800609c <HAL_GPIO_WritePin>
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001780:	482b      	ldr	r0, [pc, #172]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001782:	f004 fc8b 	bl	800609c <HAL_GPIO_WritePin>
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800178e:	f004 fc85 	bl	800609c <HAL_GPIO_WritePin>
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001798:	4825      	ldr	r0, [pc, #148]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 800179a:	f004 fc7f 	bl	800609c <HAL_GPIO_WritePin>
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4822      	ldr	r0, [pc, #136]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017a6:	f004 fc79 	bl	800609c <HAL_GPIO_WritePin>
				break;
 80017aa:	e02a      	b.n	8001802 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b2:	481f      	ldr	r0, [pc, #124]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017b4:	f004 fc72 	bl	800609c <HAL_GPIO_WritePin>
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	481c      	ldr	r0, [pc, #112]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017c0:	f004 fc6c 	bl	800609c <HAL_GPIO_WritePin>
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ca:	4819      	ldr	r0, [pc, #100]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017cc:	f004 fc66 	bl	800609c <HAL_GPIO_WritePin>
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4816      	ldr	r0, [pc, #88]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017d8:	f004 fc60 	bl	800609c <HAL_GPIO_WritePin>
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017e4:	f004 fc5a 	bl	800609c <HAL_GPIO_WritePin>
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4810      	ldr	r0, [pc, #64]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017f0:	f004 fc54 	bl	800609c <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 80017fc:	f004 fc4e 	bl	800609c <HAL_GPIO_WritePin>
				break;
 8001800:	bf00      	nop
		if(dp == ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001810:	f004 fc44 	bl	800609c <HAL_GPIO_WritePin>
}
 8001814:	e008      	b.n	8001828 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <_7SEG_SetNumber+0x7c0>)
 8001824:	f004 fc3a 	bl	800609c <HAL_GPIO_WritePin>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <CLCD_GPIO_Init>:
#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a22      	ldr	r2, [pc, #136]	; (80018cc <CLCD_GPIO_Init+0x98>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <CLCD_GPIO_Init+0x98>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
	
	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8001856:	2301      	movs	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800186c:	f004 fa62 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8001870:	2302      	movs	r3, #2
 8001872:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4815      	ldr	r0, [pc, #84]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 800187a:	f004 fa5b 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 800187e:	2304      	movs	r3, #4
 8001880:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4812      	ldr	r0, [pc, #72]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001888:	f004 fa54 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 800188c:	2310      	movs	r3, #16
 800188e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	480e      	ldr	r0, [pc, #56]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 8001896:	f004 fa4d 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 800189a:	2320      	movs	r3, #32
 800189c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018a4:	f004 fa46 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018b2:	f004 fa3f 	bl	8005d34 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <CLCD_GPIO_Init+0x9c>)
 80018c0:	f004 fa38 	bl	8005d34 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40021000 	.word	0x40021000

080018d4 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	//
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	da04      	bge.n	80018f0 <CLCD_Write_Instruction+0x1c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ee:	e003      	b.n	80018f8 <CLCD_Write_Instruction+0x24>
 80018f0:	4b5c      	ldr	r3, [pc, #368]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	4a5a      	ldr	r2, [pc, #360]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80018fa:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <CLCD_Write_Instruction+0x3c>
 8001906:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800190e:	e003      	b.n	8001918 <CLCD_Write_Instruction+0x44>
 8001910:	4b54      	ldr	r3, [pc, #336]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800191a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <CLCD_Write_Instruction+0x5c>
 8001926:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f043 0320 	orr.w	r3, r3, #32
 800192e:	e003      	b.n	8001938 <CLCD_Write_Instruction+0x64>
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f023 0320 	bic.w	r3, r3, #32
 8001938:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800193a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <CLCD_Write_Instruction+0x7c>
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	e003      	b.n	8001958 <CLCD_Write_Instruction+0x84>
 8001950:	4b44      	ldr	r3, [pc, #272]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f023 0310 	bic.w	r3, r3, #16
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195a:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS Low
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW Low
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800197a:	f023 0304 	bic.w	r3, r3, #4
 800197e:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN High
 8001980:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a37      	ldr	r2, [pc, #220]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	6153      	str	r3, [r2, #20]
	
	//
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <CLCD_Write_Instruction+0xd8>
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	e003      	b.n	80019b4 <CLCD_Write_Instruction+0xe0>
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019b6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <CLCD_Write_Instruction+0xf8>
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ca:	e003      	b.n	80019d4 <CLCD_Write_Instruction+0x100>
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019d6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <CLCD_Write_Instruction+0x118>
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	e003      	b.n	80019f4 <CLCD_Write_Instruction+0x120>
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f023 0320 	bic.w	r3, r3, #32
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 80019f6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <CLCD_Write_Instruction+0x138>
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	e003      	b.n	8001a14 <CLCD_Write_Instruction+0x140>
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f023 0310 	bic.w	r3, r3, #16
 8001a14:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a16:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS Low
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW Low
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN High
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a42:	f043 0304 	orr.w	r3, r3, #4
 8001a46:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <CLCD_Write_Instruction+0x190>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f002 ff3f 	bl	80048d8 <HAL_Delay>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000

08001a68 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	//
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da04      	bge.n	8001a84 <CLCD_Write_Display+0x1c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a82:	e003      	b.n	8001a8c <CLCD_Write_Display+0x24>
 8001a84:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a8e:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d004      	beq.n	8001aa4 <CLCD_Write_Display+0x3c>
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa2:	e003      	b.n	8001aac <CLCD_Write_Display+0x44>
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aae:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <CLCD_Write_Display+0x5c>
 8001aba:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	e003      	b.n	8001acc <CLCD_Write_Display+0x64>
 8001ac4:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ace:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <CLCD_Write_Display+0x7c>
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	e003      	b.n	8001aec <CLCD_Write_Display+0x84>
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f023 0310 	bic.w	r3, r3, #16
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001aee:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS High
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	4a40      	ldr	r2, [pc, #256]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW Low
 8001afc:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b02:	f023 0302 	bic.w	r3, r3, #2
 8001b06:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN High
 8001b14:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b26:	f023 0304 	bic.w	r3, r3, #4
 8001b2a:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <CLCD_Write_Display+0xd8>
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3e:	e003      	b.n	8001b48 <CLCD_Write_Display+0xe0>
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b4a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <CLCD_Write_Display+0xf8>
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b5e:	e003      	b.n	8001b68 <CLCD_Write_Display+0x100>
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b6a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <CLCD_Write_Display+0x118>
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	e003      	b.n	8001b88 <CLCD_Write_Display+0x120>
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f023 0320 	bic.w	r3, r3, #32
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b8a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <CLCD_Write_Display+0x138>
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	e003      	b.n	8001ba8 <CLCD_Write_Display+0x140>
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f023 0310 	bic.w	r3, r3, #16
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001baa:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS High
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW Low
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bbe:	f023 0302 	bic.w	r3, r3, #2
 8001bc2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN High
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN Low
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <CLCD_Write_Display+0x190>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6153      	str	r3, [r2, #20]
	
	HAL_Delay(1);
 8001be8:	2001      	movs	r0, #1
 8001bea:	f002 fe75 	bl	80048d8 <HAL_Delay>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 Character LCD
	switch(y)
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <CLCD_Gotoxy+0x1c>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d007      	beq.n	8001c26 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : instruction_out(0x90+x); break;
		//case 3 : instruction_out(0xd0+x); break;
	}
}
 8001c16:	e00d      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3b80      	subs	r3, #128	; 0x80
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fe58 	bl	80018d4 <CLCD_Write_Instruction>
 8001c24:	e006      	b.n	8001c34 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3b40      	subs	r3, #64	; 0x40
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fe51 	bl	80018d4 <CLCD_Write_Instruction>
 8001c32:	bf00      	nop
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	603a      	str	r2, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 8001c50:	79ba      	ldrb	r2, [r7, #6]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ffd0 	bl	8001bfc <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff feff 	bl	8001a68 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ef      	bne.n	8001c5c <CLCD_Puts+0x20>
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <CLCD_Init>:

void CLCD_Init(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001c8a:	2064      	movs	r0, #100	; 0x64
 8001c8c:	f002 fe24 	bl	80048d8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c90:	2028      	movs	r0, #40	; 0x28
 8001c92:	f7ff fe1f 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001c96:	200a      	movs	r0, #10
 8001c98:	f002 fe1e 	bl	80048d8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001c9c:	2028      	movs	r0, #40	; 0x28
 8001c9e:	f7ff fe19 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f002 fe18 	bl	80048d8 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001ca8:	200c      	movs	r0, #12
 8001caa:	f7ff fe13 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 8001cae:	2006      	movs	r0, #6
 8001cb0:	f7ff fe10 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff fe0d 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fe0a 	bl	80018d4 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fe07 	bl	80018d4 <CLCD_Write_Instruction>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff fe00 	bl	80018d4 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001cd4:	200a      	movs	r0, #10
 8001cd6:	f002 fdff 	bl	80048d8 <HAL_Delay>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001cf4:	4a36      	ldr	r2, [pc, #216]	; (8001dd0 <MX_ADC1_Init+0xf0>)
 8001cf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001cfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d00:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d1a:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d22:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <MX_ADC1_Init+0xf4>)
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d42:	f002 fded 	bl	8004920 <HAL_ADC_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d4c:	f001 fe62 	bl	8003a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d50:	230a      	movs	r3, #10
 8001d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4619      	mov	r1, r3
 8001d60:	481a      	ldr	r0, [pc, #104]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d62:	f002 ff4f 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d6c:	f001 fe52 	bl	8003a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001d70:	230c      	movs	r3, #12
 8001d72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d7e:	f002 ff41 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d88:	f001 fe44 	bl	8003a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d8c:	230d      	movs	r3, #13
 8001d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001d90:	2303      	movs	r3, #3
 8001d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001d9a:	f002 ff33 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001da4:	f001 fe36 	bl	8003a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001da8:	2309      	movs	r3, #9
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dac:	2304      	movs	r3, #4
 8001dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_ADC1_Init+0xec>)
 8001db6:	f002 ff25 	bl	8004c04 <HAL_ADC_ConfigChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001dc0:	f001 fe28 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200001fc 	.word	0x200001fc
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	0f000001 	.word	0x0f000001

08001dd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a3c      	ldr	r2, [pc, #240]	; (8001ee8 <HAL_ADC_MspInit+0x110>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d171      	bne.n	8001ede <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e20:	f043 0304 	orr.w	r3, r3, #4
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_ADC_MspInit+0x114>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001e4e:	230d      	movs	r3, #13
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <HAL_ADC_MspInit+0x118>)
 8001e62:	f003 ff67 	bl	8005d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e66:	2302      	movs	r3, #2
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <HAL_ADC_MspInit+0x11c>)
 8001e7a:	f003 ff5b 	bl	8005d34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_ADC_MspInit+0x124>)
 8001e82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec2:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001ec4:	f003 fb34 	bl	8005530 <HAL_DMA_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ece:	f001 fda1 	bl	8003a14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001ed6:	639a      	str	r2, [r3, #56]	; 0x38
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_ADC_MspInit+0x120>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012000 	.word	0x40012000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	20000244 	.word	0x20000244
 8001efc:	40026410 	.word	0x40026410

08001f00 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f06:	463b      	mov	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <MX_DAC_Init+0x50>)
 8001f12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f14:	480d      	ldr	r0, [pc, #52]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f16:	f003 fa26 	bl	8005366 <HAL_DAC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f20:	f001 fd78 	bl	8003a14 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <MX_DAC_Init+0x4c>)
 8001f34:	f003 fa99 	bl	800546a <HAL_DAC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f3e:	f001 fd69 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200002a4 	.word	0x200002a4
 8001f50:	40007400 	.word	0x40007400

08001f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_DAC_MspInit+0x7c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d127      	bne.n	8001fc6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_DAC_MspInit+0x80>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_DAC_MspInit+0x84>)
 8001fc2:	f003 feb7 	bl	8005d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	; 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40007400 	.word	0x40007400
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020000 	.word	0x40020000

08001fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <MX_DMA_Init+0x3c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <MX_DMA_Init+0x3c>)
 8001fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <MX_DMA_Init+0x3c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2038      	movs	r0, #56	; 0x38
 8002004:	f003 f979 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002008:	2038      	movs	r0, #56	; 0x38
 800200a:	f003 f992 	bl	8005332 <HAL_NVIC_EnableIRQ>

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 031c 	add.w	r3, r7, #28
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 800203c:	f043 0310 	orr.w	r3, r3, #16
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a64      	ldr	r2, [pc, #400]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a5d      	ldr	r2, [pc, #372]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b49      	ldr	r3, [pc, #292]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a48      	ldr	r2, [pc, #288]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <MX_GPIO_Init+0x1cc>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80020da:	2200      	movs	r2, #0
 80020dc:	21f7      	movs	r1, #247	; 0xf7
 80020de:	4843      	ldr	r0, [pc, #268]	; (80021ec <MX_GPIO_Init+0x1d0>)
 80020e0:	f003 ffdc 	bl	800609c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2101      	movs	r1, #1
 80020e8:	4841      	ldr	r0, [pc, #260]	; (80021f0 <MX_GPIO_Init+0x1d4>)
 80020ea:	f003 ffd7 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80020f4:	483f      	ldr	r0, [pc, #252]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80020f6:	f003 ffd1 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	483e      	ldr	r0, [pc, #248]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 8002100:	f003 ffcc 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8002104:	23f7      	movs	r3, #247	; 0xf7
 8002106:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002108:	2301      	movs	r3, #1
 800210a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	4834      	ldr	r0, [pc, #208]	; (80021ec <MX_GPIO_Init+0x1d0>)
 800211c:	f003 fe0a 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002120:	2308      	movs	r3, #8
 8002122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002124:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	482d      	ldr	r0, [pc, #180]	; (80021ec <MX_GPIO_Init+0x1d0>)
 8002136:	f003 fdfd 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800213a:	2322      	movs	r3, #34	; 0x22
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	482a      	ldr	r0, [pc, #168]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 800214e:	f003 fdf1 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002152:	2301      	movs	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4821      	ldr	r0, [pc, #132]	; (80021f0 <MX_GPIO_Init+0x1d4>)
 800216a:	f003 fde3 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800216e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	481b      	ldr	r0, [pc, #108]	; (80021f0 <MX_GPIO_Init+0x1d4>)
 8002184:	f003 fdd6 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002188:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800218e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4815      	ldr	r0, [pc, #84]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80021a0:	f003 fdc8 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80021a4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <MX_GPIO_Init+0x1d8>)
 80021be:	f003 fdb9 	bl	8005d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_GPIO_Init+0x1dc>)
 80021da:	f003 fdab 	bl	8005d34 <HAL_GPIO_Init>

}
 80021de:	bf00      	nop
 80021e0:	3730      	adds	r7, #48	; 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40020800 	.word	0x40020800

080021fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_I2C1_Init+0x50>)
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <MX_I2C1_Init+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_I2C1_Init+0x50>)
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <MX_I2C1_Init+0x58>)
 800220a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_I2C1_Init+0x50>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_I2C1_Init+0x50>)
 800221a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800221e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <MX_I2C1_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_I2C1_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <MX_I2C1_Init+0x50>)
 800223a:	f003 ff61 	bl	8006100 <HAL_I2C_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002244:	f001 fbe6 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200002b8 	.word	0x200002b8
 8002250:	40005400 	.word	0x40005400
 8002254:	00061a80 	.word	0x00061a80

08002258 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	; (80022dc <HAL_I2C_MspInit+0x84>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d12b      	bne.n	80022d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229a:	2312      	movs	r3, #18
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022a6:	2304      	movs	r3, #4
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	480c      	ldr	r0, [pc, #48]	; (80022e4 <HAL_I2C_MspInit+0x8c>)
 80022b2:	f003 fd3f 	bl	8005d34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_I2C_MspInit+0x88>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40005400 	.word	0x40005400
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020400 	.word	0x40020400

080022e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b0d0      	sub	sp, #320	; 0x140
 80022ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ee:	f002 fa8d 	bl	800480c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022f2:	f000 fcf9 	bl	8002ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022f6:	f7ff fe91 	bl	800201c <MX_GPIO_Init>
  MX_DMA_Init();
 80022fa:	f7ff fe6f 	bl	8001fdc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80022fe:	f002 f9e9 	bl	80046d4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8002302:	f001 ff9f 	bl	8004244 <MX_TIM7_Init>
  MX_TIM3_Init();
 8002306:	f001 fe07 	bl	8003f18 <MX_TIM3_Init>
  MX_TIM4_Init();
 800230a:	f001 fe7d 	bl	8004008 <MX_TIM4_Init>
  MX_TIM10_Init();
 800230e:	f001 ffcf 	bl	80042b0 <MX_TIM10_Init>
  MX_TIM2_Init();
 8002312:	f001 fd8b 	bl	8003e2c <MX_TIM2_Init>
  MX_TIM5_Init();
 8002316:	f001 fec5 	bl	80040a4 <MX_TIM5_Init>
  MX_ADC1_Init();
 800231a:	f7ff fce1 	bl	8001ce0 <MX_ADC1_Init>
  MX_DAC_Init();
 800231e:	f7ff fdef 	bl	8001f00 <MX_DAC_Init>
  MX_I2C1_Init();
 8002322:	f7ff ff6b 	bl	80021fc <MX_I2C1_Init>
  MX_RTC_Init();
 8002326:	f001 fb7b 	bl	8003a20 <MX_RTC_Init>
  MX_TIM13_Init();
 800232a:	f002 f80f 	bl	800434c <MX_TIM13_Init>
  MX_TIM14_Init();
 800232e:	f002 f831 	bl	8004394 <MX_TIM14_Init>
  MX_TIM6_Init();
 8002332:	f001 ff51 	bl	80041d8 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002336:	f000 fd43 	bl	8002dc0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //---------------------------------------------------------right led --//use PMW -> TIM3_CH1,2,3-----//
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	48d6      	ldr	r0, [pc, #856]	; (8002698 <main+0x3b0>)
 8002340:	f003 feac 	bl	800609c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	2101      	movs	r1, #1
 8002348:	48d4      	ldr	r0, [pc, #848]	; (800269c <main+0x3b4>)
 800234a:	f003 fea7 	bl	800609c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	2120      	movs	r1, #32
 8002352:	48d2      	ldr	r0, [pc, #840]	; (800269c <main+0x3b4>)
 8002354:	f003 fea2 	bl	800609c <HAL_GPIO_WritePin>
  //---------------------------------------------------------left led---//use PMW -> TIM4_CH1,2,3-----//
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235e:	48d0      	ldr	r0, [pc, #832]	; (80026a0 <main+0x3b8>)
 8002360:	f003 fe9c 	bl	800609c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800236a:	48cd      	ldr	r0, [pc, #820]	; (80026a0 <main+0x3b8>)
 800236c:	f003 fe96 	bl	800609c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002376:	48ca      	ldr	r0, [pc, #808]	; (80026a0 <main+0x3b8>)
 8002378:	f003 fe90 	bl	800609c <HAL_GPIO_WritePin>
  //----------------------------------------------------------------------------------------------//
    //HAL_UART_Receive_IT(&huart3, &rx3_data, 1);  //lesson 2-3 make uart Intterupt
    HAL_TIM_Base_Start_IT(&htim7);// system clock?--------------------------TIM7----1.0s------------//
 800237c:	48c9      	ldr	r0, [pc, #804]	; (80026a4 <main+0x3bc>)
 800237e:	f005 f80f 	bl	80073a0 <HAL_TIM_Base_Start_IT>

    HAL_TIM_Base_Start_IT(&htim6);
 8002382:	48c9      	ldr	r0, [pc, #804]	; (80026a8 <main+0x3c0>)
 8002384:	f005 f80c 	bl	80073a0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim13);
 8002388:	48c8      	ldr	r0, [pc, #800]	; (80026ac <main+0x3c4>)
 800238a:	f005 f809 	bl	80073a0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim14);
 800238e:	48c8      	ldr	r0, [pc, #800]	; (80026b0 <main+0x3c8>)
 8002390:	f005 f806 	bl	80073a0 <HAL_TIM_Base_Start_IT>
    //---------------------CLCD Setting--------------------------------------------------------//
    CLCD_GPIO_Init();
 8002394:	f7ff fa4e 	bl	8001834 <CLCD_GPIO_Init>
    CLCD_Init();
 8002398:	f7ff fc75 	bl	8001c86 <CLCD_Init>
    //------------------------------------------------------------------------------------------//
    //CLCD_Puts(0,0, "Welcome to");
    //CLCD_Puts(0,1, "M-HIVE");
    CLCD_Clear();
 800239c:	f7ff fc95 	bl	8001cca <CLCD_Clear>

    _7SEG_GPIO_Init();// _7SEG_GPIO Setting-----------------------------------------------//
 80023a0:	f7fe fd80 	bl	8000ea4 <_7SEG_GPIO_Init>
     //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);  // dc moter
     //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4); // dc moter

    //HAL_ADC_Start_DMA(&hadc1, adcval[0], 4);
    //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
    HAL_ADC_Start_DMA(&hadc1, &adcval[0], 1);
 80023a4:	2201      	movs	r2, #1
 80023a6:	49c3      	ldr	r1, [pc, #780]	; (80026b4 <main+0x3cc>)
 80023a8:	48c3      	ldr	r0, [pc, #780]	; (80026b8 <main+0x3d0>)
 80023aa:	f002 fafd 	bl	80049a8 <HAL_ADC_Start_DMA>
 //----------------------------------new time code start-------------------------------------------------//
    button_obj_t push_btn; //+++++++
    buttonObjCreate(&push_btn, 1000); // (button_obj_t *p_obj, uint32_t repeat_time);@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 80023ae:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80023b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fece 	bl	8003158 <buttonObjCreate>

    set_daytime d_date;
    dayDateCreate(&d_date, 24, 12, 31);
 80023bc:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80023c0:	231f      	movs	r3, #31
 80023c2:	220c      	movs	r2, #12
 80023c4:	2118      	movs	r1, #24
 80023c6:	f000 fd3f 	bl	8002e48 <dayDateCreate>
    daytimeCreate(&d_date, 23, 59, 58);
 80023ca:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80023ce:	233a      	movs	r3, #58	; 0x3a
 80023d0:	223b      	movs	r2, #59	; 0x3b
 80023d2:	2117      	movs	r1, #23
 80023d4:	f000 fd5e 	bl	8002e94 <daytimeCreate>

    set_alarmtime a_date; //suho
    AlarmDateCreate(&a_date, 01, 02);
 80023d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023dc:	2202      	movs	r2, #2
 80023de:	2101      	movs	r1, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd71 	bl	8002ec8 <AlarmDateCreate>
    AlarmtimeCreate(&a_date, 03, 00);
 80023e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023ea:	2200      	movs	r2, #0
 80023ec:	2103      	movs	r1, #3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fd80 	bl	8002ef4 <AlarmtimeCreate>

   MoterControl m_con;
   MoterCreate(&m_con);
 80023f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f9bb 	bl	8003774 <MoterCreate>

	MoterInOutSystem MIOS;
	MoterSystemCreate(&MIOS);
 80023fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 ff82 	bl	800330c <MoterSystemCreate>
    //=========================================================rebuild timer========//
    set_M_time M_Time;
//------------------------------------------------------------------------------------------------//
    uint8_t alarm=1;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
    uint8_t tmpDate[20]; // CLCD
    uint8_t tmpTime[20]; // CLCD
    uint8_t tmpMode[20];
    uint8_t tmpCLCD[20];

    uint8_t pretmp = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135
    //uint8_t arr = TIM2 -> ARR;

    enum notes A[] = {mi4, re4, do4, re4, mi4, mi4, mi4, re4, re4, re4, mi4, mi4, mi4};
 8002414:	4ba9      	ldr	r3, [pc, #676]	; (80026bc <main+0x3d4>)
 8002416:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800241a:	461d      	mov	r5, r3
 800241c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002424:	c403      	stmia	r4!, {r0, r1}
 8002426:	8022      	strh	r2, [r4, #0]
    int notes_num[] = {2,7,1,7,0,7,1,7,2,7,2,7,2,7,1,7,1,7,1,7,2,7,2,7,2,8};
 8002428:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800242c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002430:	4aa3      	ldr	r2, [pc, #652]	; (80026c0 <main+0x3d8>)
 8002432:	4618      	mov	r0, r3
 8002434:	4611      	mov	r1, r2
 8002436:	2368      	movs	r3, #104	; 0x68
 8002438:	461a      	mov	r2, r3
 800243a:	f007 fd20 	bl	8009e7e <memcpy>
    int aa = sizeof(notes_num)/sizeof(int);
 800243e:	231a      	movs	r3, #26
 8002440:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    int test_num = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    //uint16_t ccr = 0;   //led pwm control
    //uint16_t psc = 1000; //??
    //uint8_t ud_flag = 0; //??
    //uint16_t dacval = 0;//dac control

    uint8_t alarm_from_nowon = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$44//
    uint8_t old_Sec = d_date.Sec;
 8002450:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002454:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint8_t k =0;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a

    int l = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    int j = notes_num[l];
 8002464:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002468:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800246c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    int na = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    uint16_t turbidity = adcval[0]; // turbidity value in
 800247e:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <main+0x3cc>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  while (1)
  {
	  MoterStart1(&m_con); //moter14 and 23 start/stop
 8002486:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f98c 	bl	80037a8 <MoterStart1>
	  MoterMoving(&m_con);// moter power level up/down
 8002490:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002494:	4618      	mov	r0, r3
 8002496:	f001 f9d9 	bl	800384c <MoterMoving>
	  current_BtnTick=HAL_GetTick();// need buttonObjGetClicked
 800249a:	f001 fa79 	bl	8003990 <HAL_GetTick>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a88      	ldr	r2, [pc, #544]	; (80026c4 <main+0x3dc>)
 80024a2:	6013      	str	r3, [r2, #0]
	  daytimeview(&d_date);// timer starting
 80024a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fd37 	bl	8002f1c <daytimeview>
//--switch changing code test start---------------------------------------------------------------//
	  switch (switch_viewmode) { // was view and mode change
 80024ae:	4b86      	ldr	r3, [pc, #536]	; (80026c8 <main+0x3e0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	f200 83cf 	bhi.w	8002c56 <main+0x96e>
 80024b8:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <main+0x1d8>)
 80024ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024be:	bf00      	nop
 80024c0:	080024d9 	.word	0x080024d9
 80024c4:	080025e7 	.word	0x080025e7
 80024c8:	08002859 	.word	0x08002859
 80024cc:	0800296f 	.word	0x0800296f
 80024d0:	08002b6f 	.word	0x08002b6f
 80024d4:	08002c1d 	.word	0x08002c1d
	  case switch_normal :
//case 0=switch_normal================================================================//
		  sprintf(tmpDate, "TIME 20%02d.%02d.%02d ", d_date.Year, d_date.Months, d_date.Date); //CLCD 16
 80024d8:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80024dc:	461a      	mov	r2, r3
 80024de:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80024e2:	4619      	mov	r1, r3
 80024e4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80024e8:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	460b      	mov	r3, r1
 80024f0:	4976      	ldr	r1, [pc, #472]	; (80026cc <main+0x3e4>)
 80024f2:	f007 fbe1 	bl	8009cb8 <siprintf>
		  CLCD_Puts(0,0, tmpDate);
 80024f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80024fa:	461a      	mov	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f7ff fb9c 	bl	8001c3c <CLCD_Puts>
		  sprintf(tmpTime, "       %02d:%02d    ", d_date.Hour, d_date.Min); // [7], 5, [4] = 16
 8002504:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002508:	461a      	mov	r2, r3
 800250a:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 800250e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002512:	496f      	ldr	r1, [pc, #444]	; (80026d0 <main+0x3e8>)
 8002514:	f007 fbd0 	bl	8009cb8 <siprintf>
		  CLCD_Puts(0,1, tmpTime);
 8002518:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800251c:	461a      	mov	r2, r3
 800251e:	2101      	movs	r1, #1
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff fb8b 	bl	8001c3c <CLCD_Puts>

		  if(old_Sec != d_date.Sec){ //_7SEG_led *
 8002526:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800252a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800252e:	429a      	cmp	r2, r3
 8002530:	d020      	beq.n	8002574 <main+0x28c>
			  _7SEG_SetNumber(DGT1, d_date.Sec/10, OFF);
 8002532:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002536:	4a67      	ldr	r2, [pc, #412]	; (80026d4 <main+0x3ec>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2200      	movs	r2, #0
 8002542:	4619      	mov	r1, r3
 8002544:	2000      	movs	r0, #0
 8002546:	f7fe fd93 	bl	8001070 <_7SEG_SetNumber>
			  _7SEG_SetNumber(DGT2, d_date.Sec%10, ON);
 800254a:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 800254e:	4b61      	ldr	r3, [pc, #388]	; (80026d4 <main+0x3ec>)
 8002550:	fba3 1302 	umull	r1, r3, r3, r2
 8002554:	08d9      	lsrs	r1, r3, #3
 8002556:	460b      	mov	r3, r1
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2201      	movs	r2, #1
 8002564:	4619      	mov	r1, r3
 8002566:	2001      	movs	r0, #1
 8002568:	f7fe fd82 	bl	8001070 <_7SEG_SetNumber>
			  old_Sec = d_date.Sec;
 800256c:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002570:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
		  }

//-----------------------------------------------------btn on/off check start------------------------------------//
		  getBtn();// What Btn?
 8002574:	f000 fe8c 	bl	8003290 <getBtn>
		  if(buttonObjGetClicked(&push_btn, 50) == true) //pressed_time
 8002578:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800257c:	2132      	movs	r1, #50	; 0x32
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fe02 	bl	8003188 <buttonObjGetClicked>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <main+0x2b2>
		  {
			  move_cur_time(&M_Time, sw_button);
 800258a:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <main+0x3f0>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fee7 	bl	8003368 <move_cur_time>
		  }
//-----------------------------------------------------btn on/off check end------------------------------------//
		  if(sw_button==SW_ONE){// butten push long ,
 800259a:	4b4f      	ldr	r3, [pc, #316]	; (80026d8 <main+0x3f0>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f040 8350 	bne.w	8002c44 <main+0x95c>
			  current_tick=HAL_GetTick();// new time set Continue
 80025a4:	f001 f9f4 	bl	8003990 <HAL_GetTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <main+0x3f4>)
 80025ac:	6013      	str	r3, [r2, #0]
			  if(current_tick-old_tick > 2000){// 2.0s over
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <main+0x3f4>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <main+0x3f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025bc:	f240 8342 	bls.w	8002c44 <main+0x95c>
				old_tick=current_tick;//old_tick Time reset
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <main+0x3f4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <main+0x3f8>)
 80025c6:	6013      	str	r3, [r2, #0]
				Load_timeSet(&d_date, &M_Time);
 80025c8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80025cc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fd6b 	bl	80030ae <Load_timeSet>
				sw_button=NONE;
 80025d8:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <main+0x3f0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]

				switch_viewmode = switch_normalTimeSet; // = case 1
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <main+0x3e0>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
				}
		  }
		  break;
 80025e4:	e32e      	b.n	8002c44 <main+0x95c>

	  case switch_normalTimeSet :
//1=switch_normalTimeSet================================================================//
		getBtn();
 80025e6:	f000 fe53 	bl	8003290 <getBtn>
		if(buttonObjGetClicked(&push_btn, 50) == true) //pressed_time
 80025ea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80025ee:	2132      	movs	r1, #50	; 0x32
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fdc9 	bl	8003188 <buttonObjGetClicked>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <main+0x324>
		{
		   move_cur_time(&M_Time, sw_button);
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <main+0x3f0>)
 80025fe:	781a      	ldrb	r2, [r3, #0]
 8002600:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 feae 	bl	8003368 <move_cur_time>
		}
// -----set blinking-----------------------------------------------//
		if(toggle){ // toggle is 0.5s -> 0 or 1 change
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <main+0x3fc>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d031      	beq.n	8002678 <main+0x390>
		  sprintf(tmpDate, "TIME 20%02d.%02d.%02d ", M_Time.m_Year, M_Time.m_Months, M_Time.m_Date); //CLCD 16
 8002614:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8002618:	461a      	mov	r2, r3
 800261a:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800261e:	4619      	mov	r1, r3
 8002620:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 8002624:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	460b      	mov	r3, r1
 800262c:	4927      	ldr	r1, [pc, #156]	; (80026cc <main+0x3e4>)
 800262e:	f007 fb43 	bl	8009cb8 <siprintf>
		  CLCD_Puts(0,0, tmpDate);
 8002632:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002636:	461a      	mov	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fafe 	bl	8001c3c <CLCD_Puts>
		  sprintf(tmpTime, "SET %s %02d:%02d    ", ampm[AMPM_Change], M_Time.m_Hour, M_Time.m_Min); // 12, [4] = 16
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <main+0x400>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <main+0x404>)
 800264e:	441a      	add	r2, r3
 8002650:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002654:	4619      	mov	r1, r3
 8002656:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800265a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	4923      	ldr	r1, [pc, #140]	; (80026f0 <main+0x408>)
 8002664:	f007 fb28 	bl	8009cb8 <siprintf>
		  CLCD_Puts(0,1, tmpTime);
 8002668:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800266c:	461a      	mov	r2, r3
 800266e:	2101      	movs	r1, #1
 8002670:	2000      	movs	r0, #0
 8002672:	f7ff fae3 	bl	8001c3c <CLCD_Puts>
 8002676:	e095      	b.n	80027a4 <main+0x4bc>

		}else{ //toggle = 0
			if(set_time==YEAR){
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <main+0x40c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d13d      	bne.n	80026fc <main+0x414>
				sprintf(tmpDate,"TIME 20  .%02d.%02d ", M_Time.m_Months, M_Time.m_Date); //YEAR place [ ]
 8002680:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8002684:	461a      	mov	r2, r3
 8002686:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800268a:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800268e:	491a      	ldr	r1, [pc, #104]	; (80026f8 <main+0x410>)
 8002690:	f007 fb12 	bl	8009cb8 <siprintf>
 8002694:	e086      	b.n	80027a4 <main+0x4bc>
 8002696:	bf00      	nop
 8002698:	40020800 	.word	0x40020800
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	200004d4 	.word	0x200004d4
 80026a8:	2000048c 	.word	0x2000048c
 80026ac:	20000564 	.word	0x20000564
 80026b0:	200005ac 	.word	0x200005ac
 80026b4:	20000320 	.word	0x20000320
 80026b8:	200001fc 	.word	0x200001fc
 80026bc:	0800c11c 	.word	0x0800c11c
 80026c0:	0800c138 	.word	0x0800c138
 80026c4:	20000330 	.word	0x20000330
 80026c8:	20000327 	.word	0x20000327
 80026cc:	0800bf90 	.word	0x0800bf90
 80026d0:	0800bfa8 	.word	0x0800bfa8
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	20000325 	.word	0x20000325
 80026dc:	2000032c 	.word	0x2000032c
 80026e0:	20000328 	.word	0x20000328
 80026e4:	20000310 	.word	0x20000310
 80026e8:	20000311 	.word	0x20000311
 80026ec:	20000004 	.word	0x20000004
 80026f0:	0800bfc0 	.word	0x0800bfc0
 80026f4:	20000322 	.word	0x20000322
 80026f8:	0800bfd8 	.word	0x0800bfd8
			}else if(set_time==MONTH){
 80026fc:	4bc2      	ldr	r3, [pc, #776]	; (8002a08 <main+0x720>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d10a      	bne.n	800271a <main+0x432>
				sprintf(tmpDate,"TIME 20%02d.  .%02d ", M_Time.m_Year, M_Time.m_Date);
 8002704:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8002708:	461a      	mov	r2, r3
 800270a:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800270e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002712:	49be      	ldr	r1, [pc, #760]	; (8002a0c <main+0x724>)
 8002714:	f007 fad0 	bl	8009cb8 <siprintf>
 8002718:	e044      	b.n	80027a4 <main+0x4bc>
			}else if(set_time==DATE){
 800271a:	4bbb      	ldr	r3, [pc, #748]	; (8002a08 <main+0x720>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d10a      	bne.n	8002738 <main+0x450>
				sprintf(tmpDate,"TIME 20%02d.%02d.   ", M_Time.m_Year, M_Time.m_Months);
 8002722:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8002726:	461a      	mov	r2, r3
 8002728:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 800272c:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002730:	49b7      	ldr	r1, [pc, #732]	; (8002a10 <main+0x728>)
 8002732:	f007 fac1 	bl	8009cb8 <siprintf>
 8002736:	e035      	b.n	80027a4 <main+0x4bc>
			}else if(set_time==AMPM){
 8002738:	4bb3      	ldr	r3, [pc, #716]	; (8002a08 <main+0x720>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d10a      	bne.n	8002756 <main+0x46e>
				sprintf(tmpTime,"SET    %02d:%02d    ", M_Time.m_Hour, M_Time.m_Min);
 8002740:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002744:	461a      	mov	r2, r3
 8002746:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800274a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800274e:	49b1      	ldr	r1, [pc, #708]	; (8002a14 <main+0x72c>)
 8002750:	f007 fab2 	bl	8009cb8 <siprintf>
 8002754:	e026      	b.n	80027a4 <main+0x4bc>
			}else if(set_time==HOUR){
 8002756:	4bac      	ldr	r3, [pc, #688]	; (8002a08 <main+0x720>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b05      	cmp	r3, #5
 800275c:	d10f      	bne.n	800277e <main+0x496>
				sprintf(tmpTime,"SET %s   :%02d    ", ampm[AMPM_Change], M_Time.m_Min);
 800275e:	4bae      	ldr	r3, [pc, #696]	; (8002a18 <main+0x730>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	4aac      	ldr	r2, [pc, #688]	; (8002a1c <main+0x734>)
 800276c:	441a      	add	r2, r3
 800276e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8002772:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002776:	49aa      	ldr	r1, [pc, #680]	; (8002a20 <main+0x738>)
 8002778:	f007 fa9e 	bl	8009cb8 <siprintf>
 800277c:	e012      	b.n	80027a4 <main+0x4bc>
			}else if(set_time==MINUTE){
 800277e:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <main+0x720>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d10e      	bne.n	80027a4 <main+0x4bc>
				sprintf(tmpTime,"SET %s %02d:      ", ampm[AMPM_Change], M_Time.m_Hour);
 8002786:	4ba4      	ldr	r3, [pc, #656]	; (8002a18 <main+0x730>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	4aa2      	ldr	r2, [pc, #648]	; (8002a1c <main+0x734>)
 8002794:	441a      	add	r2, r3
 8002796:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800279a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800279e:	49a1      	ldr	r1, [pc, #644]	; (8002a24 <main+0x73c>)
 80027a0:	f007 fa8a 	bl	8009cb8 <siprintf>
			}
		}
		CLCD_Puts(0,0, tmpDate);
 80027a4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027a8:	461a      	mov	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff fa45 	bl	8001c3c <CLCD_Puts>
        CLCD_Puts(0,1, tmpTime);
 80027b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80027b6:	461a      	mov	r2, r3
 80027b8:	2101      	movs	r1, #1
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff fa3e 	bl	8001c3c <CLCD_Puts>
//---------------------------------------------blinking END-------------------------------------------------//
        if(old_Sec != d_date.Sec){
 80027c0:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80027c4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d020      	beq.n	800280e <main+0x526>
			 _7SEG_SetNumber(DGT1, d_date.Sec/10, OFF);
 80027cc:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80027d0:	4a95      	ldr	r2, [pc, #596]	; (8002a28 <main+0x740>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	4619      	mov	r1, r3
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fc46 	bl	8001070 <_7SEG_SetNumber>
			 _7SEG_SetNumber(DGT2, d_date.Sec%10, ON);
 80027e4:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 80027e8:	4b8f      	ldr	r3, [pc, #572]	; (8002a28 <main+0x740>)
 80027ea:	fba3 1302 	umull	r1, r3, r3, r2
 80027ee:	08d9      	lsrs	r1, r3, #3
 80027f0:	460b      	mov	r3, r1
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2201      	movs	r2, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	2001      	movs	r0, #1
 8002802:	f7fe fc35 	bl	8001070 <_7SEG_SetNumber>
			 old_Sec = d_date.Sec;
 8002806:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 800280a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        }

        if(sw_button==SW_ONE){// butten push long ,
 800280e:	4b87      	ldr	r3, [pc, #540]	; (8002a2c <main+0x744>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	f040 8218 	bne.w	8002c48 <main+0x960>
        	current_tick=HAL_GetTick();// new time set Continue
 8002818:	f001 f8ba 	bl	8003990 <HAL_GetTick>
 800281c:	4603      	mov	r3, r0
 800281e:	4a84      	ldr	r2, [pc, #528]	; (8002a30 <main+0x748>)
 8002820:	6013      	str	r3, [r2, #0]
        	if(current_tick-old_tick > 2000){// 2.0s over
 8002822:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <main+0x748>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b83      	ldr	r3, [pc, #524]	; (8002a34 <main+0x74c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002830:	f240 820a 	bls.w	8002c48 <main+0x960>
			  old_tick=current_tick;//old_tick Time reset
 8002834:	4b7e      	ldr	r3, [pc, #504]	; (8002a30 <main+0x748>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <main+0x74c>)
 800283a:	6013      	str	r3, [r2, #0]
			  Set_Move_time(&d_date, &M_Time); // d_date <- m_Time
 800283c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8002840:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fc12 	bl	8003070 <Set_Move_time>
			  CLCD_Clear();
 800284c:	f7ff fa3d 	bl	8001cca <CLCD_Clear>
			  switch_viewmode = switch_normal; // = case 0
 8002850:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <main+0x750>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
        	}
        }
        break;
 8002856:	e1f7      	b.n	8002c48 <main+0x960>
	  case switch_alarm :
//2=switch_alarm================================================================//
	         if(alarmcall==ALARM_ZERO){ // how many alarms? one, two
 8002858:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <main+0x754>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d126      	bne.n	80028ae <main+0x5c6>
	            sprintf(tmpMode,"ALARM%d OFF %02d.%02d",alarm, a_date.aMonths, a_date.aDate);
 8002860:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 8002864:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002868:	4619      	mov	r1, r3
 800286a:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800286e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	4972      	ldr	r1, [pc, #456]	; (8002a40 <main+0x758>)
 8002878:	f007 fa1e 	bl	8009cb8 <siprintf>
	            CLCD_Puts(0,0, tmpMode);
 800287c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002880:	461a      	mov	r2, r3
 8002882:	2100      	movs	r1, #0
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff f9d9 	bl	8001c3c <CLCD_Puts>
	            sprintf(tmpTime,"A    %02d:%02d    ", a_date.aHour, a_date.aMin);
 800288a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800288e:	461a      	mov	r2, r3
 8002890:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8002894:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002898:	496a      	ldr	r1, [pc, #424]	; (8002a44 <main+0x75c>)
 800289a:	f007 fa0d 	bl	8009cb8 <siprintf>
	            CLCD_Puts(0,1, tmpTime);
 800289e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028a2:	461a      	mov	r2, r3
 80028a4:	2101      	movs	r1, #1
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff f9c8 	bl	8001c3c <CLCD_Puts>
 80028ac:	e029      	b.n	8002902 <main+0x61a>
	         }else if(alarmcall==ALARM_ONE){ // is alarm setting after view
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <main+0x754>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d125      	bne.n	8002902 <main+0x61a>
	            sprintf(tmpMode,"ALARM%d ON  %02d.%02d",alarm, a_date.aMonths, a_date.aDate);
 80028b6:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80028ba:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 80028be:	4619      	mov	r1, r3
 80028c0:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 80028c4:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	495e      	ldr	r1, [pc, #376]	; (8002a48 <main+0x760>)
 80028ce:	f007 f9f3 	bl	8009cb8 <siprintf>
	            CLCD_Puts(0,0, tmpMode);
 80028d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028d6:	461a      	mov	r2, r3
 80028d8:	2100      	movs	r1, #0
 80028da:	2000      	movs	r0, #0
 80028dc:	f7ff f9ae 	bl	8001c3c <CLCD_Puts>
	            sprintf(tmpTime,"A    %02d:%02d    ", a_date.aHour, a_date.aMin);
 80028e0:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80028e4:	461a      	mov	r2, r3
 80028e6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80028ea:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80028ee:	4955      	ldr	r1, [pc, #340]	; (8002a44 <main+0x75c>)
 80028f0:	f007 f9e2 	bl	8009cb8 <siprintf>
	            CLCD_Puts(0,1, tmpTime);
 80028f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028f8:	461a      	mov	r2, r3
 80028fa:	2101      	movs	r1, #1
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7ff f99d 	bl	8001c3c <CLCD_Puts>
	         }
	         getBtn();// What Btn?
 8002902:	f000 fcc5 	bl	8003290 <getBtn>
	         if(buttonObjGetClicked(&push_btn, 50) == true)
 8002906:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800290a:	2132      	movs	r1, #50	; 0x32
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fc3b 	bl	8003188 <buttonObjGetClicked>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <main+0x640>
	         {
	              move_cur_time(&M_Time, sw_button);
 8002918:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <main+0x744>)
 800291a:	781a      	ldrb	r2, [r3, #0]
 800291c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd20 	bl	8003368 <move_cur_time>
	         }

	           if(sw_button==SW_ONE){// butten push long ,
 8002928:	4b40      	ldr	r3, [pc, #256]	; (8002a2c <main+0x744>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	f040 818d 	bne.w	8002c4c <main+0x964>
	              current_tick=HAL_GetTick();// new time set Continue
 8002932:	f001 f82d 	bl	8003990 <HAL_GetTick>
 8002936:	4603      	mov	r3, r0
 8002938:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <main+0x748>)
 800293a:	6013      	str	r3, [r2, #0]
	            if(current_tick-old_tick > 2000){// 2.0s over
 800293c:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <main+0x748>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <main+0x74c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800294a:	f240 817f 	bls.w	8002c4c <main+0x964>
	               old_tick=current_tick;//old_tick Time reset
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <main+0x748>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <main+0x74c>)
 8002954:	6013      	str	r3, [r2, #0]
	               Load_alarmSet(&a_date, &M_Time);
 8002956:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800295a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fbde 	bl	8003122 <Load_alarmSet>
	               switch_viewmode = switch_alarmTimeSet; // = case 3
 8002966:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <main+0x750>)
 8002968:	2203      	movs	r2, #3
 800296a:	701a      	strb	r2, [r3, #0]
	            }
	         }
		  break;
 800296c:	e16e      	b.n	8002c4c <main+0x964>
	  case switch_alarmTimeSet :
//3=switch_alarmTimeSet================================================================//
	  getBtn();
 800296e:	f000 fc8f 	bl	8003290 <getBtn>
      if(buttonObjGetClicked(&push_btn, 50) == true) //pressed_time
 8002972:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002976:	2132      	movs	r1, #50	; 0x32
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fc05 	bl	8003188 <buttonObjGetClicked>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <main+0x6ac>
        {
           move_cur_time(&M_Time, sw_button);
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <main+0x744>)
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fcea 	bl	8003368 <move_cur_time>
        }
//---------------------------------------------------------------------------------------//
        if(toggle){//blink_time
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <main+0x764>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d026      	beq.n	80029ea <main+0x702>
           sprintf(tmpMode,"ALARM%d OFF %02d.%02d",alarm, M_Time.m_Months, M_Time.m_Date);
 800299c:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80029a0:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 80029a4:	4619      	mov	r1, r3
 80029a6:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80029aa:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	4923      	ldr	r1, [pc, #140]	; (8002a40 <main+0x758>)
 80029b4:	f007 f980 	bl	8009cb8 <siprintf>
         CLCD_Puts(0,0, tmpMode);
 80029b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80029bc:	461a      	mov	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7ff f93b 	bl	8001c3c <CLCD_Puts>
         sprintf(tmpTime,"SET  %02d:%02d    ", M_Time.m_Hour, M_Time.m_Min);
 80029c6:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80029ca:	461a      	mov	r2, r3
 80029cc:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 80029d0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80029d4:	491e      	ldr	r1, [pc, #120]	; (8002a50 <main+0x768>)
 80029d6:	f007 f96f 	bl	8009cb8 <siprintf>
         CLCD_Puts(0,1, tmpTime);
 80029da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029de:	461a      	mov	r2, r3
 80029e0:	2101      	movs	r1, #1
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff f92a 	bl	8001c3c <CLCD_Puts>
 80029e8:	e061      	b.n	8002aae <main+0x7c6>
        }else{ //toggle = 0
			 if(setalarm==aMONTH){
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <main+0x76c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d134      	bne.n	8002a5c <main+0x774>
				sprintf(tmpMode,"ALARM%d OFF   .%02d", alarm, M_Time.m_Date);
 80029f2:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80029f6:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 80029fa:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80029fe:	4916      	ldr	r1, [pc, #88]	; (8002a58 <main+0x770>)
 8002a00:	f007 f95a 	bl	8009cb8 <siprintf>
 8002a04:	e053      	b.n	8002aae <main+0x7c6>
 8002a06:	bf00      	nop
 8002a08:	20000322 	.word	0x20000322
 8002a0c:	0800bff0 	.word	0x0800bff0
 8002a10:	0800c008 	.word	0x0800c008
 8002a14:	0800c020 	.word	0x0800c020
 8002a18:	20000311 	.word	0x20000311
 8002a1c:	20000004 	.word	0x20000004
 8002a20:	0800c038 	.word	0x0800c038
 8002a24:	0800c04c 	.word	0x0800c04c
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	20000325 	.word	0x20000325
 8002a30:	2000032c 	.word	0x2000032c
 8002a34:	20000328 	.word	0x20000328
 8002a38:	20000327 	.word	0x20000327
 8002a3c:	20000323 	.word	0x20000323
 8002a40:	0800c060 	.word	0x0800c060
 8002a44:	0800c078 	.word	0x0800c078
 8002a48:	0800c08c 	.word	0x0800c08c
 8002a4c:	20000310 	.word	0x20000310
 8002a50:	0800c0a4 	.word	0x0800c0a4
 8002a54:	20000324 	.word	0x20000324
 8002a58:	0800c0b8 	.word	0x0800c0b8
			 }else if(setalarm==aDATE){
 8002a5c:	4b90      	ldr	r3, [pc, #576]	; (8002ca0 <main+0x9b8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d109      	bne.n	8002a78 <main+0x790>
				sprintf(tmpMode,"ALARM%d OFF %02d.  ", alarm, M_Time.m_Months);
 8002a64:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 8002a68:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
 8002a6c:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002a70:	498c      	ldr	r1, [pc, #560]	; (8002ca4 <main+0x9bc>)
 8002a72:	f007 f921 	bl	8009cb8 <siprintf>
 8002a76:	e01a      	b.n	8002aae <main+0x7c6>
			 }else if(setalarm==aHOUR){
 8002a78:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <main+0x9b8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d109      	bne.n	8002a94 <main+0x7ac>
				sprintf(tmpTime,"SET    :%02d    ", M_Time.m_Min);
 8002a80:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8002a84:	461a      	mov	r2, r3
 8002a86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a8a:	4987      	ldr	r1, [pc, #540]	; (8002ca8 <main+0x9c0>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f007 f913 	bl	8009cb8 <siprintf>
 8002a92:	e00c      	b.n	8002aae <main+0x7c6>
			 }else if(setalarm==aMINUTE){
 8002a94:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <main+0x9b8>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d108      	bne.n	8002aae <main+0x7c6>
				sprintf(tmpTime,"SET  %02d:      ", M_Time.m_Hour);
 8002a9c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002aa6:	4981      	ldr	r1, [pc, #516]	; (8002cac <main+0x9c4>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f007 f905 	bl	8009cb8 <siprintf>
			 }
        }
          CLCD_Puts(0,0, tmpMode);
 8002aae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff f8c0 	bl	8001c3c <CLCD_Puts>
          CLCD_Puts(0,1, tmpTime);
 8002abc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff f8b9 	bl	8001c3c <CLCD_Puts>
//---------------------------------------------------------------------------------------//
        if(old_Sec != d_date.Sec){
 8002aca:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002ace:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d020      	beq.n	8002b18 <main+0x830>
           _7SEG_SetNumber(DGT1, d_date.Sec/10, OFF);
 8002ad6:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002ada:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <main+0x9c8>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fac1 	bl	8001070 <_7SEG_SetNumber>
           _7SEG_SetNumber(DGT2, d_date.Sec%10, ON);
 8002aee:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8002af2:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <main+0x9c8>)
 8002af4:	fba3 1302 	umull	r1, r3, r3, r2
 8002af8:	08d9      	lsrs	r1, r3, #3
 8002afa:	460b      	mov	r3, r1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2201      	movs	r2, #1
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7fe fab0 	bl	8001070 <_7SEG_SetNumber>
           old_Sec = d_date.Sec;
 8002b10:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002b14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        }
//---------------------------------------------------------------------------------------//
          if(sw_button==SW_ONE){
 8002b18:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <main+0x9cc>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 8097 	bne.w	8002c50 <main+0x968>
             current_tick=HAL_GetTick();
 8002b22:	f000 ff35 	bl	8003990 <HAL_GetTick>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a63      	ldr	r2, [pc, #396]	; (8002cb8 <main+0x9d0>)
 8002b2a:	6013      	str	r3, [r2, #0]
             if(current_tick-old_tick > 2000){ // if pressed 1.0s over
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <main+0x9d0>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b62      	ldr	r3, [pc, #392]	; (8002cbc <main+0x9d4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b3a:	f240 8089 	bls.w	8002c50 <main+0x968>
                old_tick=current_tick;
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	; (8002cb8 <main+0x9d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <main+0x9d4>)
 8002b44:	6013      	str	r3, [r2, #0]
                Set_Move_alarm(&a_date, &M_Time);
 8002b46:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8002b4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 facb 	bl	80030ec <Set_Move_alarm>
              alarmcall=ALARM_ONE;
 8002b56:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <main+0x9d8>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
              prealarm_state = 0; // just 1 music
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <main+0x9dc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
              switch_viewmode = switch_alarm; // = case 2
 8002b62:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <main+0x9e0>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
              CLCD_Clear();
 8002b68:	f7ff f8af 	bl	8001cca <CLCD_Clear>
             }
          }
		  break;
 8002b6c:	e070      	b.n	8002c50 <main+0x968>
	  case switch_test :
//4=switch_test================================================================//
		  getBtn();// What Btn?
 8002b6e:	f000 fb8f 	bl	8003290 <getBtn>
		   if(buttonObjGetClicked(&push_btn, 50) == true)
 8002b72:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002b76:	2132      	movs	r1, #50	; 0x32
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fb05 	bl	8003188 <buttonObjGetClicked>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <main+0x8ac>
		   {
				move_cur_time(&M_Time, sw_button);
 8002b84:	4b4b      	ldr	r3, [pc, #300]	; (8002cb4 <main+0x9cc>)
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fbea 	bl	8003368 <move_cur_time>
		   }

	        if(old_Sec != d_date.Sec){
 8002b94:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002b98:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d020      	beq.n	8002be2 <main+0x8fa>
	           _7SEG_SetNumber(DGT1, d_date.Sec/10, OFF);
 8002ba0:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002ba4:	4a42      	ldr	r2, [pc, #264]	; (8002cb0 <main+0x9c8>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f7fe fa5c 	bl	8001070 <_7SEG_SetNumber>
	           _7SEG_SetNumber(DGT2, d_date.Sec%10, ON);
 8002bb8:	f897 2109 	ldrb.w	r2, [r7, #265]	; 0x109
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <main+0x9c8>)
 8002bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc2:	08d9      	lsrs	r1, r3, #3
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7fe fa4b 	bl	8001070 <_7SEG_SetNumber>
	           old_Sec = d_date.Sec;
 8002bda:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 8002bde:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	        }

	        if(testNum3 == 1){
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <main+0x9e4>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <main+0x912>
	        	WaterIOS_PushSw(&MIOS);
 8002bea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fb9f 	bl	8003332 <WaterIOS_PushSw>
	        	MoterIOset = 5; // 5 is motersystem start setting
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <main+0x9e8>)
 8002bf6:	2205      	movs	r2, #5
 8002bf8:	701a      	strb	r2, [r3, #0]
	        }

//		  sprintf(tmpDate,"    %d %d ", turbidity, testNum2);
//		  CLCD_Puts(0,0, tmpDate);
	        sprintf(str,"%d    %d  ", turbidity, testNum2);
 8002bfa:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8002bfe:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <main+0x9ec>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <main+0x9f0>)
 8002c08:	f007 f856 	bl	8009cb8 <siprintf>
	        CLCD_Puts(0,0, str);
 8002c0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c10:	461a      	mov	r2, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff f811 	bl	8001c3c <CLCD_Puts>
//	        sprintf(str,"%d   ", testNum3);
//	        CLCD_Puts(0,1, str);
	        break;
 8002c1a:	e01c      	b.n	8002c56 <main+0x96e>

	  case switch_viewchanging :
//5=switch_viewchanging================================================================//
			 getBtn();// What Btn?
 8002c1c:	f000 fb38 	bl	8003290 <getBtn>
			 abuzzer_tick4 = HAL_GetTick();
 8002c20:	f000 feb6 	bl	8003990 <HAL_GetTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <main+0x9f4>)
 8002c28:	6013      	str	r3, [r2, #0]
			 if(abuzzer_tick4 - abuzzer_tick3 == 3000){
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <main+0x9f4>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <main+0x9f8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10b      	bne.n	8002c54 <main+0x96c>
				 switch_viewmode = switch_normal; // = case 0
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <main+0x9e0>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]
			 }
		  break;
 8002c42:	e007      	b.n	8002c54 <main+0x96c>
		  break;
 8002c44:	bf00      	nop
 8002c46:	e006      	b.n	8002c56 <main+0x96e>
        break;
 8002c48:	bf00      	nop
 8002c4a:	e004      	b.n	8002c56 <main+0x96e>
		  break;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <main+0x96e>
		  break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <main+0x96e>
		  break;
 8002c54:	bf00      	nop
//		  // array of melody, len of array, giye name, up count
//	  }

 //---------------------------------------------------------------------------------------//

	  if(turbidity > 3500) {
 8002c56:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8002c5a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f67f ac11 	bls.w	8002486 <main+0x19e>
		  if (MoterIOset == 0) {
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <main+0x9e8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f47f ac0c 	bne.w	8002486 <main+0x19e>
//			  sprintf(str,"%d   ", testNum3);
//			  CLCD_Puts(0,1, str);
			  sprintf(str,"%d    ", turbidity);
 8002c6e:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8002c72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c76:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <main+0x9fc>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f007 f81d 	bl	8009cb8 <siprintf>
			  CLCD_Puts(0,0, str);
 8002c7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c82:	461a      	mov	r2, r3
 8002c84:	2100      	movs	r1, #0
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe ffd8 	bl	8001c3c <CLCD_Puts>
			  WaterIOS_Turbidity(&MIOS);
 8002c8c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fb5b 	bl	800334c <WaterIOS_Turbidity>
			  		  MoterIOset = 5;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <main+0x9e8>)
 8002c98:	2205      	movs	r2, #5
 8002c9a:	701a      	strb	r2, [r3, #0]
	  MoterStart1(&m_con); //moter14 and 23 start/stop
 8002c9c:	f7ff bbf3 	b.w	8002486 <main+0x19e>
 8002ca0:	20000324 	.word	0x20000324
 8002ca4:	0800c0cc 	.word	0x0800c0cc
 8002ca8:	0800c0e0 	.word	0x0800c0e0
 8002cac:	0800c0f4 	.word	0x0800c0f4
 8002cb0:	cccccccd 	.word	0xcccccccd
 8002cb4:	20000325 	.word	0x20000325
 8002cb8:	2000032c 	.word	0x2000032c
 8002cbc:	20000328 	.word	0x20000328
 8002cc0:	20000323 	.word	0x20000323
 8002cc4:	2000033c 	.word	0x2000033c
 8002cc8:	20000327 	.word	0x20000327
 8002ccc:	2000031c 	.word	0x2000031c
 8002cd0:	2000031d 	.word	0x2000031d
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	0800c108 	.word	0x0800c108
 8002cdc:	20000338 	.word	0x20000338
 8002ce0:	20000334 	.word	0x20000334
 8002ce4:	0800c114 	.word	0x0800c114

08002ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b094      	sub	sp, #80	; 0x50
 8002cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cee:	f107 0320 	add.w	r3, r7, #32
 8002cf2:	2230      	movs	r2, #48	; 0x30
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f007 f841 	bl	8009d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <SystemClock_Config+0xd0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	607b      	str	r3, [r7, #4]
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <SystemClock_Config+0xd4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d44:	2309      	movs	r3, #9
 8002d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d52:	2302      	movs	r3, #2
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d60:	23a8      	movs	r3, #168	; 0xa8
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d68:	2304      	movs	r3, #4
 8002d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fb09 	bl	8006388 <HAL_RCC_OscConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002d7c:	f000 fe4a 	bl	8003a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d80:	230f      	movs	r3, #15
 8002d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d84:	2302      	movs	r3, #2
 8002d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d98:	f107 030c 	add.w	r3, r7, #12
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fd6a 	bl	8006878 <HAL_RCC_ClockConfig>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002daa:	f000 fe33 	bl	8003a14 <Error_Handler>
  }
}
 8002dae:	bf00      	nop
 8002db0:	3750      	adds	r7, #80	; 0x50
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2027      	movs	r0, #39	; 0x27
 8002dca:	f002 fa96 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dce:	2027      	movs	r0, #39	; 0x27
 8002dd0:	f002 faaf 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2037      	movs	r0, #55	; 0x37
 8002dda:	f002 fa8e 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002dde:	2037      	movs	r0, #55	; 0x37
 8002de0:	f002 faa7 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2028      	movs	r0, #40	; 0x28
 8002dea:	f002 fa86 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dee:	2028      	movs	r0, #40	; 0x28
 8002df0:	f002 fa9f 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f002 fa7e 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002dfe:	200a      	movs	r0, #10
 8002e00:	f002 fa97 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2100      	movs	r1, #0
 8002e08:	2009      	movs	r0, #9
 8002e0a:	f002 fa76 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002e0e:	2009      	movs	r0, #9
 8002e10:	f002 fa8f 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	202d      	movs	r0, #45	; 0x2d
 8002e1a:	f002 fa6e 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e1e:	202d      	movs	r0, #45	; 0x2d
 8002e20:	f002 fa87 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* TIM8_UP_TIM13_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	202c      	movs	r0, #44	; 0x2c
 8002e2a:	f002 fa66 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e2e:	202c      	movs	r0, #44	; 0x2c
 8002e30:	f002 fa7f 	bl	8005332 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e34:	2200      	movs	r2, #0
 8002e36:	2100      	movs	r1, #0
 8002e38:	2036      	movs	r0, #54	; 0x36
 8002e3a:	f002 fa5e 	bl	80052fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e3e:	2036      	movs	r0, #54	; 0x36
 8002e40:	f002 fa77 	bl	8005332 <HAL_NVIC_EnableIRQ>
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <dayDateCreate>:

/* USER CODE BEGIN 4 */
//--------------------------------------------------------------------rebuild timer----------------//
void dayDateCreate(set_daytime *t_obj, uint16_t t_year, uint16_t t_months, uint16_t t_date)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	461a      	mov	r2, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	817b      	strh	r3, [r7, #10]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	813b      	strh	r3, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
   t_obj -> Year = t_year;
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	701a      	strb	r2, [r3, #0]

   d_months = t_months;
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <dayDateCreate+0x48>)
 8002e70:	701a      	strb	r2, [r3, #0]
   t_obj -> Months = d_months;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <dayDateCreate+0x48>)
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	705a      	strb	r2, [r3, #1]

   t_obj -> Date = t_date;
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	709a      	strb	r2, [r3, #2]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000326 	.word	0x20000326

08002e94 <daytimeCreate>:

void daytimeCreate(set_daytime *t_obj, uint32_t t_hour, uint32_t t_min, uint32_t t_sec)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
   t_obj -> Hour = t_hour;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	70da      	strb	r2, [r3, #3]
   t_obj -> Min = t_min;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	711a      	strb	r2, [r3, #4]

   time_sec = t_sec;
 8002eb2:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <daytimeCreate+0x30>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6013      	str	r3, [r2, #0]
   //t_obj -> sec = time_sec;
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	2000030c 	.word	0x2000030c

08002ec8 <AlarmDateCreate>:

void AlarmDateCreate(set_alarmtime *t_obj, uint16_t t_months, uint16_t t_date)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	803b      	strh	r3, [r7, #0]
   t_obj -> aMonths = t_months;
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	701a      	strb	r2, [r3, #0]
   t_obj -> aDate = t_date;
 8002ee0:	883b      	ldrh	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	705a      	strb	r2, [r3, #1]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <AlarmtimeCreate>:

void AlarmtimeCreate(set_alarmtime *t_obj, uint32_t t_hour, uint32_t t_min)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
   t_obj -> aHour = t_hour;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	709a      	strb	r2, [r3, #2]
   t_obj -> aMin = t_min;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	70da      	strb	r2, [r3, #3]

   //time_sec = t_sec;
   //t_obj -> sec = time_sec;
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <daytimeview>:


void daytimeview(set_daytime *t_obj) // timer starting
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
   t_obj -> Sec = time_sec;
 8002f24:	4b50      	ldr	r3, [pc, #320]	; (8003068 <daytimeview+0x14c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	715a      	strb	r2, [r3, #5]
   if(t_obj -> Sec >= 60){
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	795b      	ldrb	r3, [r3, #5]
 8002f32:	2b3b      	cmp	r3, #59	; 0x3b
 8002f34:	d90b      	bls.n	8002f4e <daytimeview+0x32>
      t_obj -> Sec = 0;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	715a      	strb	r2, [r3, #5]
      time_sec=0;
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <daytimeview+0x14c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
      t_obj -> Min++;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	791b      	ldrb	r3, [r3, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	711a      	strb	r2, [r3, #4]
   }
   if(t_obj -> Min >= 60){
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	791b      	ldrb	r3, [r3, #4]
 8002f52:	2b3b      	cmp	r3, #59	; 0x3b
 8002f54:	d908      	bls.n	8002f68 <daytimeview+0x4c>
      t_obj -> Min = 0;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	711a      	strb	r2, [r3, #4]
      t_obj -> Hour++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	78db      	ldrb	r3, [r3, #3]
 8002f60:	3301      	adds	r3, #1
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	70da      	strb	r2, [r3, #3]
   }
   if(t_obj -> Hour > 23){
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	78db      	ldrb	r3, [r3, #3]
 8002f6c:	2b17      	cmp	r3, #23
 8002f6e:	d908      	bls.n	8002f82 <daytimeview+0x66>
      t_obj -> Hour = 0;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
      t_obj -> Date++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	789b      	ldrb	r3, [r3, #2]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	709a      	strb	r2, [r3, #2]
   }
   if(t_obj ->Months ==1||t_obj ->Months ==3||t_obj ->Months ==5||t_obj ->Months ==7||t_obj ->Months ==8||t_obj ->Months ==10||t_obj ->Months ==12){
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d017      	beq.n	8002fba <daytimeview+0x9e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d013      	beq.n	8002fba <daytimeview+0x9e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d00f      	beq.n	8002fba <daytimeview+0x9e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	d00b      	beq.n	8002fba <daytimeview+0x9e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d007      	beq.n	8002fba <daytimeview+0x9e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b0a      	cmp	r3, #10
 8002fb0:	d003      	beq.n	8002fba <daytimeview+0x9e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d11a      	bne.n	8002ff0 <daytimeview+0xd4>
      if(t_obj -> Date > 31){
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	789b      	ldrb	r3, [r3, #2]
 8002fbe:	2b1f      	cmp	r3, #31
 8002fc0:	d946      	bls.n	8003050 <daytimeview+0x134>
         t_obj -> Date = 1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	709a      	strb	r2, [r3, #2]
         d_months++;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <daytimeview+0x150>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <daytimeview+0x150>)
 8002fd2:	701a      	strb	r2, [r3, #0]
         if(d_months > 12){
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <daytimeview+0x150>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d939      	bls.n	8003050 <daytimeview+0x134>
            d_months = 1;
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <daytimeview+0x150>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
            t_obj ->Year++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	701a      	strb	r2, [r3, #0]
      if(t_obj -> Date > 31){
 8002fee:	e02f      	b.n	8003050 <daytimeview+0x134>
         }
      }

   }else if(t_obj ->Months ==4||t_obj ->Months ==6||t_obj ->Months ==9||t_obj ->Months ==11){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	785b      	ldrb	r3, [r3, #1]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d00b      	beq.n	8003010 <daytimeview+0xf4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	2b06      	cmp	r3, #6
 8002ffe:	d007      	beq.n	8003010 <daytimeview+0xf4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b09      	cmp	r3, #9
 8003006:	d003      	beq.n	8003010 <daytimeview+0xf4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	2b0b      	cmp	r3, #11
 800300e:	d10d      	bne.n	800302c <daytimeview+0x110>
      if(t_obj -> Date > 30){
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	789b      	ldrb	r3, [r3, #2]
 8003014:	2b1e      	cmp	r3, #30
 8003016:	d91c      	bls.n	8003052 <daytimeview+0x136>
         t_obj -> Date = 1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	709a      	strb	r2, [r3, #2]
         d_months++;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <daytimeview+0x150>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <daytimeview+0x150>)
 8003028:	701a      	strb	r2, [r3, #0]
      if(t_obj -> Date > 30){
 800302a:	e012      	b.n	8003052 <daytimeview+0x136>
      }
   }else if(t_obj ->Months ==2){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d10e      	bne.n	8003052 <daytimeview+0x136>
      if(t_obj ->Date > 28){
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	789b      	ldrb	r3, [r3, #2]
 8003038:	2b1c      	cmp	r3, #28
 800303a:	d90a      	bls.n	8003052 <daytimeview+0x136>
         t_obj -> Date = 1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	709a      	strb	r2, [r3, #2]
         d_months++;
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <daytimeview+0x150>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <daytimeview+0x150>)
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e000      	b.n	8003052 <daytimeview+0x136>
      if(t_obj -> Date > 31){
 8003050:	bf00      	nop
      }
   }
   t_obj ->Months = d_months;
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <daytimeview+0x150>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	705a      	strb	r2, [r3, #1]

}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	2000030c 	.word	0x2000030c
 800306c:	20000326 	.word	0x20000326

08003070 <Set_Move_time>:

void Set_Move_time(set_daytime *t_obj, set_M_time *m_time)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
   t_obj -> Year = m_time -> m_Year;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	701a      	strb	r2, [r3, #0]
   t_obj -> Months = m_time -> m_Months;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	785a      	ldrb	r2, [r3, #1]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	705a      	strb	r2, [r3, #1]
   t_obj -> Date = m_time -> m_Date;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	789a      	ldrb	r2, [r3, #2]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	709a      	strb	r2, [r3, #2]
   t_obj -> Hour = m_time -> m_Hour;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	78da      	ldrb	r2, [r3, #3]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	70da      	strb	r2, [r3, #3]
   t_obj -> Min = m_time -> m_Min;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	791a      	ldrb	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	711a      	strb	r2, [r3, #4]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <Load_timeSet>:

void Load_timeSet(set_daytime *t_obj, set_M_time *m_time)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
   m_time -> m_Year = t_obj -> Year;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	701a      	strb	r2, [r3, #0]
   m_time -> m_Months= t_obj -> Months;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	785a      	ldrb	r2, [r3, #1]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	705a      	strb	r2, [r3, #1]
   m_time -> m_Date = t_obj -> Date;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	789a      	ldrb	r2, [r3, #2]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	709a      	strb	r2, [r3, #2]
   m_time -> m_Hour = t_obj -> Hour;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	78da      	ldrb	r2, [r3, #3]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	70da      	strb	r2, [r3, #3]
   m_time -> m_Min = t_obj -> Min;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791a      	ldrb	r2, [r3, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	711a      	strb	r2, [r3, #4]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <Set_Move_alarm>:

void Set_Move_alarm(set_alarmtime *t_obj, set_M_time *m_time) // suho
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
   //t_obj -> aYear = m_time -> m_Year;
   t_obj -> aMonths = m_time -> m_Months;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	785a      	ldrb	r2, [r3, #1]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	701a      	strb	r2, [r3, #0]
   t_obj -> aDate = m_time -> m_Date;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	789a      	ldrb	r2, [r3, #2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	705a      	strb	r2, [r3, #1]
   t_obj -> aHour = m_time -> m_Hour;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	78da      	ldrb	r2, [r3, #3]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	709a      	strb	r2, [r3, #2]
   t_obj -> aMin = m_time -> m_Min;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	791a      	ldrb	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	70da      	strb	r2, [r3, #3]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <Load_alarmSet>:

void Load_alarmSet(set_alarmtime *t_obj, set_M_time *m_time)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
   //m_time -> m_Year = t_obj -> aYear;
   m_time -> m_Months= t_obj -> aMonths;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	705a      	strb	r2, [r3, #1]
   m_time -> m_Date = t_obj -> aDate;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	785a      	ldrb	r2, [r3, #1]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	709a      	strb	r2, [r3, #2]
   m_time -> m_Hour = t_obj -> aHour;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	789a      	ldrb	r2, [r3, #2]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	70da      	strb	r2, [r3, #3]
   m_time -> m_Min = t_obj -> aMin;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	78da      	ldrb	r2, [r3, #3]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	711a      	strb	r2, [r3, #4]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <buttonObjCreate>:
//--------------------------------------------------------------------Btn on/off check---------------//
void buttonObjCreate(button_obj_t *p_obj, uint32_t repeat_time)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
   //p_obj -> ch = ch;
   p_obj -> pre_time = current_BtnTick;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <buttonObjCreate+0x2c>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]
   p_obj -> state = 0;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	705a      	strb	r2, [r3, #1]
   p_obj -> repeat_time = repeat_time;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000330 	.word	0x20000330

08003188 <buttonObjGetClicked>:
bool buttonObjGetClicked(button_obj_t *p_obj, uint32_t pressed_time)//push_btn, 100
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
   bool ret = false;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]

   switch(p_obj->state)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	785b      	ldrb	r3, [r3, #1]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d045      	beq.n	800322a <buttonObjGetClicked+0xa2>
 800319e:	2b02      	cmp	r3, #2
 80031a0:	dc6a      	bgt.n	8003278 <buttonObjGetClicked+0xf0>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <buttonObjGetClicked+0x24>
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d018      	beq.n	80031dc <buttonObjGetClicked+0x54>
 80031aa:	e065      	b.n	8003278 <buttonObjGetClicked+0xf0>
   {
   case 0:
      if(sw_button==SW_ONE||sw_button==SW_TWO||sw_button==SW_THREE||sw_button==SW_FOUR)
 80031ac:	4b36      	ldr	r3, [pc, #216]	; (8003288 <buttonObjGetClicked+0x100>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d00b      	beq.n	80031cc <buttonObjGetClicked+0x44>
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <buttonObjGetClicked+0x100>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d007      	beq.n	80031cc <buttonObjGetClicked+0x44>
 80031bc:	4b32      	ldr	r3, [pc, #200]	; (8003288 <buttonObjGetClicked+0x100>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d003      	beq.n	80031cc <buttonObjGetClicked+0x44>
 80031c4:	4b30      	ldr	r3, [pc, #192]	; (8003288 <buttonObjGetClicked+0x100>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d154      	bne.n	8003276 <buttonObjGetClicked+0xee>
      {
         p_obj->state = 1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	705a      	strb	r2, [r3, #1]
         p_obj->pre_time = current_BtnTick;// = Gettick;
 80031d2:	4b2e      	ldr	r3, [pc, #184]	; (800328c <buttonObjGetClicked+0x104>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
      }else{
         //HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
      }
      break;
 80031da:	e04c      	b.n	8003276 <buttonObjGetClicked+0xee>

   case 1:
      if(sw_button==SW_ONE||sw_button==SW_TWO||sw_button==SW_THREE||sw_button==SW_FOUR)
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <buttonObjGetClicked+0x100>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d00b      	beq.n	80031fc <buttonObjGetClicked+0x74>
 80031e4:	4b28      	ldr	r3, [pc, #160]	; (8003288 <buttonObjGetClicked+0x100>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d007      	beq.n	80031fc <buttonObjGetClicked+0x74>
 80031ec:	4b26      	ldr	r3, [pc, #152]	; (8003288 <buttonObjGetClicked+0x100>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d003      	beq.n	80031fc <buttonObjGetClicked+0x74>
 80031f4:	4b24      	ldr	r3, [pc, #144]	; (8003288 <buttonObjGetClicked+0x100>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d111      	bne.n	8003220 <buttonObjGetClicked+0x98>
      {
         if(current_BtnTick-p_obj->pre_time >=pressed_time){//pressed_time
 80031fc:	4b23      	ldr	r3, [pc, #140]	; (800328c <buttonObjGetClicked+0x104>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d80d      	bhi.n	8003228 <buttonObjGetClicked+0xa0>
            ret = true; //------------------------------------clicked
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]

            p_obj->state = 2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	705a      	strb	r2, [r3, #1]
            p_obj->pre_time = current_BtnTick; //
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <buttonObjGetClicked+0x104>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
         if(current_BtnTick-p_obj->pre_time >=pressed_time){//pressed_time
 800321e:	e003      	b.n	8003228 <buttonObjGetClicked+0xa0>
         //btn_tick = current_tick;

      }
      else
      {
         p_obj->state = 0;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	705a      	strb	r2, [r3, #1]
      }
      break;
 8003226:	e027      	b.n	8003278 <buttonObjGetClicked+0xf0>
 8003228:	e026      	b.n	8003278 <buttonObjGetClicked+0xf0>

   case 2:
      if(sw_button==SW_ONE||sw_button==SW_TWO||sw_button==SW_THREE||sw_button==SW_FOUR)
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <buttonObjGetClicked+0x100>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00b      	beq.n	800324a <buttonObjGetClicked+0xc2>
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <buttonObjGetClicked+0x100>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d007      	beq.n	800324a <buttonObjGetClicked+0xc2>
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <buttonObjGetClicked+0x100>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d003      	beq.n	800324a <buttonObjGetClicked+0xc2>
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <buttonObjGetClicked+0x100>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d110      	bne.n	800326c <buttonObjGetClicked+0xe4>
      {
         if(current_BtnTick-p_obj->pre_time >= p_obj->repeat_time) //
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <buttonObjGetClicked+0x104>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	1ad2      	subs	r2, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d30b      	bcc.n	8003274 <buttonObjGetClicked+0xec>
         {
            p_obj->state = 1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	705a      	strb	r2, [r3, #1]
            p_obj->pre_time = current_BtnTick;
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <buttonObjGetClicked+0x104>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]
         if(current_BtnTick-p_obj->pre_time >= p_obj->repeat_time) //
 800326a:	e003      	b.n	8003274 <buttonObjGetClicked+0xec>
         }

      }
      else
      {
         p_obj->state = 0;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	705a      	strb	r2, [r3, #1]
      }
      break;
 8003272:	e001      	b.n	8003278 <buttonObjGetClicked+0xf0>
 8003274:	e000      	b.n	8003278 <buttonObjGetClicked+0xf0>
      break;
 8003276:	bf00      	nop
   }

   return ret;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000325 	.word	0x20000325
 800328c:	20000330 	.word	0x20000330

08003290 <getBtn>:
//=----------------------------my---------------------------------------code butten------//
void getBtn(){
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
   if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3)){
 8003294:	2108      	movs	r1, #8
 8003296:	4819      	ldr	r0, [pc, #100]	; (80032fc <getBtn+0x6c>)
 8003298:	f002 fee8 	bl	800606c <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <getBtn+0x1a>
      sw_button=SW_ONE;
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <getBtn+0x70>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
   }else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)){
      sw_button=SW_FOUR;
   }else{
      sw_button=NONE;
   }
}
 80032a8:	e025      	b.n	80032f6 <getBtn+0x66>
   }else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15)){
 80032aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ae:	4815      	ldr	r0, [pc, #84]	; (8003304 <getBtn+0x74>)
 80032b0:	f002 fedc 	bl	800606c <HAL_GPIO_ReadPin>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <getBtn+0x32>
      sw_button=SW_TWO;
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <getBtn+0x70>)
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
}
 80032c0:	e019      	b.n	80032f6 <getBtn+0x66>
   }else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4)){
 80032c2:	2110      	movs	r1, #16
 80032c4:	4810      	ldr	r0, [pc, #64]	; (8003308 <getBtn+0x78>)
 80032c6:	f002 fed1 	bl	800606c <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <getBtn+0x48>
      sw_button=SW_THREE;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <getBtn+0x70>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	701a      	strb	r2, [r3, #0]
}
 80032d6:	e00e      	b.n	80032f6 <getBtn+0x66>
   }else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)){
 80032d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032dc:	480a      	ldr	r0, [pc, #40]	; (8003308 <getBtn+0x78>)
 80032de:	f002 fec5 	bl	800606c <HAL_GPIO_ReadPin>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <getBtn+0x60>
      sw_button=SW_FOUR;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <getBtn+0x70>)
 80032ea:	2204      	movs	r2, #4
 80032ec:	701a      	strb	r2, [r3, #0]
}
 80032ee:	e002      	b.n	80032f6 <getBtn+0x66>
      sw_button=NONE;
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <getBtn+0x70>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	20000325 	.word	0x20000325
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00

0800330c <MoterSystemCreate>:
}//void funtion end

//-----sound function end----//
//-------------------------------Water inOutsystem-Start----------------//
void MoterSystemCreate(MoterInOutSystem *MIO_S)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	MIO_S -> Turbidity_1 = 0;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
	MIO_S -> AlarmSet_1 = 0;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	705a      	strb	r2, [r3, #1]
	MIO_S -> MoterOn_PushSW_1 = 0;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	709a      	strb	r2, [r3, #2]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <WaterIOS_PushSw>:
void WaterIOS_PushSw(MoterInOutSystem *MIO_S)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
	MIO_S -> MoterOn_PushSW_1 = 1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	709a      	strb	r2, [r3, #2]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <WaterIOS_Turbidity>:
void WaterIOS_Turbidity(MoterInOutSystem *MIO_S)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	MIO_S -> Turbidity_1 = 1;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <move_cur_time>:
		break;
	}
}

//-------------------------------Water inOutsystem-End----------------//
void move_cur_time(set_M_time *m_time, _SW_BUTT0N  sw_button){
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
      switch(sw_button){
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	2b04      	cmp	r3, #4
 8003378:	f200 81ec 	bhi.w	8003754 <move_cur_time+0x3ec>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <move_cur_time+0x1c>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003755 	.word	0x08003755
 8003388:	08003399 	.word	0x08003399
 800338c:	08003407 	.word	0x08003407
 8003390:	08003585 	.word	0x08003585
 8003394:	08003717 	.word	0x08003717
      case SW_ONE:
         //if(mode==TIME_SET)
		 if(switch_viewmode == switch_normalTimeSet){
 8003398:	4b8b      	ldr	r3, [pc, #556]	; (80035c8 <move_cur_time+0x260>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10d      	bne.n	80033bc <move_cur_time+0x54>
            set_time++;
 80033a0:	4b8a      	ldr	r3, [pc, #552]	; (80035cc <move_cur_time+0x264>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <move_cur_time+0x264>)
 80033aa:	701a      	strb	r2, [r3, #0]
            if(set_time > SECOND) set_time = YEAR;
 80033ac:	4b87      	ldr	r3, [pc, #540]	; (80035cc <move_cur_time+0x264>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b07      	cmp	r3, #7
 80033b2:	d914      	bls.n	80033de <move_cur_time+0x76>
 80033b4:	4b85      	ldr	r3, [pc, #532]	; (80035cc <move_cur_time+0x264>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e010      	b.n	80033de <move_cur_time+0x76>
         }
		 //else if(mode==ALARM_SET)
		 else if(switch_viewmode == switch_alarmTimeSet)
 80033bc:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <move_cur_time+0x260>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d10c      	bne.n	80033de <move_cur_time+0x76>
		 {
            setalarm++;
 80033c4:	4b82      	ldr	r3, [pc, #520]	; (80035d0 <move_cur_time+0x268>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b80      	ldr	r3, [pc, #512]	; (80035d0 <move_cur_time+0x268>)
 80033ce:	701a      	strb	r2, [r3, #0]
            if(setalarm > aMINUTE) setalarm = aMONTH;
 80033d0:	4b7f      	ldr	r3, [pc, #508]	; (80035d0 <move_cur_time+0x268>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d902      	bls.n	80033de <move_cur_time+0x76>
 80033d8:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <move_cur_time+0x268>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
         }

         //if(view == VIEW_TEST)
		 if(switch_viewmode == switch_test)
 80033de:	4b7a      	ldr	r3, [pc, #488]	; (80035c8 <move_cur_time+0x260>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	f040 81af 	bne.w	8003746 <move_cur_time+0x3de>
         {
			testNum3++;
 80033e8:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <move_cur_time+0x26c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <move_cur_time+0x26c>)
 80033f2:	701a      	strb	r2, [r3, #0]
            if(testNum3 > 4)
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <move_cur_time+0x26c>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	f240 81a4 	bls.w	8003746 <move_cur_time+0x3de>
            {testNum3 = 0;}
 80033fe:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <move_cur_time+0x26c>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
         }
         break;
 8003404:	e19f      	b.n	8003746 <move_cur_time+0x3de>

      case SW_TWO:
         //if(mode==TIME_SET)
    	 if(switch_viewmode ==switch_normalTimeSet)
 8003406:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <move_cur_time+0x260>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d168      	bne.n	80034e0 <move_cur_time+0x178>
         {
            if(set_time==AMPM){
 800340e:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <move_cur_time+0x264>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d107      	bne.n	8003426 <move_cur_time+0xbe>
               AMPM_Change ^= 1;
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <move_cur_time+0x270>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	f083 0301 	eor.w	r3, r3, #1
 800341e:	b2da      	uxtb	r2, r3
 8003420:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <move_cur_time+0x270>)
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e05c      	b.n	80034e0 <move_cur_time+0x178>
            }else if(set_time==HOUR){
 8003426:	4b69      	ldr	r3, [pc, #420]	; (80035cc <move_cur_time+0x264>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b05      	cmp	r3, #5
 800342c:	d10d      	bne.n	800344a <move_cur_time+0xe2>
               m_time -> m_Hour++;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	78db      	ldrb	r3, [r3, #3]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	70da      	strb	r2, [r3, #3]
               if(m_time -> m_Hour >23) m_time -> m_Hour = 0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	2b17      	cmp	r3, #23
 8003440:	d94e      	bls.n	80034e0 <move_cur_time+0x178>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	70da      	strb	r2, [r3, #3]
 8003448:	e04a      	b.n	80034e0 <move_cur_time+0x178>
            }else if(set_time==MINUTE){
 800344a:	4b60      	ldr	r3, [pc, #384]	; (80035cc <move_cur_time+0x264>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b06      	cmp	r3, #6
 8003450:	d10d      	bne.n	800346e <move_cur_time+0x106>
               m_time -> m_Min++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	711a      	strb	r2, [r3, #4]
               if(m_time -> m_Min >= 60) m_time -> m_Min = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	2b3b      	cmp	r3, #59	; 0x3b
 8003464:	d93c      	bls.n	80034e0 <move_cur_time+0x178>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	711a      	strb	r2, [r3, #4]
 800346c:	e038      	b.n	80034e0 <move_cur_time+0x178>
            }else if(set_time==YEAR){
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <move_cur_time+0x264>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10d      	bne.n	8003492 <move_cur_time+0x12a>
               m_time ->m_Year++;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	701a      	strb	r2, [r3, #0]
               if(m_time ->m_Year > 99) m_time ->m_Year = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b63      	cmp	r3, #99	; 0x63
 8003488:	d92a      	bls.n	80034e0 <move_cur_time+0x178>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	e026      	b.n	80034e0 <move_cur_time+0x178>
            }else if(set_time==MONTH){
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <move_cur_time+0x264>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d111      	bne.n	80034be <move_cur_time+0x156>
               d_months++;
 800349a:	4b50      	ldr	r3, [pc, #320]	; (80035dc <move_cur_time+0x274>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <move_cur_time+0x274>)
 80034a4:	701a      	strb	r2, [r3, #0]
               if(d_months > 12) d_months = 1;
 80034a6:	4b4d      	ldr	r3, [pc, #308]	; (80035dc <move_cur_time+0x274>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d902      	bls.n	80034b4 <move_cur_time+0x14c>
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <move_cur_time+0x274>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
               m_time ->m_Months = d_months;
 80034b4:	4b49      	ldr	r3, [pc, #292]	; (80035dc <move_cur_time+0x274>)
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e010      	b.n	80034e0 <move_cur_time+0x178>
            }else if(set_time==DATE){
 80034be:	4b43      	ldr	r3, [pc, #268]	; (80035cc <move_cur_time+0x264>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d10c      	bne.n	80034e0 <move_cur_time+0x178>
               m_time -> m_Date++;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	789b      	ldrb	r3, [r3, #2]
 80034ca:	3301      	adds	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	709a      	strb	r2, [r3, #2]
               if(m_time -> m_Date > 31) m_time -> m_Date = 1;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	789b      	ldrb	r3, [r3, #2]
 80034d6:	2b1f      	cmp	r3, #31
 80034d8:	d902      	bls.n	80034e0 <move_cur_time+0x178>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	709a      	strb	r2, [r3, #2]
            }
         }

         //if(mode==ALARM_SET)
    	 if(switch_viewmode == switch_alarmTimeSet)
 80034e0:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <move_cur_time+0x260>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	f040 8130 	bne.w	800374a <move_cur_time+0x3e2>
         {
            if(setalarm==aHOUR){
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <move_cur_time+0x268>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d10e      	bne.n	8003510 <move_cur_time+0x1a8>
               m_time -> m_Hour++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	3301      	adds	r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	70da      	strb	r2, [r3, #3]
               if(m_time -> m_Hour >23) m_time -> m_Hour = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	78db      	ldrb	r3, [r3, #3]
 8003502:	2b17      	cmp	r3, #23
 8003504:	f240 8121 	bls.w	800374a <move_cur_time+0x3e2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]
            }else if(setalarm==aDATE){
               m_time -> m_Date++;
               if(m_time -> m_Date > 31) m_time -> m_Date = 1;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
            }
         }
         break;
 800350e:	e11c      	b.n	800374a <move_cur_time+0x3e2>
            }else if(setalarm==aMINUTE){
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <move_cur_time+0x268>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d10e      	bne.n	8003536 <move_cur_time+0x1ce>
               m_time -> m_Min++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	791b      	ldrb	r3, [r3, #4]
 800351c:	3301      	adds	r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	711a      	strb	r2, [r3, #4]
               if(m_time -> m_Min >= 60) m_time -> m_Min = 0;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	2b3b      	cmp	r3, #59	; 0x3b
 800352a:	f240 810e 	bls.w	800374a <move_cur_time+0x3e2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	711a      	strb	r2, [r3, #4]
         break;
 8003534:	e109      	b.n	800374a <move_cur_time+0x3e2>
            }else if(setalarm==aMONTH){
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <move_cur_time+0x268>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <move_cur_time+0x1f4>
               m_time -> m_Months++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	785b      	ldrb	r3, [r3, #1]
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	705a      	strb	r2, [r3, #1]
               if(m_time -> m_Months > 12) m_time -> m_Months = 1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	f240 80fb 	bls.w	800374a <move_cur_time+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
         break;
 800355a:	e0f6      	b.n	800374a <move_cur_time+0x3e2>
            }else if(setalarm==aDATE){
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <move_cur_time+0x268>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	f040 80f2 	bne.w	800374a <move_cur_time+0x3e2>
               m_time -> m_Date++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	789b      	ldrb	r3, [r3, #2]
 800356a:	3301      	adds	r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	709a      	strb	r2, [r3, #2]
               if(m_time -> m_Date > 31) m_time -> m_Date = 1;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	789b      	ldrb	r3, [r3, #2]
 8003576:	2b1f      	cmp	r3, #31
 8003578:	f240 80e7 	bls.w	800374a <move_cur_time+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	709a      	strb	r2, [r3, #2]
         break;
 8003582:	e0e2      	b.n	800374a <move_cur_time+0x3e2>

      case SW_THREE:
         //if(mode==TIME_SET)
    	  if(switch_viewmode ==switch_normalTimeSet)
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <move_cur_time+0x260>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d174      	bne.n	8003676 <move_cur_time+0x30e>
         {
            if(set_time==AMPM){
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <move_cur_time+0x264>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d107      	bne.n	80035a4 <move_cur_time+0x23c>
               AMPM_Change ^= 1;
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <move_cur_time+0x270>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f083 0301 	eor.w	r3, r3, #1
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <move_cur_time+0x270>)
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e068      	b.n	8003676 <move_cur_time+0x30e>
            }else if(set_time==HOUR){
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <move_cur_time+0x264>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d119      	bne.n	80035e0 <move_cur_time+0x278>
               m_time -> m_Hour--;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	70da      	strb	r2, [r3, #3]
               if(!(m_time -> m_Hour >= 0 && m_time -> m_Hour < 24)) m_time -> m_Hour = 23;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	78db      	ldrb	r3, [r3, #3]
 80035bc:	2b17      	cmp	r3, #23
 80035be:	d95a      	bls.n	8003676 <move_cur_time+0x30e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2217      	movs	r2, #23
 80035c4:	70da      	strb	r2, [r3, #3]
 80035c6:	e056      	b.n	8003676 <move_cur_time+0x30e>
 80035c8:	20000327 	.word	0x20000327
 80035cc:	20000322 	.word	0x20000322
 80035d0:	20000324 	.word	0x20000324
 80035d4:	2000031c 	.word	0x2000031c
 80035d8:	20000311 	.word	0x20000311
 80035dc:	20000326 	.word	0x20000326
            }else if(set_time==MINUTE){
 80035e0:	4b60      	ldr	r3, [pc, #384]	; (8003764 <move_cur_time+0x3fc>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b06      	cmp	r3, #6
 80035e6:	d10d      	bne.n	8003604 <move_cur_time+0x29c>
               m_time -> m_Min--;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	791b      	ldrb	r3, [r3, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	711a      	strb	r2, [r3, #4]
               if(!(m_time -> m_Min >= 0 && m_time -> m_Min < 60)) m_time -> m_Min = 59;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	791b      	ldrb	r3, [r3, #4]
 80035f8:	2b3b      	cmp	r3, #59	; 0x3b
 80035fa:	d93c      	bls.n	8003676 <move_cur_time+0x30e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223b      	movs	r2, #59	; 0x3b
 8003600:	711a      	strb	r2, [r3, #4]
 8003602:	e038      	b.n	8003676 <move_cur_time+0x30e>
            }else if(set_time==YEAR){
 8003604:	4b57      	ldr	r3, [pc, #348]	; (8003764 <move_cur_time+0x3fc>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10d      	bne.n	8003628 <move_cur_time+0x2c0>
               m_time ->m_Year--;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	3b01      	subs	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	701a      	strb	r2, [r3, #0]
               if(!(m_time ->m_Year >= 0&& m_time ->m_Year <= 99)) m_time ->m_Year = 99;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b63      	cmp	r3, #99	; 0x63
 800361e:	d92a      	bls.n	8003676 <move_cur_time+0x30e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2263      	movs	r2, #99	; 0x63
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e026      	b.n	8003676 <move_cur_time+0x30e>
            }else if(set_time==MONTH){
 8003628:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <move_cur_time+0x3fc>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d111      	bne.n	8003654 <move_cur_time+0x2ec>
               d_months--;
 8003630:	4b4d      	ldr	r3, [pc, #308]	; (8003768 <move_cur_time+0x400>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	3b01      	subs	r3, #1
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <move_cur_time+0x400>)
 800363a:	701a      	strb	r2, [r3, #0]
               if(d_months < 1) d_months = 12;
 800363c:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <move_cur_time+0x400>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <move_cur_time+0x2e2>
 8003644:	4b48      	ldr	r3, [pc, #288]	; (8003768 <move_cur_time+0x400>)
 8003646:	220c      	movs	r2, #12
 8003648:	701a      	strb	r2, [r3, #0]
               m_time ->m_Months = d_months;
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <move_cur_time+0x400>)
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	705a      	strb	r2, [r3, #1]
 8003652:	e010      	b.n	8003676 <move_cur_time+0x30e>
            }else if(set_time==DATE){
 8003654:	4b43      	ldr	r3, [pc, #268]	; (8003764 <move_cur_time+0x3fc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d10c      	bne.n	8003676 <move_cur_time+0x30e>
               m_time -> m_Date--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	789b      	ldrb	r3, [r3, #2]
 8003660:	3b01      	subs	r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	709a      	strb	r2, [r3, #2]
               if(m_time -> m_Date < 1) m_time -> m_Date = 31;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	789b      	ldrb	r3, [r3, #2]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <move_cur_time+0x30e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	221f      	movs	r2, #31
 8003674:	709a      	strb	r2, [r3, #2]
            }
         }

         //if(mode==ALARM_SET)
    	  if(switch_viewmode == switch_alarmTimeSet)
 8003676:	4b3d      	ldr	r3, [pc, #244]	; (800376c <move_cur_time+0x404>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d167      	bne.n	800374e <move_cur_time+0x3e6>
         {
            if(setalarm==aHOUR){
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <move_cur_time+0x408>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d10d      	bne.n	80036a2 <move_cur_time+0x33a>
               m_time -> m_Hour--;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	78db      	ldrb	r3, [r3, #3]
 800368a:	3b01      	subs	r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	70da      	strb	r2, [r3, #3]
               if(!(m_time -> m_Hour >= 0 && m_time -> m_Hour < 24)) m_time -> m_Hour = 23;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	78db      	ldrb	r3, [r3, #3]
 8003696:	2b17      	cmp	r3, #23
 8003698:	d959      	bls.n	800374e <move_cur_time+0x3e6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2217      	movs	r2, #23
 800369e:	70da      	strb	r2, [r3, #3]
            }else if(setalarm==aDATE){
               m_time -> m_Date--;
               if(m_time -> m_Date < 1) m_time -> m_Date = 31;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
            }
         }
         break;
 80036a0:	e055      	b.n	800374e <move_cur_time+0x3e6>
            }else if(setalarm==aMINUTE){
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <move_cur_time+0x408>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d10d      	bne.n	80036c6 <move_cur_time+0x35e>
               m_time -> m_Min--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	711a      	strb	r2, [r3, #4]
               if(!(m_time -> m_Min >= 0 && m_time -> m_Min < 60)) m_time -> m_Min = 59;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	791b      	ldrb	r3, [r3, #4]
 80036ba:	2b3b      	cmp	r3, #59	; 0x3b
 80036bc:	d947      	bls.n	800374e <move_cur_time+0x3e6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223b      	movs	r2, #59	; 0x3b
 80036c2:	711a      	strb	r2, [r3, #4]
         break;
 80036c4:	e043      	b.n	800374e <move_cur_time+0x3e6>
            }else if(setalarm==aMONTH){
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <move_cur_time+0x408>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d111      	bne.n	80036f2 <move_cur_time+0x38a>
               m_time -> m_Months--;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	705a      	strb	r2, [r3, #1]
               if(!(m_time -> m_Months >=1 && m_time -> m_Months <=12)) m_time -> m_Months = 12;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <move_cur_time+0x382>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d931      	bls.n	800374e <move_cur_time+0x3e6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	220c      	movs	r2, #12
 80036ee:	705a      	strb	r2, [r3, #1]
         break;
 80036f0:	e02d      	b.n	800374e <move_cur_time+0x3e6>
            }else if(setalarm==aDATE){
 80036f2:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <move_cur_time+0x408>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d129      	bne.n	800374e <move_cur_time+0x3e6>
               m_time -> m_Date--;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	789b      	ldrb	r3, [r3, #2]
 80036fe:	3b01      	subs	r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	709a      	strb	r2, [r3, #2]
               if(m_time -> m_Date < 1) m_time -> m_Date = 31;  //%%%%%%%%%% error error error=========  !!!!!!!!!!!!!==============//
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	789b      	ldrb	r3, [r3, #2]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11f      	bne.n	800374e <move_cur_time+0x3e6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	221f      	movs	r2, #31
 8003712:	709a      	strb	r2, [r3, #2]
         break;
 8003714:	e01b      	b.n	800374e <move_cur_time+0x3e6>
//				 switch_viewmode == 3 ||
//				 switch_viewmode == 4 ||
//				 switch_viewmode == 5)
//         { 														// view , normal, alarm, test
            //view++;
    		if(switch_viewmode == switch_normal){
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <move_cur_time+0x404>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d103      	bne.n	8003726 <move_cur_time+0x3be>
    			switch_viewmode = switch_alarm;
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <move_cur_time+0x404>)
 8003720:	2202      	movs	r2, #2
 8003722:	701a      	strb	r2, [r3, #0]

//            if(view == VIEW_VIEW) view = VIEW_NORMAL;
//            if(view > VIEW_TEST) view = VIEW_NORMAL;

         //}
         break;
 8003724:	e015      	b.n	8003752 <move_cur_time+0x3ea>
    		}else if(switch_viewmode == switch_alarm){
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <move_cur_time+0x404>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d103      	bne.n	8003736 <move_cur_time+0x3ce>
				switch_viewmode = switch_test;
 800372e:	4b0f      	ldr	r3, [pc, #60]	; (800376c <move_cur_time+0x404>)
 8003730:	2204      	movs	r2, #4
 8003732:	701a      	strb	r2, [r3, #0]
         break;
 8003734:	e00d      	b.n	8003752 <move_cur_time+0x3ea>
			}else if(switch_viewmode == switch_test){
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <move_cur_time+0x404>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d109      	bne.n	8003752 <move_cur_time+0x3ea>
				switch_viewmode = switch_normal;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <move_cur_time+0x404>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
         break;
 8003744:	e005      	b.n	8003752 <move_cur_time+0x3ea>
         break;
 8003746:	bf00      	nop
 8003748:	e004      	b.n	8003754 <move_cur_time+0x3ec>
         break;
 800374a:	bf00      	nop
 800374c:	e002      	b.n	8003754 <move_cur_time+0x3ec>
         break;
 800374e:	bf00      	nop
 8003750:	e000      	b.n	8003754 <move_cur_time+0x3ec>
         break;
 8003752:	bf00      	nop
      case NONE:
         break;
      }// end switch
      sw_button=NONE;
 8003754:	2300      	movs	r3, #0
 8003756:	70fb      	strb	r3, [r7, #3]
   }
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000322 	.word	0x20000322
 8003768:	20000326 	.word	0x20000326
 800376c:	20000327 	.word	0x20000327
 8003770:	20000324 	.word	0x20000324

08003774 <MoterCreate>:

//---------------------------------moter test----------------//
void MoterCreate(MoterControl *M_obj)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
   M_obj -> MoterPower14 = 0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
   M_obj -> MoterPower23 = 0;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]

   M_obj -> MoterStart14 = false;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	725a      	strb	r2, [r3, #9]
   M_obj -> MoterStart23 = false;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	721a      	strb	r2, [r3, #8]
   M_obj -> PWM_l = 200;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	22c8      	movs	r2, #200	; 0xc8
 8003798:	729a      	strb	r2, [r3, #10]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <MoterStart1>:
}
void ChangeMstate23T(MoterControl *M_obj){
   M_obj -> MoterStart23 = true;
}
void MoterStart1(MoterControl *M_obj)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
   if(M_obj -> MoterStart14 == true && M_obj -> MoterPower14 ==0){//M_obj -> MoterPower ==0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7a5b      	ldrb	r3, [r3, #9]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <MoterStart1+0x2a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <MoterStart1+0x2a>
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);  // dc moter
 80037c0:	2100      	movs	r1, #0
 80037c2:	4821      	ldr	r0, [pc, #132]	; (8003848 <MoterStart1+0xa0>)
 80037c4:	f003 feb6 	bl	8007534 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);  // dc moter
 80037c8:	210c      	movs	r1, #12
 80037ca:	481f      	ldr	r0, [pc, #124]	; (8003848 <MoterStart1+0xa0>)
 80037cc:	f003 feb2 	bl	8007534 <HAL_TIM_PWM_Start>
 80037d0:	e012      	b.n	80037f8 <MoterStart1+0x50>

   }else if(M_obj -> MoterStart14 == false  && M_obj -> MoterPower14 ==0){
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7a5b      	ldrb	r3, [r3, #9]
 80037d6:	f083 0301 	eor.w	r3, r3, #1
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <MoterStart1+0x50>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d107      	bne.n	80037f8 <MoterStart1+0x50>
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);  // dc moter
 80037e8:	2100      	movs	r1, #0
 80037ea:	4817      	ldr	r0, [pc, #92]	; (8003848 <MoterStart1+0xa0>)
 80037ec:	f003 ff6a 	bl	80076c4 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);  // dc moter
 80037f0:	210c      	movs	r1, #12
 80037f2:	4815      	ldr	r0, [pc, #84]	; (8003848 <MoterStart1+0xa0>)
 80037f4:	f003 ff66 	bl	80076c4 <HAL_TIM_PWM_Stop>

   }
   if(M_obj -> MoterStart23 == true  && M_obj -> MoterPower23 ==0){ //Moter23_PWM_Leval
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7a1b      	ldrb	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00c      	beq.n	800381a <MoterStart1+0x72>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <MoterStart1+0x72>
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // dc moter
 8003808:	2104      	movs	r1, #4
 800380a:	480f      	ldr	r0, [pc, #60]	; (8003848 <MoterStart1+0xa0>)
 800380c:	f003 fe92 	bl	8007534 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);  // dc moter
 8003810:	2108      	movs	r1, #8
 8003812:	480d      	ldr	r0, [pc, #52]	; (8003848 <MoterStart1+0xa0>)
 8003814:	f003 fe8e 	bl	8007534 <HAL_TIM_PWM_Start>
   }else if(M_obj -> MoterStart23 == false  && M_obj -> MoterPower23 ==0){
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);  // dc moter
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);  // dc moter
      //test_num6 = 20;
   }
}
 8003818:	e012      	b.n	8003840 <MoterStart1+0x98>
   }else if(M_obj -> MoterStart23 == false  && M_obj -> MoterPower23 ==0){
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7a1b      	ldrb	r3, [r3, #8]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <MoterStart1+0x98>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d107      	bne.n	8003840 <MoterStart1+0x98>
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2);  // dc moter
 8003830:	2104      	movs	r1, #4
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <MoterStart1+0xa0>)
 8003834:	f003 ff46 	bl	80076c4 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);  // dc moter
 8003838:	2108      	movs	r1, #8
 800383a:	4803      	ldr	r0, [pc, #12]	; (8003848 <MoterStart1+0xa0>)
 800383c:	f003 ff42 	bl	80076c4 <HAL_TIM_PWM_Stop>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000444 	.word	0x20000444

0800384c <MoterMoving>:
void MoterMoving(MoterControl *M_obj)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
   if(M_obj -> MoterStart14 == true && M_obj -> MoterPower14 < 9900){
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7a5b      	ldrb	r3, [r3, #9]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <MoterMoving+0x36>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8003864:	4293      	cmp	r3, r2
 8003866:	d80c      	bhi.n	8003882 <MoterMoving+0x36>
      M_obj -> MoterPower14 += M_obj -> PWM_l;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	7a92      	ldrb	r2, [r2, #10]
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, M_obj -> MoterPower14);
 8003876:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <MoterMoving+0xdc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	635a      	str	r2, [r3, #52]	; 0x34
 8003880:	e016      	b.n	80038b0 <MoterMoving+0x64>

   }else if(M_obj ->MoterStart14 == false && M_obj -> MoterPower14 >0){
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7a5b      	ldrb	r3, [r3, #9]
 8003886:	f083 0301 	eor.w	r3, r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <MoterMoving+0x64>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <MoterMoving+0x64>
      M_obj -> MoterPower14 -= M_obj -> PWM_l;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	7a92      	ldrb	r2, [r2, #10]
 80038a0:	1a9a      	subs	r2, r3, r2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	601a      	str	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, M_obj -> MoterPower14);
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <MoterMoving+0xdc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34
   }

   if(M_obj -> MoterStart23 == true && M_obj -> MoterPower23 < 9900){
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7a1b      	ldrb	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <MoterMoving+0x92>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f242 62ab 	movw	r2, #9899	; 0x26ab
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d80c      	bhi.n	80038de <MoterMoving+0x92>
      M_obj -> MoterPower23 += M_obj -> PWM_l;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	7a92      	ldrb	r2, [r2, #10]
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, M_obj -> MoterPower23);
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <MoterMoving+0xdc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6852      	ldr	r2, [r2, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
 80038dc:	e016      	b.n	800390c <MoterMoving+0xc0>

   }else if(M_obj ->MoterStart23 == false && M_obj -> MoterPower23 >0){
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7a1b      	ldrb	r3, [r3, #8]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00f      	beq.n	800390c <MoterMoving+0xc0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00b      	beq.n	800390c <MoterMoving+0xc0>
      M_obj -> MoterPower23 -= M_obj -> PWM_l;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	7a92      	ldrb	r2, [r2, #10]
 80038fc:	1a9a      	subs	r2, r3, r2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]
      __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, M_obj -> MoterPower23);
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MoterMoving+0xdc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6852      	ldr	r2, [r2, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
   }
   view_MoterPower14 = M_obj -> MoterPower14;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a06      	ldr	r2, [pc, #24]	; (800392c <MoterMoving+0xe0>)
 8003912:	6013      	str	r3, [r2, #0]
   view_MoterPower23 = M_obj -> MoterPower23;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <MoterMoving+0xe4>)
 800391a:	6013      	str	r3, [r2, #0]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000444 	.word	0x20000444
 800392c:	20000314 	.word	0x20000314
 8003930:	20000318 	.word	0x20000318

08003934 <HAL_UART_RxCpltCallback>:
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART3)
   {
      //HAL_UART_Receive_IT(&huart3,  &rx3_data, 1);
      //HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
   }
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
   static unsigned char cnt = 0;
   uint8_t blink_time=0;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
   {

   }


}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // if switch in action
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	80fb      	strh	r3, [r7, #6]
   old_tick=HAL_GetTick(); // just pressed time
 800396a:	f000 f811 	bl	8003990 <HAL_GetTick>
 800396e:	4603      	mov	r3, r0
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <HAL_GPIO_EXTI_Callback+0x28>)
 8003972:	6013      	str	r3, [r2, #0]
   current_tick=HAL_GetTick();// continue check now time = Current time qudtls
 8003974:	f000 f80c 	bl	8003990 <HAL_GetTick>
 8003978:	4603      	mov	r3, r0
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <HAL_GPIO_EXTI_Callback+0x2c>)
 800397c:	6013      	str	r3, [r2, #0]
//--------------------------------------------------------------------------------------------------------------------//sw4
   if(GPIO_Pin == GPIO_PIN_10) //SW4
      {

      }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000328 	.word	0x20000328
 800398c:	2000032c 	.word	0x2000032c

08003990 <HAL_GetTick>:
uint32_t HAL_GetTick(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return uwTick; //0.001s = 1ms
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <HAL_GetTick+0x14>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	2000063c 	.word	0x2000063c

080039a8 <time_inc>:
//-======================================================//


void time_inc(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
   static uint32_t _msec = 0;
   static uint32_t _msecP2 = 0;
   _msec++;
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <time_inc+0x5c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <time_inc+0x5c>)
 80039b4:	6013      	str	r3, [r2, #0]
   _msecP2++;
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <time_inc+0x60>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a12      	ldr	r2, [pc, #72]	; (8003a08 <time_inc+0x60>)
 80039be:	6013      	str	r3, [r2, #0]
   if (_msec >= 1000)
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <time_inc+0x5c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c8:	d307      	bcc.n	80039da <time_inc+0x32>
   {
      _msec = 0;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <time_inc+0x5c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
      time_sec++; //1s
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <time_inc+0x64>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3301      	adds	r3, #1
 80039d6:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <time_inc+0x64>)
 80039d8:	6013      	str	r3, [r2, #0]
      //i++;
   }

   if (_msecP2 >= 500)
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <time_inc+0x60>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039e2:	d309      	bcc.n	80039f8 <time_inc+0x50>
   {
      _msecP2 = 0;
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <time_inc+0x60>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
      toggle ^= 1;
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <time_inc+0x68>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f083 0301 	eor.w	r3, r3, #1
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <time_inc+0x68>)
 80039f6:	701a      	strb	r2, [r3, #0]
   }
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000340 	.word	0x20000340
 8003a08:	20000344 	.word	0x20000344
 8003a0c:	2000030c 	.word	0x2000030c
 8003a10:	20000310 	.word	0x20000310

08003a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a18:	b672      	cpsid	i
}
 8003a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <Error_Handler+0x8>
	...

08003a20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003a34:	2300      	movs	r3, #0
 8003a36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <MX_RTC_Init+0xac>)
 8003a3a:	4a25      	ldr	r2, [pc, #148]	; (8003ad0 <MX_RTC_Init+0xb0>)
 8003a3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <MX_RTC_Init+0xac>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <MX_RTC_Init+0xac>)
 8003a46:	227f      	movs	r2, #127	; 0x7f
 8003a48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <MX_RTC_Init+0xac>)
 8003a4c:	22f9      	movs	r2, #249	; 0xf9
 8003a4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a50:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <MX_RTC_Init+0xac>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <MX_RTC_Init+0xac>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <MX_RTC_Init+0xac>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a62:	481a      	ldr	r0, [pc, #104]	; (8003acc <MX_RTC_Init+0xac>)
 8003a64:	f003 fa0a 	bl	8006e7c <HAL_RTC_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003a6e:	f7ff ffd1 	bl	8003a14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 1;
 8003a72:	2301      	movs	r3, #1
 8003a74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480f      	ldr	r0, [pc, #60]	; (8003acc <MX_RTC_Init+0xac>)
 8003a8e:	f003 fa78 	bl	8006f82 <HAL_RTC_SetTime>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003a98:	f7ff ffbc 	bl	8003a14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003aac:	463b      	mov	r3, r7
 8003aae:	2200      	movs	r2, #0
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <MX_RTC_Init+0xac>)
 8003ab4:	f003 faff 	bl	80070b6 <HAL_RTC_SetDate>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003abe:	f7ff ffa9 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000348 	.word	0x20000348
 8003ad0:	40002800 	.word	0x40002800

08003ad4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0c      	ldr	r2, [pc, #48]	; (8003b20 <HAL_RTC_MspInit+0x4c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d111      	bne.n	8003b18 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003af4:	2302      	movs	r3, #2
 8003af6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 f8d8 	bl	8006cb8 <HAL_RCCEx_PeriphCLKConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003b0e:	f7ff ff81 	bl	8003a14 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b12:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <HAL_RTC_MspInit+0x50>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40002800 	.word	0x40002800
 8003b24:	42470e3c 	.word	0x42470e3c

08003b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a0f      	ldr	r2, [pc, #60]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b58:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_MspInit+0x4c>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800

08003b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b7c:	e7fe      	b.n	8003b7c <NMI_Handler+0x4>

08003b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <HardFault_Handler+0x4>

08003b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <MemManage_Handler+0x4>

08003b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <BusFault_Handler+0x4>

08003b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <UsageFault_Handler+0x4>

08003b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc4:	f000 fe74 	bl	80048b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  time_inc();
 8003bc8:	f7ff feee 	bl	80039a8 <time_inc>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003bcc:	bf00      	nop
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003bd4:	2008      	movs	r0, #8
 8003bd6:	f002 fa7b 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003be2:	2010      	movs	r0, #16
 8003be4:	f002 fa74 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}

08003bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <USART3_IRQHandler+0x10>)
 8003bf2:	f004 fc75 	bl	80084e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200005f4 	.word	0x200005f4

08003c00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c08:	f002 fa62 	bl	80060d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003c16:	f003 fdc5 	bl	80077a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000564 	.word	0x20000564

08003c24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003c2a:	f003 fdbb 	bl	80077a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200005ac 	.word	0x200005ac

08003c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003c3c:	4803      	ldr	r0, [pc, #12]	; (8003c4c <TIM6_DAC_IRQHandler+0x14>)
 8003c3e:	f001 fbb4 	bl	80053aa <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003c42:	4803      	ldr	r0, [pc, #12]	; (8003c50 <TIM6_DAC_IRQHandler+0x18>)
 8003c44:	f003 fdae 	bl	80077a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200002a4 	.word	0x200002a4
 8003c50:	2000048c 	.word	0x2000048c

08003c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <TIM7_IRQHandler+0x10>)
 8003c5a:	f003 fda3 	bl	80077a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200004d4 	.word	0x200004d4

08003c68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c6c:	4802      	ldr	r0, [pc, #8]	; (8003c78 <DMA2_Stream0_IRQHandler+0x10>)
 8003c6e:	f001 fdf7 	bl	8005860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000244 	.word	0x20000244

08003c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return 1;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_kill>:

int _kill(int pid, int sig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c96:	f006 f8c5 	bl	8009e24 <__errno>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2216      	movs	r2, #22
 8003c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_exit>:

void _exit (int status)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ffe7 	bl	8003c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cbe:	e7fe      	b.n	8003cbe <_exit+0x12>

08003cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e00a      	b.n	8003ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cd2:	f3af 8000 	nop.w
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	b2ca      	uxtb	r2, r1
 8003ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	dbf0      	blt.n	8003cd2 <_read+0x12>
  }

  return len;
 8003cf0:	687b      	ldr	r3, [r7, #4]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e009      	b.n	8003d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	60ba      	str	r2, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dbf1      	blt.n	8003d0c <_write+0x12>
  }
  return len;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_close>:

int _close(int file)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <_isatty>:

int _isatty(int file)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <_sbrk+0x5c>)
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <_sbrk+0x60>)
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_sbrk+0x64>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <_sbrk+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dcc:	f006 f82a 	bl	8009e24 <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e009      	b.n	8003df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <_sbrk+0x64>)
 8003dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20020000 	.word	0x20020000
 8003dfc:	00000400 	.word	0x00000400
 8003e00:	20000368 	.word	0x20000368
 8003e04:	20000790 	.word	0x20000790

08003e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <SystemInit+0x20>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <SystemInit+0x20>)
 8003e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e40:	f107 0320 	add.w	r3, r7, #32
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
 8003e58:	615a      	str	r2, [r3, #20]
 8003e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 168-1;
 8003e72:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e74:	22a7      	movs	r2, #167	; 0xa7
 8003e76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7e:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e84:	4823      	ldr	r0, [pc, #140]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003e86:	f003 fa3b 	bl	8007300 <HAL_TIM_Base_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003e90:	f7ff fdc0 	bl	8003a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	481c      	ldr	r0, [pc, #112]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003ea2:	f003 fe31 	bl	8007b08 <HAL_TIM_ConfigClockSource>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003eac:	f7ff fdb2 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003eb0:	4818      	ldr	r0, [pc, #96]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003eb2:	f003 fae5 	bl	8007480 <HAL_TIM_PWM_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003ebc:	f7ff fdaa 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ec8:	f107 0320 	add.w	r3, r7, #32
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4811      	ldr	r0, [pc, #68]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003ed0:	f004 fa26 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003eda:	f7ff fd9b 	bl	8003a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ede:	2360      	movs	r3, #96	; 0x60
 8003ee0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84;
 8003ee2:	2354      	movs	r3, #84	; 0x54
 8003ee4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4807      	ldr	r0, [pc, #28]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003ef6:	f003 fd45 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003f00:	f7ff fd88 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f04:	4803      	ldr	r0, [pc, #12]	; (8003f14 <MX_TIM2_Init+0xe8>)
 8003f06:	f000 fb39 	bl	800457c <HAL_TIM_MspPostInit>

}
 8003f0a:	bf00      	nop
 8003f0c:	3738      	adds	r7, #56	; 0x38
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000036c 	.word	0x2000036c

08003f18 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	; 0x38
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f2c:	f107 0320 	add.w	r3, r7, #32
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	611a      	str	r2, [r3, #16]
 8003f44:	615a      	str	r2, [r3, #20]
 8003f46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f4a:	4a2e      	ldr	r2, [pc, #184]	; (8004004 <MX_TIM3_Init+0xec>)
 8003f4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f50:	2209      	movs	r2, #9
 8003f52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000-1;
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f5c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8003f60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f6e:	4824      	ldr	r0, [pc, #144]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f70:	f003 f9c6 	bl	8007300 <HAL_TIM_Base_Init>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003f7a:	f7ff fd4b 	bl	8003a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f88:	4619      	mov	r1, r3
 8003f8a:	481d      	ldr	r0, [pc, #116]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f8c:	f003 fdbc 	bl	8007b08 <HAL_TIM_ConfigClockSource>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003f96:	f7ff fd3d 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f9a:	4819      	ldr	r0, [pc, #100]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003f9c:	f003 fa70 	bl	8007480 <HAL_TIM_PWM_Init>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003fa6:	f7ff fd35 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003fb2:	f107 0320 	add.w	r3, r7, #32
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4811      	ldr	r0, [pc, #68]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003fba:	f004 f9b1 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003fc4:	f7ff fd26 	bl	8003a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fc8:	2360      	movs	r3, #96	; 0x60
 8003fca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10500-1;
 8003fcc:	f642 1303 	movw	r3, #10499	; 0x2903
 8003fd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	2204      	movs	r2, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4807      	ldr	r0, [pc, #28]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003fe2:	f003 fccf 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003fec:	f7ff fd12 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <MX_TIM3_Init+0xe8>)
 8003ff2:	f000 fac3 	bl	800457c <HAL_TIM_MspPostInit>

}
 8003ff6:	bf00      	nop
 8003ff8:	3738      	adds	r7, #56	; 0x38
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200003b4 	.word	0x200003b4
 8004004:	40000400 	.word	0x40000400

08004008 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800400e:	f107 0308 	add.w	r3, r7, #8
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800401c:	463b      	mov	r3, r7
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <MX_TIM4_Init+0x94>)
 8004026:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <MX_TIM4_Init+0x98>)
 8004028:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <MX_TIM4_Init+0x94>)
 800402c:	2213      	movs	r2, #19
 800402e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <MX_TIM4_Init+0x94>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000-1;
 8004036:	4b19      	ldr	r3, [pc, #100]	; (800409c <MX_TIM4_Init+0x94>)
 8004038:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800403c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <MX_TIM4_Init+0x94>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_TIM4_Init+0x94>)
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800404a:	4814      	ldr	r0, [pc, #80]	; (800409c <MX_TIM4_Init+0x94>)
 800404c:	f003 f958 	bl	8007300 <HAL_TIM_Base_Init>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004056:	f7ff fcdd 	bl	8003a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800405a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800405e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004060:	f107 0308 	add.w	r3, r7, #8
 8004064:	4619      	mov	r1, r3
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <MX_TIM4_Init+0x94>)
 8004068:	f003 fd4e 	bl	8007b08 <HAL_TIM_ConfigClockSource>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004072:	f7ff fccf 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	4619      	mov	r1, r3
 8004082:	4806      	ldr	r0, [pc, #24]	; (800409c <MX_TIM4_Init+0x94>)
 8004084:	f004 f94c 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800408e:	f7ff fcc1 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200003fc 	.word	0x200003fc
 80040a0:	40000800 	.word	0x40000800

080040a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08e      	sub	sp, #56	; 0x38
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040b8:	f107 0320 	add.w	r3, r7, #32
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	605a      	str	r2, [r3, #4]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	60da      	str	r2, [r3, #12]
 80040ce:	611a      	str	r2, [r3, #16]
 80040d0:	615a      	str	r2, [r3, #20]
 80040d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040d6:	4a3f      	ldr	r2, [pc, #252]	; (80041d4 <MX_TIM5_Init+0x130>)
 80040d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040dc:	2253      	movs	r2, #83	; 0x53
 80040de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e0:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 80040e6:	4b3a      	ldr	r3, [pc, #232]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80040ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ee:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040f4:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80040fa:	4835      	ldr	r0, [pc, #212]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80040fc:	f003 f900 	bl	8007300 <HAL_TIM_Base_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8004106:	f7ff fc85 	bl	8003a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800410a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004114:	4619      	mov	r1, r3
 8004116:	482e      	ldr	r0, [pc, #184]	; (80041d0 <MX_TIM5_Init+0x12c>)
 8004118:	f003 fcf6 	bl	8007b08 <HAL_TIM_ConfigClockSource>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8004122:	f7ff fc77 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004126:	482a      	ldr	r0, [pc, #168]	; (80041d0 <MX_TIM5_Init+0x12c>)
 8004128:	f003 f9aa 	bl	8007480 <HAL_TIM_PWM_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8004132:	f7ff fc6f 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800413e:	f107 0320 	add.w	r3, r7, #32
 8004142:	4619      	mov	r1, r3
 8004144:	4822      	ldr	r0, [pc, #136]	; (80041d0 <MX_TIM5_Init+0x12c>)
 8004146:	f004 f8eb 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8004150:	f7ff fc60 	bl	8003a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004154:	2360      	movs	r3, #96	; 0x60
 8004156:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8004158:	f241 3388 	movw	r3, #5000	; 0x1388
 800415c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	2200      	movs	r2, #0
 800416a:	4619      	mov	r1, r3
 800416c:	4818      	ldr	r0, [pc, #96]	; (80041d0 <MX_TIM5_Init+0x12c>)
 800416e:	f003 fc09 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8004178:	f7ff fc4c 	bl	8003a14 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	2204      	movs	r2, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4812      	ldr	r0, [pc, #72]	; (80041d0 <MX_TIM5_Init+0x12c>)
 8004188:	f003 fbfc 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8004192:	f7ff fc3f 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	2208      	movs	r2, #8
 800419a:	4619      	mov	r1, r3
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <MX_TIM5_Init+0x12c>)
 800419e:	f003 fbf1 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80041a8:	f7ff fc34 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	220c      	movs	r2, #12
 80041b0:	4619      	mov	r1, r3
 80041b2:	4807      	ldr	r0, [pc, #28]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80041b4:	f003 fbe6 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM5_Init+0x11e>
  {
    Error_Handler();
 80041be:	f7ff fc29 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80041c2:	4803      	ldr	r0, [pc, #12]	; (80041d0 <MX_TIM5_Init+0x12c>)
 80041c4:	f000 f9da 	bl	800457c <HAL_TIM_MspPostInit>

}
 80041c8:	bf00      	nop
 80041ca:	3738      	adds	r7, #56	; 0x38
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000444 	.word	0x20000444
 80041d4:	40000c00 	.word	0x40000c00

080041d8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041de:	463b      	mov	r3, r7
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <MX_TIM6_Init+0x64>)
 80041e8:	4a15      	ldr	r2, [pc, #84]	; (8004240 <MX_TIM6_Init+0x68>)
 80041ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80041ec:	4b13      	ldr	r3, [pc, #76]	; (800423c <MX_TIM6_Init+0x64>)
 80041ee:	f242 720f 	movw	r2, #9999	; 0x270f
 80041f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041f4:	4b11      	ldr	r3, [pc, #68]	; (800423c <MX_TIM6_Init+0x64>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4199;
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <MX_TIM6_Init+0x64>)
 80041fc:	f241 0267 	movw	r2, #4199	; 0x1067
 8004200:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004202:	4b0e      	ldr	r3, [pc, #56]	; (800423c <MX_TIM6_Init+0x64>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004208:	480c      	ldr	r0, [pc, #48]	; (800423c <MX_TIM6_Init+0x64>)
 800420a:	f003 f879 	bl	8007300 <HAL_TIM_Base_Init>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004214:	f7ff fbfe 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004218:	2300      	movs	r3, #0
 800421a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421c:	2300      	movs	r3, #0
 800421e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004220:	463b      	mov	r3, r7
 8004222:	4619      	mov	r1, r3
 8004224:	4805      	ldr	r0, [pc, #20]	; (800423c <MX_TIM6_Init+0x64>)
 8004226:	f004 f87b 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004230:	f7ff fbf0 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	2000048c 	.word	0x2000048c
 8004240:	40001000 	.word	0x40001000

08004244 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424a:	463b      	mov	r3, r7
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004254:	4a15      	ldr	r2, [pc, #84]	; (80042ac <MX_TIM7_Init+0x68>)
 8004256:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <MX_TIM7_Init+0x64>)
 800425a:	f242 720f 	movw	r2, #9999	; 0x270f
 800425e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004268:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800426c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426e:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004274:	480c      	ldr	r0, [pc, #48]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004276:	f003 f843 	bl	8007300 <HAL_TIM_Base_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004280:	f7ff fbc8 	bl	8003a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800428c:	463b      	mov	r3, r7
 800428e:	4619      	mov	r1, r3
 8004290:	4805      	ldr	r0, [pc, #20]	; (80042a8 <MX_TIM7_Init+0x64>)
 8004292:	f004 f845 	bl	8008320 <HAL_TIMEx_MasterConfigSynchronization>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800429c:	f7ff fbba 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200004d4 	.word	0x200004d4
 80042ac:	40001400 	.word	0x40001400

080042b0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	605a      	str	r2, [r3, #4]
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	60da      	str	r2, [r3, #12]
 80042c2:	611a      	str	r2, [r3, #16]
 80042c4:	615a      	str	r2, [r3, #20]
 80042c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <MX_TIM10_Init+0x94>)
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <MX_TIM10_Init+0x98>)
 80042cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 336-1;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <MX_TIM10_Init+0x94>)
 80042d0:	f240 124f 	movw	r2, #335	; 0x14f
 80042d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <MX_TIM10_Init+0x94>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <MX_TIM10_Init+0x94>)
 80042de:	f242 720f 	movw	r2, #9999	; 0x270f
 80042e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e4:	4b17      	ldr	r3, [pc, #92]	; (8004344 <MX_TIM10_Init+0x94>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <MX_TIM10_Init+0x94>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80042f0:	4814      	ldr	r0, [pc, #80]	; (8004344 <MX_TIM10_Init+0x94>)
 80042f2:	f003 f805 	bl	8007300 <HAL_TIM_Base_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 80042fc:	f7ff fb8a 	bl	8003a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004300:	4810      	ldr	r0, [pc, #64]	; (8004344 <MX_TIM10_Init+0x94>)
 8004302:	f003 f8bd 	bl	8007480 <HAL_TIM_PWM_Init>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800430c:	f7ff fb82 	bl	8003a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004310:	2360      	movs	r3, #96	; 0x60
 8004312:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8004314:	2364      	movs	r3, #100	; 0x64
 8004316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	2200      	movs	r2, #0
 8004324:	4619      	mov	r1, r3
 8004326:	4807      	ldr	r0, [pc, #28]	; (8004344 <MX_TIM10_Init+0x94>)
 8004328:	f003 fb2c 	bl	8007984 <HAL_TIM_PWM_ConfigChannel>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8004332:	f7ff fb6f 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004336:	4803      	ldr	r0, [pc, #12]	; (8004344 <MX_TIM10_Init+0x94>)
 8004338:	f000 f920 	bl	800457c <HAL_TIM_MspPostInit>

}
 800433c:	bf00      	nop
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	2000051c 	.word	0x2000051c
 8004348:	40014400 	.word	0x40014400

0800434c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004350:	4b0e      	ldr	r3, [pc, #56]	; (800438c <MX_TIM13_Init+0x40>)
 8004352:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <MX_TIM13_Init+0x44>)
 8004354:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 9999;
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <MX_TIM13_Init+0x40>)
 8004358:	f242 720f 	movw	r2, #9999	; 0x270f
 800435c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <MX_TIM13_Init+0x40>)
 8004360:	2200      	movs	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 8399;
 8004364:	4b09      	ldr	r3, [pc, #36]	; (800438c <MX_TIM13_Init+0x40>)
 8004366:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800436a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <MX_TIM13_Init+0x40>)
 800436e:	2200      	movs	r2, #0
 8004370:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <MX_TIM13_Init+0x40>)
 8004374:	2200      	movs	r2, #0
 8004376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004378:	4804      	ldr	r0, [pc, #16]	; (800438c <MX_TIM13_Init+0x40>)
 800437a:	f002 ffc1 	bl	8007300 <HAL_TIM_Base_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8004384:	f7ff fb46 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000564 	.word	0x20000564
 8004390:	40001c00 	.word	0x40001c00

08004394 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <MX_TIM14_Init+0x40>)
 800439a:	4a0f      	ldr	r2, [pc, #60]	; (80043d8 <MX_TIM14_Init+0x44>)
 800439c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 9999;
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80043a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8399;
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043ae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80043b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80043c0:	4804      	ldr	r0, [pc, #16]	; (80043d4 <MX_TIM14_Init+0x40>)
 80043c2:	f002 ff9d 	bl	8007300 <HAL_TIM_Base_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80043cc:	f7ff fb22 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200005ac 	.word	0x200005ac
 80043d8:	40002000 	.word	0x40002000

080043dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043dc:	b480      	push	{r7}
 80043de:	b08d      	sub	sp, #52	; 0x34
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f2:	4b59      	ldr	r3, [pc, #356]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a58      	ldr	r2, [pc, #352]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b56      	ldr	r3, [pc, #344]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800440a:	e09e      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM3)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_TIM_Base_MspInit+0x180>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
 800441a:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a4e      	ldr	r2, [pc, #312]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004420:	f043 0302 	orr.w	r3, r3, #2
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
 8004426:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004432:	e08a      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM4)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a49      	ldr	r2, [pc, #292]	; (8004560 <HAL_TIM_Base_MspInit+0x184>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10e      	bne.n	800445c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	4b45      	ldr	r3, [pc, #276]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a44      	ldr	r2, [pc, #272]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b42      	ldr	r3, [pc, #264]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800445a:	e076      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM5)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_TIM_Base_MspInit+0x188>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10e      	bne.n	8004484 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	623b      	str	r3, [r7, #32]
 8004480:	6a3b      	ldr	r3, [r7, #32]
}
 8004482:	e062      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM6)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a37      	ldr	r2, [pc, #220]	; (8004568 <HAL_TIM_Base_MspInit+0x18c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004498:	f043 0310 	orr.w	r3, r3, #16
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	69fb      	ldr	r3, [r7, #28]
}
 80044aa:	e04e      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM7)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	; (800456c <HAL_TIM_Base_MspInit+0x190>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	69bb      	ldr	r3, [r7, #24]
}
 80044d2:	e03a      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM10)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <HAL_TIM_Base_MspInit+0x194>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	6453      	str	r3, [r2, #68]	; 0x44
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]
}
 80044fa:	e026      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM13)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <HAL_TIM_Base_MspInit+0x198>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10e      	bne.n	8004524 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	4b13      	ldr	r3, [pc, #76]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]
}
 8004522:	e012      	b.n	800454a <HAL_TIM_Base_MspInit+0x16e>
  else if(tim_baseHandle->Instance==TIM14)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_TIM_Base_MspInit+0x19c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10d      	bne.n	800454a <HAL_TIM_Base_MspInit+0x16e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_TIM_Base_MspInit+0x17c>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	bf00      	nop
 800454c:	3734      	adds	r7, #52	; 0x34
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40001000 	.word	0x40001000
 800456c:	40001400 	.word	0x40001400
 8004570:	40014400 	.word	0x40014400
 8004574:	40001c00 	.word	0x40001c00
 8004578:	40002000 	.word	0x40002000

0800457c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 031c 	add.w	r3, r7, #28
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d11e      	bne.n	80045dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	4b46      	ldr	r3, [pc, #280]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a45      	ldr	r2, [pc, #276]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80045ba:	2320      	movs	r3, #32
 80045bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045be:	2302      	movs	r3, #2
 80045c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c6:	2300      	movs	r3, #0
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045ca:	2301      	movs	r3, #1
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	f107 031c 	add.w	r3, r7, #28
 80045d2:	4619      	mov	r1, r3
 80045d4:	483a      	ldr	r0, [pc, #232]	; (80046c0 <HAL_TIM_MspPostInit+0x144>)
 80045d6:	f001 fbad 	bl	8005d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80045da:	e06b      	b.n	80046b4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a38      	ldr	r2, [pc, #224]	; (80046c4 <HAL_TIM_MspPostInit+0x148>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d11e      	bne.n	8004624 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4a33      	ldr	r2, [pc, #204]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	6313      	str	r3, [r2, #48]	; 0x30
 80045f6:	4b31      	ldr	r3, [pc, #196]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004602:	2320      	movs	r3, #32
 8004604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004606:	2302      	movs	r3, #2
 8004608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2300      	movs	r3, #0
 8004610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004612:	2302      	movs	r3, #2
 8004614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 031c 	add.w	r3, r7, #28
 800461a:	4619      	mov	r1, r3
 800461c:	482a      	ldr	r0, [pc, #168]	; (80046c8 <HAL_TIM_MspPostInit+0x14c>)
 800461e:	f001 fb89 	bl	8005d34 <HAL_GPIO_Init>
}
 8004622:	e047      	b.n	80046b4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM5)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a28      	ldr	r2, [pc, #160]	; (80046cc <HAL_TIM_MspPostInit+0x150>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d11e      	bne.n	800466c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a21      	ldr	r2, [pc, #132]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b1f      	ldr	r3, [pc, #124]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800464a:	230f      	movs	r3, #15
 800464c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800465a:	2302      	movs	r3, #2
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800465e:	f107 031c 	add.w	r3, r7, #28
 8004662:	4619      	mov	r1, r3
 8004664:	4816      	ldr	r0, [pc, #88]	; (80046c0 <HAL_TIM_MspPostInit+0x144>)
 8004666:	f001 fb65 	bl	8005d34 <HAL_GPIO_Init>
}
 800466a:	e023      	b.n	80046b4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM10)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_TIM_MspPostInit+0x154>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d11e      	bne.n	80046b4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_TIM_MspPostInit+0x140>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004698:	2302      	movs	r3, #2
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80046a4:	2303      	movs	r3, #3
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a8:	f107 031c 	add.w	r3, r7, #28
 80046ac:	4619      	mov	r1, r3
 80046ae:	4806      	ldr	r0, [pc, #24]	; (80046c8 <HAL_TIM_MspPostInit+0x14c>)
 80046b0:	f001 fb40 	bl	8005d34 <HAL_GPIO_Init>
}
 80046b4:	bf00      	nop
 80046b6:	3730      	adds	r7, #48	; 0x30
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40020000 	.word	0x40020000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40020400 	.word	0x40020400
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40014400 	.word	0x40014400

080046d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <MX_USART3_UART_Init+0x50>)
 80046dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 80046fa:	220c      	movs	r2, #12
 80046fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 8004700:	2200      	movs	r2, #0
 8004702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 8004706:	2200      	movs	r2, #0
 8004708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <MX_USART3_UART_Init+0x4c>)
 800470c:	f003 fe98 	bl	8008440 <HAL_UART_Init>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004716:	f7ff f97d 	bl	8003a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200005f4 	.word	0x200005f4
 8004724:	40004800 	.word	0x40004800

08004728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0314 	add.w	r3, r7, #20
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_UART_MspInit+0x84>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d12c      	bne.n	80047a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_UART_MspInit+0x88>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_UART_MspInit+0x88>)
 8004754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <HAL_UART_MspInit+0x88>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <HAL_UART_MspInit+0x88>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a10      	ldr	r2, [pc, #64]	; (80047b0 <HAL_UART_MspInit+0x88>)
 8004770:	f043 0308 	orr.w	r3, r3, #8
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_UART_MspInit+0x88>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004790:	2303      	movs	r3, #3
 8004792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004794:	2307      	movs	r3, #7
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	4805      	ldr	r0, [pc, #20]	; (80047b4 <HAL_UART_MspInit+0x8c>)
 80047a0:	f001 fac8 	bl	8005d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047a4:	bf00      	nop
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40004800 	.word	0x40004800
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40020c00 	.word	0x40020c00

080047b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047bc:	f7ff fb24 	bl	8003e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047c0:	480c      	ldr	r0, [pc, #48]	; (80047f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047c2:	490d      	ldr	r1, [pc, #52]	; (80047f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047c4:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c8:	e002      	b.n	80047d0 <LoopCopyDataInit>

080047ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ce:	3304      	adds	r3, #4

080047d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047d4:	d3f9      	bcc.n	80047ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047d8:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047dc:	e001      	b.n	80047e2 <LoopFillZerobss>

080047de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e0:	3204      	adds	r2, #4

080047e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047e4:	d3fb      	bcc.n	80047de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047e6:	f005 fb23 	bl	8009e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ea:	f7fd fd7d 	bl	80022e8 <main>
  bx  lr    
 80047ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80047fc:	0800c544 	.word	0x0800c544
  ldr r2, =_sbss
 8004800:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004804:	2000078c 	.word	0x2000078c

08004808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004808:	e7fe      	b.n	8004808 <ADC_IRQHandler>
	...

0800480c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <HAL_Init+0x40>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <HAL_Init+0x40>)
 8004816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_Init+0x40>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_Init+0x40>)
 8004822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_Init+0x40>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a07      	ldr	r2, [pc, #28]	; (800484c <HAL_Init+0x40>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004834:	2003      	movs	r0, #3
 8004836:	f000 fd55 	bl	80052e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483a:	200f      	movs	r0, #15
 800483c:	f000 f808 	bl	8004850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004840:	f7ff f972 	bl	8003b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40023c00 	.word	0x40023c00

08004850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_InitTick+0x54>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_InitTick+0x58>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004866:	fbb3 f3f1 	udiv	r3, r3, r1
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fd6d 	bl	800534e <HAL_SYSTICK_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e00e      	b.n	800489c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d80a      	bhi.n	800489a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004884:	2200      	movs	r2, #0
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	f000 fd35 	bl	80052fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004890:	4a06      	ldr	r2, [pc, #24]	; (80048ac <HAL_InitTick+0x5c>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	20000014 	.word	0x20000014
 80048ac:	20000010 	.word	0x20000010

080048b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_IncTick+0x20>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_IncTick+0x24>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4413      	add	r3, r2
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_IncTick+0x24>)
 80048c2:	6013      	str	r3, [r2, #0]
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000014 	.word	0x20000014
 80048d4:	2000063c 	.word	0x2000063c

080048d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e0:	f7ff f856 	bl	8003990 <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d005      	beq.n	80048fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_Delay+0x44>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048fe:	bf00      	nop
 8004900:	f7ff f846 	bl	8003990 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	429a      	cmp	r2, r3
 800490e:	d8f7      	bhi.n	8004900 <HAL_Delay+0x28>
  {
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000014 	.word	0x20000014

08004920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e033      	b.n	800499e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fa4a 	bl	8001dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d118      	bne.n	8004990 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004966:	f023 0302 	bic.w	r3, r3, #2
 800496a:	f043 0202 	orr.w	r2, r3, #2
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa68 	bl	8004e48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
 800498e:	e001      	b.n	8004994 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800499c:	7bfb      	ldrb	r3, [r7, #15]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_Start_DMA+0x1e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0e9      	b.n	8004b9a <HAL_ADC_Start_DMA+0x1f2>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d018      	beq.n	8004a0e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049ec:	4b6d      	ldr	r3, [pc, #436]	; (8004ba4 <HAL_ADC_Start_DMA+0x1fc>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6d      	ldr	r2, [pc, #436]	; (8004ba8 <HAL_ADC_Start_DMA+0x200>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	0c9a      	lsrs	r2, r3, #18
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004a00:	e002      	b.n	8004a08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f9      	bne.n	8004a02 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	d107      	bne.n	8004a2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 80a1 	bne.w	8004b80 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d106      	bne.n	8004a8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	f023 0206 	bic.w	r2, r3, #6
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
 8004a8a:	e002      	b.n	8004a92 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a9a:	4b44      	ldr	r3, [pc, #272]	; (8004bac <HAL_ADC_Start_DMA+0x204>)
 8004a9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	4a43      	ldr	r2, [pc, #268]	; (8004bb0 <HAL_ADC_Start_DMA+0x208>)
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	4a42      	ldr	r2, [pc, #264]	; (8004bb4 <HAL_ADC_Start_DMA+0x20c>)
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4a41      	ldr	r2, [pc, #260]	; (8004bb8 <HAL_ADC_Start_DMA+0x210>)
 8004ab4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004abe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004ace:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ade:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	334c      	adds	r3, #76	; 0x4c
 8004aea:	4619      	mov	r1, r3
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f000 fdcc 	bl	800568c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d12a      	bne.n	8004b56 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HAL_ADC_Start_DMA+0x214>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d015      	beq.n	8004b36 <HAL_ADC_Start_DMA+0x18e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <HAL_ADC_Start_DMA+0x218>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d105      	bne.n	8004b20 <HAL_ADC_Start_DMA+0x178>
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_ADC_Start_DMA+0x204>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a27      	ldr	r2, [pc, #156]	; (8004bc4 <HAL_ADC_Start_DMA+0x21c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d136      	bne.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_ADC_Start_DMA+0x204>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d130      	bne.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d129      	bne.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	e020      	b.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_ADC_Start_DMA+0x214>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d11b      	bne.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d114      	bne.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	e00b      	b.n	8004b98 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f043 0210 	orr.w	r2, r3, #16
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	f043 0201 	orr.w	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	431bde83 	.word	0x431bde83
 8004bac:	40012300 	.word	0x40012300
 8004bb0:	08005041 	.word	0x08005041
 8004bb4:	080050fb 	.word	0x080050fb
 8004bb8:	08005117 	.word	0x08005117
 8004bbc:	40012000 	.word	0x40012000
 8004bc0:	40012100 	.word	0x40012100
 8004bc4:	40012200 	.word	0x40012200

08004bc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e105      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x228>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d925      	bls.n	8004c7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68d9      	ldr	r1, [r3, #12]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	3b1e      	subs	r3, #30
 8004c46:	2207      	movs	r2, #7
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	400a      	ands	r2, r1
 8004c54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68d9      	ldr	r1, [r3, #12]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	4618      	mov	r0, r3
 8004c68:	4603      	mov	r3, r0
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	4403      	add	r3, r0
 8004c6e:	3b1e      	subs	r3, #30
 8004c70:	409a      	lsls	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	e022      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6919      	ldr	r1, [r3, #16]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	4413      	add	r3, r2
 8004c90:	2207      	movs	r2, #7
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43da      	mvns	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6919      	ldr	r1, [r3, #16]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4403      	add	r3, r0
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d824      	bhi.n	8004d14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	3b05      	subs	r3, #5
 8004cdc:	221f      	movs	r2, #31
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43da      	mvns	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	400a      	ands	r2, r1
 8004cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	3b05      	subs	r3, #5
 8004d06:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	635a      	str	r2, [r3, #52]	; 0x34
 8004d12:	e04c      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d824      	bhi.n	8004d66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3b23      	subs	r3, #35	; 0x23
 8004d2e:	221f      	movs	r2, #31
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43da      	mvns	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	3b23      	subs	r3, #35	; 0x23
 8004d58:	fa00 f203 	lsl.w	r2, r0, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
 8004d64:	e023      	b.n	8004dae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	3b41      	subs	r3, #65	; 0x41
 8004d78:	221f      	movs	r2, #31
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	400a      	ands	r2, r1
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4618      	mov	r0, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	3b41      	subs	r3, #65	; 0x41
 8004da2:	fa00 f203 	lsl.w	r2, r0, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_ADC_ConfigChannel+0x234>)
 8004db0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <HAL_ADC_ConfigChannel+0x238>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x1cc>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b12      	cmp	r3, #18
 8004dc2:	d105      	bne.n	8004dd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <HAL_ADC_ConfigChannel+0x238>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d123      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x21e>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d003      	beq.n	8004dea <HAL_ADC_ConfigChannel+0x1e6>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b11      	cmp	r3, #17
 8004de8:	d11b      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d111      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <HAL_ADC_ConfigChannel+0x23c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_ADC_ConfigChannel+0x240>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	0c9a      	lsrs	r2, r3, #18
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e14:	e002      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f9      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012300 	.word	0x40012300
 8004e3c:	40012000 	.word	0x40012000
 8004e40:	2000000c 	.word	0x2000000c
 8004e44:	431bde83 	.word	0x431bde83

08004e48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e50:	4b79      	ldr	r3, [pc, #484]	; (8005038 <ADC_Init+0x1f0>)
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	4a58      	ldr	r2, [pc, #352]	; (800503c <ADC_Init+0x1f4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d022      	beq.n	8004f26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004eee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6899      	ldr	r1, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
 8004f24:	e00f      	b.n	8004f46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0202 	bic.w	r2, r2, #2
 8004f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7e1b      	ldrb	r3, [r3, #24]
 8004f60:	005a      	lsls	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6859      	ldr	r1, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	035a      	lsls	r2, r3, #13
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	e007      	b.n	8004fbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	051a      	lsls	r2, r3, #20
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ffe:	025a      	lsls	r2, r3, #9
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6899      	ldr	r1, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	029a      	lsls	r2, r3, #10
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40012300 	.word	0x40012300
 800503c:	0f000001 	.word	0x0f000001

08005040 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005056:	2b00      	cmp	r3, #0
 8005058:	d13c      	bne.n	80050d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d12b      	bne.n	80050cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005078:	2b00      	cmp	r3, #0
 800507a:	d127      	bne.n	80050cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005086:	2b00      	cmp	r3, #0
 8005088:	d006      	beq.n	8005098 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005094:	2b00      	cmp	r3, #0
 8005096:	d119      	bne.n	80050cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0220 	bic.w	r2, r2, #32
 80050a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0201 	orr.w	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7ff fd7b 	bl	8004bc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050d2:	e00e      	b.n	80050f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fd85 	bl	8004bf0 <HAL_ADC_ErrorCallback>
}
 80050e6:	e004      	b.n	80050f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fd67 	bl	8004bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	f043 0204 	orr.w	r2, r3, #4
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff fd5a 	bl	8004bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800516c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <__NVIC_SetPriorityGrouping+0x44>)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	60d3      	str	r3, [r2, #12]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 0307 	and.w	r3, r3, #7
}
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	db0b      	blt.n	80051d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	4907      	ldr	r1, [pc, #28]	; (80051e0 <__NVIC_EnableIRQ+0x38>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2001      	movs	r0, #1
 80051ca:	fa00 f202 	lsl.w	r2, r0, r2
 80051ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e100 	.word	0xe000e100

080051e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	6039      	str	r1, [r7, #0]
 80051ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	db0a      	blt.n	800520e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	490c      	ldr	r1, [pc, #48]	; (8005230 <__NVIC_SetPriority+0x4c>)
 80051fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005202:	0112      	lsls	r2, r2, #4
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	440b      	add	r3, r1
 8005208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800520c:	e00a      	b.n	8005224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4908      	ldr	r1, [pc, #32]	; (8005234 <__NVIC_SetPriority+0x50>)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	3b04      	subs	r3, #4
 800521c:	0112      	lsls	r2, r2, #4
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	440b      	add	r3, r1
 8005222:	761a      	strb	r2, [r3, #24]
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	e000e100 	.word	0xe000e100
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f1c3 0307 	rsb	r3, r3, #7
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf28      	it	cs
 8005256:	2304      	movcs	r3, #4
 8005258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3304      	adds	r3, #4
 800525e:	2b06      	cmp	r3, #6
 8005260:	d902      	bls.n	8005268 <NVIC_EncodePriority+0x30>
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	3b03      	subs	r3, #3
 8005266:	e000      	b.n	800526a <NVIC_EncodePriority+0x32>
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	f04f 32ff 	mov.w	r2, #4294967295
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	43da      	mvns	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	401a      	ands	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005280:	f04f 31ff 	mov.w	r1, #4294967295
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	43d9      	mvns	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005290:	4313      	orrs	r3, r2
         );
}
 8005292:	4618      	mov	r0, r3
 8005294:	3724      	adds	r7, #36	; 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
	...

080052a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052b0:	d301      	bcc.n	80052b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052b2:	2301      	movs	r3, #1
 80052b4:	e00f      	b.n	80052d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052b6:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <SysTick_Config+0x40>)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052be:	210f      	movs	r1, #15
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	f7ff ff8e 	bl	80051e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <SysTick_Config+0x40>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <SysTick_Config+0x40>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010

080052e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff29 	bl	8005144 <__NVIC_SetPriorityGrouping>
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800530c:	f7ff ff3e 	bl	800518c <__NVIC_GetPriorityGrouping>
 8005310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff8e 	bl	8005238 <NVIC_EncodePriority>
 800531c:	4602      	mov	r2, r0
 800531e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff5d 	bl	80051e4 <__NVIC_SetPriority>
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	4603      	mov	r3, r0
 800533a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff31 	bl	80051a8 <__NVIC_EnableIRQ>
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ffa2 	bl	80052a0 <SysTick_Config>
 800535c:	4603      	mov	r3, r0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e014      	b.n	80053a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	791b      	ldrb	r3, [r3, #4]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7fc fde3 	bl	8001f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01d      	beq.n	8005408 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d018      	beq.n	8005408 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f043 0201 	orr.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005400:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f827 	bl	8005456 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d01d      	beq.n	800544e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d018      	beq.n	800544e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2204      	movs	r2, #4
 8005420:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f043 0202 	orr.w	r2, r3, #2
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f867 	bl	800551c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800546a:	b480      	push	{r7}
 800546c:	b089      	sub	sp, #36	; 0x24
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_DAC_ConfigChannel+0x1c>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e042      	b.n	8005510 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	795b      	ldrb	r3, [r3, #5]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_DAC_ConfigChannel+0x2c>
 8005492:	2302      	movs	r3, #2
 8005494:	e03c      	b.n	8005510 <HAL_DAC_ConfigChannel+0xa6>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2202      	movs	r2, #2
 80054a0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6819      	ldr	r1, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	22c0      	movs	r2, #192	; 0xc0
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43da      	mvns	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	400a      	ands	r2, r1
 8005500:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800550e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3724      	adds	r7, #36	; 0x24
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800553c:	f7fe fa28 	bl	8003990 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e099      	b.n	8005680 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0201 	bic.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800556c:	e00f      	b.n	800558e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800556e:	f7fe fa0f 	bl	8003990 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b05      	cmp	r3, #5
 800557a:	d908      	bls.n	800558e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2203      	movs	r2, #3
 8005586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e078      	b.n	8005680 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e8      	bne.n	800556e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_DMA_Init+0x158>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d107      	bne.n	80055f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	4313      	orrs	r3, r2
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b04      	cmp	r3, #4
 8005620:	d117      	bne.n	8005652 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb01 	bl	8005c3c <DMA_CheckFifoParam>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800564e:	2301      	movs	r3, #1
 8005650:	e016      	b.n	8005680 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fab8 	bl	8005bd0 <DMA_CalcBaseAndBitshift>
 8005660:	4603      	mov	r3, r0
 8005662:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	223f      	movs	r2, #63	; 0x3f
 800566a:	409a      	lsls	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	f010803f 	.word	0xf010803f

0800568c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Start_IT+0x26>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e040      	b.n	8005734 <HAL_DMA_Start_IT+0xa8>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d12f      	bne.n	8005726 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa4a 	bl	8005b74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	223f      	movs	r2, #63	; 0x3f
 80056e6:	409a      	lsls	r2, r3
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0216 	orr.w	r2, r2, #22
 80056fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e005      	b.n	8005732 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005748:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800574a:	f7fe f921 	bl	8003990 <HAL_GetTick>
 800574e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d008      	beq.n	800576e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2280      	movs	r2, #128	; 0x80
 8005760:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e052      	b.n	8005814 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0216 	bic.w	r2, r2, #22
 800577c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800578c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d103      	bne.n	800579e <HAL_DMA_Abort+0x62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0208 	bic.w	r2, r2, #8
 80057ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057be:	e013      	b.n	80057e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057c0:	f7fe f8e6 	bl	8003990 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d90c      	bls.n	80057e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2203      	movs	r2, #3
 80057d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e015      	b.n	8005814 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e4      	bne.n	80057c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	223f      	movs	r2, #63	; 0x3f
 80057fc:	409a      	lsls	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d004      	beq.n	800583a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2280      	movs	r2, #128	; 0x80
 8005834:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e00c      	b.n	8005854 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2205      	movs	r2, #5
 800583e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800586c:	4b8e      	ldr	r3, [pc, #568]	; (8005aa8 <HAL_DMA_IRQHandler+0x248>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a8e      	ldr	r2, [pc, #568]	; (8005aac <HAL_DMA_IRQHandler+0x24c>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	0a9b      	lsrs	r3, r3, #10
 8005878:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	2208      	movs	r2, #8
 800588c:	409a      	lsls	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0204 	bic.w	r2, r2, #4
 80058b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b8:	2208      	movs	r2, #8
 80058ba:	409a      	lsls	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	2201      	movs	r2, #1
 80058d2:	409a      	lsls	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4013      	ands	r3, r2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	2201      	movs	r2, #1
 80058f0:	409a      	lsls	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	f043 0202 	orr.w	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005906:	2204      	movs	r2, #4
 8005908:	409a      	lsls	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d012      	beq.n	8005938 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	2204      	movs	r2, #4
 8005926:	409a      	lsls	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593c:	2210      	movs	r2, #16
 800593e:	409a      	lsls	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d043      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d03c      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595a:	2210      	movs	r2, #16
 800595c:	409a      	lsls	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d018      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d108      	bne.n	8005990 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d024      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
 800598e:	e01f      	b.n	80059d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
 80059a0:	e016      	b.n	80059d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d107      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0208 	bic.w	r2, r2, #8
 80059be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	2220      	movs	r2, #32
 80059d6:	409a      	lsls	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 808f 	beq.w	8005b00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8087 	beq.w	8005b00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f6:	2220      	movs	r2, #32
 80059f8:	409a      	lsls	r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d136      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0216 	bic.w	r2, r2, #22
 8005a18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_DMA_IRQHandler+0x1da>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0208 	bic.w	r2, r2, #8
 8005a48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4e:	223f      	movs	r2, #63	; 0x3f
 8005a50:	409a      	lsls	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d07e      	beq.n	8005b6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
        }
        return;
 8005a76:	e079      	b.n	8005b6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d01d      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d031      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	4798      	blx	r3
 8005aa4:	e02c      	b.n	8005b00 <HAL_DMA_IRQHandler+0x2a0>
 8005aa6:	bf00      	nop
 8005aa8:	2000000c 	.word	0x2000000c
 8005aac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d023      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	4798      	blx	r3
 8005ac0:	e01e      	b.n	8005b00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10f      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0210 	bic.w	r2, r2, #16
 8005ade:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d032      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d022      	beq.n	8005b5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2205      	movs	r2, #5
 8005b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d307      	bcc.n	8005b48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f2      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x2cc>
 8005b46:	e000      	b.n	8005b4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
 8005b6a:	e000      	b.n	8005b6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b6c:	bf00      	nop
    }
  }
}
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d108      	bne.n	8005bb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bb2:	e007      	b.n	8005bc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	60da      	str	r2, [r3, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	3b10      	subs	r3, #16
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <DMA_CalcBaseAndBitshift+0x64>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <DMA_CalcBaseAndBitshift+0x68>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d909      	bls.n	8005c12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8005c10:	e007      	b.n	8005c22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	aaaaaaab 	.word	0xaaaaaaab
 8005c38:	0800c1b8 	.word	0x0800c1b8

08005c3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11f      	bne.n	8005c96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d856      	bhi.n	8005d0a <DMA_CheckFifoParam+0xce>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <DMA_CheckFifoParam+0x28>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c87 	.word	0x08005c87
 8005c6c:	08005c75 	.word	0x08005c75
 8005c70:	08005d0b 	.word	0x08005d0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d046      	beq.n	8005d0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c84:	e043      	b.n	8005d0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c8e:	d140      	bne.n	8005d12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c94:	e03d      	b.n	8005d12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	d121      	bne.n	8005ce4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d837      	bhi.n	8005d16 <DMA_CheckFifoParam+0xda>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <DMA_CheckFifoParam+0x70>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cc3 	.word	0x08005cc3
 8005cb4:	08005cbd 	.word	0x08005cbd
 8005cb8:	08005cd5 	.word	0x08005cd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc0:	e030      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d025      	beq.n	8005d1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd2:	e022      	b.n	8005d1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cdc:	d11f      	bne.n	8005d1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ce2:	e01c      	b.n	8005d1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d903      	bls.n	8005cf2 <DMA_CheckFifoParam+0xb6>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d003      	beq.n	8005cf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cf0:	e018      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf6:	e015      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00e      	beq.n	8005d22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
      break;
 8005d08:	e00b      	b.n	8005d22 <DMA_CheckFifoParam+0xe6>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e00a      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e008      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;
 8005d12:	bf00      	nop
 8005d14:	e006      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;
 8005d16:	bf00      	nop
 8005d18:	e004      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <DMA_CheckFifoParam+0xe8>
      break;
 8005d22:	bf00      	nop
    }
  } 
  
  return status; 
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop

08005d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	e16b      	b.n	8006028 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d50:	2201      	movs	r2, #1
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	f040 815a 	bne.w	8006022 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d005      	beq.n	8005d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d130      	bne.n	8005de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	2203      	movs	r2, #3
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f003 0201 	and.w	r2, r3, #1
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d017      	beq.n	8005e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	2203      	movs	r2, #3
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d123      	bne.n	8005e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	08da      	lsrs	r2, r3, #3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3208      	adds	r2, #8
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	220f      	movs	r2, #15
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	08da      	lsrs	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3208      	adds	r2, #8
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	2203      	movs	r2, #3
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 0203 	and.w	r2, r3, #3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80b4 	beq.w	8006022 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	4b60      	ldr	r3, [pc, #384]	; (8006040 <HAL_GPIO_Init+0x30c>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	4a5f      	ldr	r2, [pc, #380]	; (8006040 <HAL_GPIO_Init+0x30c>)
 8005ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eca:	4b5d      	ldr	r3, [pc, #372]	; (8006040 <HAL_GPIO_Init+0x30c>)
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ed6:	4a5b      	ldr	r2, [pc, #364]	; (8006044 <HAL_GPIO_Init+0x310>)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	3302      	adds	r3, #2
 8005ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	220f      	movs	r2, #15
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a52      	ldr	r2, [pc, #328]	; (8006048 <HAL_GPIO_Init+0x314>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d02b      	beq.n	8005f5a <HAL_GPIO_Init+0x226>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a51      	ldr	r2, [pc, #324]	; (800604c <HAL_GPIO_Init+0x318>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d025      	beq.n	8005f56 <HAL_GPIO_Init+0x222>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a50      	ldr	r2, [pc, #320]	; (8006050 <HAL_GPIO_Init+0x31c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d01f      	beq.n	8005f52 <HAL_GPIO_Init+0x21e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a4f      	ldr	r2, [pc, #316]	; (8006054 <HAL_GPIO_Init+0x320>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d019      	beq.n	8005f4e <HAL_GPIO_Init+0x21a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a4e      	ldr	r2, [pc, #312]	; (8006058 <HAL_GPIO_Init+0x324>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_GPIO_Init+0x216>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a4d      	ldr	r2, [pc, #308]	; (800605c <HAL_GPIO_Init+0x328>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00d      	beq.n	8005f46 <HAL_GPIO_Init+0x212>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a4c      	ldr	r2, [pc, #304]	; (8006060 <HAL_GPIO_Init+0x32c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <HAL_GPIO_Init+0x20e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a4b      	ldr	r2, [pc, #300]	; (8006064 <HAL_GPIO_Init+0x330>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d101      	bne.n	8005f3e <HAL_GPIO_Init+0x20a>
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	e00e      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	e00c      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f42:	2306      	movs	r3, #6
 8005f44:	e00a      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f46:	2305      	movs	r3, #5
 8005f48:	e008      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	e006      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e004      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e002      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_GPIO_Init+0x228>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	f002 0203 	and.w	r2, r2, #3
 8005f62:	0092      	lsls	r2, r2, #2
 8005f64:	4093      	lsls	r3, r2
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f6c:	4935      	ldr	r1, [pc, #212]	; (8006044 <HAL_GPIO_Init+0x310>)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	089b      	lsrs	r3, r3, #2
 8005f72:	3302      	adds	r3, #2
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f7a:	4b3b      	ldr	r3, [pc, #236]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	4013      	ands	r3, r2
 8005f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f9e:	4a32      	ldr	r2, [pc, #200]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fa4:	4b30      	ldr	r3, [pc, #192]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fc8:	4a27      	ldr	r2, [pc, #156]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fce:	4b26      	ldr	r3, [pc, #152]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <HAL_GPIO_Init+0x334>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800601c:	4a12      	ldr	r2, [pc, #72]	; (8006068 <HAL_GPIO_Init+0x334>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b0f      	cmp	r3, #15
 800602c:	f67f ae90 	bls.w	8005d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	3724      	adds	r7, #36	; 0x24
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40023800 	.word	0x40023800
 8006044:	40013800 	.word	0x40013800
 8006048:	40020000 	.word	0x40020000
 800604c:	40020400 	.word	0x40020400
 8006050:	40020800 	.word	0x40020800
 8006054:	40020c00 	.word	0x40020c00
 8006058:	40021000 	.word	0x40021000
 800605c:	40021400 	.word	0x40021400
 8006060:	40021800 	.word	0x40021800
 8006064:	40021c00 	.word	0x40021c00
 8006068:	40013c00 	.word	0x40013c00

0800606c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	887b      	ldrh	r3, [r7, #2]
 800607e:	4013      	ands	r3, r2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
 8006088:	e001      	b.n	800608e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	807b      	strh	r3, [r7, #2]
 80060a8:	4613      	mov	r3, r2
 80060aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060ac:	787b      	ldrb	r3, [r7, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060b8:	e003      	b.n	80060c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060ba:	887b      	ldrh	r3, [r7, #2]
 80060bc:	041a      	lsls	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	619a      	str	r2, [r3, #24]
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060e6:	4a05      	ldr	r2, [pc, #20]	; (80060fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fd fc36 	bl	8003960 <HAL_GPIO_EXTI_Callback>
  }
}
 80060f4:	bf00      	nop
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40013c00 	.word	0x40013c00

08006100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e12b      	b.n	800636a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fc f896 	bl	8002258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2224      	movs	r2, #36	; 0x24
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006164:	f000 fd80 	bl	8006c68 <HAL_RCC_GetPCLK1Freq>
 8006168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	4a81      	ldr	r2, [pc, #516]	; (8006374 <HAL_I2C_Init+0x274>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d807      	bhi.n	8006184 <HAL_I2C_Init+0x84>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a80      	ldr	r2, [pc, #512]	; (8006378 <HAL_I2C_Init+0x278>)
 8006178:	4293      	cmp	r3, r2
 800617a:	bf94      	ite	ls
 800617c:	2301      	movls	r3, #1
 800617e:	2300      	movhi	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	e006      	b.n	8006192 <HAL_I2C_Init+0x92>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a7d      	ldr	r2, [pc, #500]	; (800637c <HAL_I2C_Init+0x27c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	bf94      	ite	ls
 800618c:	2301      	movls	r3, #1
 800618e:	2300      	movhi	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e0e7      	b.n	800636a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a78      	ldr	r2, [pc, #480]	; (8006380 <HAL_I2C_Init+0x280>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0c9b      	lsrs	r3, r3, #18
 80061a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a6a      	ldr	r2, [pc, #424]	; (8006374 <HAL_I2C_Init+0x274>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d802      	bhi.n	80061d4 <HAL_I2C_Init+0xd4>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	3301      	adds	r3, #1
 80061d2:	e009      	b.n	80061e8 <HAL_I2C_Init+0xe8>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	4a69      	ldr	r2, [pc, #420]	; (8006384 <HAL_I2C_Init+0x284>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	099b      	lsrs	r3, r3, #6
 80061e6:	3301      	adds	r3, #1
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	495c      	ldr	r1, [pc, #368]	; (8006374 <HAL_I2C_Init+0x274>)
 8006204:	428b      	cmp	r3, r1
 8006206:	d819      	bhi.n	800623c <HAL_I2C_Init+0x13c>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1e59      	subs	r1, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	fbb1 f3f3 	udiv	r3, r1, r3
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800621c:	400b      	ands	r3, r1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_I2C_Init+0x138>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	1e59      	subs	r1, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006230:	3301      	adds	r3, #1
 8006232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006236:	e051      	b.n	80062dc <HAL_I2C_Init+0x1dc>
 8006238:	2304      	movs	r3, #4
 800623a:	e04f      	b.n	80062dc <HAL_I2C_Init+0x1dc>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d111      	bne.n	8006268 <HAL_I2C_Init+0x168>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	1e58      	subs	r0, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6859      	ldr	r1, [r3, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	440b      	add	r3, r1
 8006252:	fbb0 f3f3 	udiv	r3, r0, r3
 8006256:	3301      	adds	r3, #1
 8006258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625c:	2b00      	cmp	r3, #0
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e012      	b.n	800628e <HAL_I2C_Init+0x18e>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1e58      	subs	r0, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6859      	ldr	r1, [r3, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	440b      	add	r3, r1
 8006276:	0099      	lsls	r1, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	fbb0 f3f3 	udiv	r3, r0, r3
 800627e:	3301      	adds	r3, #1
 8006280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_I2C_Init+0x196>
 8006292:	2301      	movs	r3, #1
 8006294:	e022      	b.n	80062dc <HAL_I2C_Init+0x1dc>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10e      	bne.n	80062bc <HAL_I2C_Init+0x1bc>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1e58      	subs	r0, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6859      	ldr	r1, [r3, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	440b      	add	r3, r1
 80062ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b0:	3301      	adds	r3, #1
 80062b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ba:	e00f      	b.n	80062dc <HAL_I2C_Init+0x1dc>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1e58      	subs	r0, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6859      	ldr	r1, [r3, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	0099      	lsls	r1, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d2:	3301      	adds	r3, #1
 80062d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	6809      	ldr	r1, [r1, #0]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69da      	ldr	r2, [r3, #28]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800630a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6911      	ldr	r1, [r2, #16]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68d2      	ldr	r2, [r2, #12]
 8006316:	4311      	orrs	r1, r2
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	430b      	orrs	r3, r1
 800631e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	000186a0 	.word	0x000186a0
 8006378:	001e847f 	.word	0x001e847f
 800637c:	003d08ff 	.word	0x003d08ff
 8006380:	431bde83 	.word	0x431bde83
 8006384:	10624dd3 	.word	0x10624dd3

08006388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e267      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d075      	beq.n	8006492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063a6:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f003 030c 	and.w	r3, r3, #12
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d00c      	beq.n	80063cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063b2:	4b85      	ldr	r3, [pc, #532]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d112      	bne.n	80063e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063be:	4b82      	ldr	r3, [pc, #520]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ca:	d10b      	bne.n	80063e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063cc:	4b7e      	ldr	r3, [pc, #504]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d05b      	beq.n	8006490 <HAL_RCC_OscConfig+0x108>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d157      	bne.n	8006490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e242      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d106      	bne.n	80063fc <HAL_RCC_OscConfig+0x74>
 80063ee:	4b76      	ldr	r3, [pc, #472]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a75      	ldr	r2, [pc, #468]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e01d      	b.n	8006438 <HAL_RCC_OscConfig+0xb0>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006404:	d10c      	bne.n	8006420 <HAL_RCC_OscConfig+0x98>
 8006406:	4b70      	ldr	r3, [pc, #448]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a6f      	ldr	r2, [pc, #444]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800640c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	4b6d      	ldr	r3, [pc, #436]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a6c      	ldr	r2, [pc, #432]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0xb0>
 8006420:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a68      	ldr	r2, [pc, #416]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	4b66      	ldr	r3, [pc, #408]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a65      	ldr	r2, [pc, #404]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006440:	f7fd faa6 	bl	8003990 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006448:	f7fd faa2 	bl	8003990 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e207      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0xc0>
 8006466:	e014      	b.n	8006492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006468:	f7fd fa92 	bl	8003990 <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	e008      	b.n	8006482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006470:	f7fd fa8e 	bl	8003990 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b64      	cmp	r3, #100	; 0x64
 800647c:	d901      	bls.n	8006482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1f3      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006482:	4b51      	ldr	r3, [pc, #324]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f0      	bne.n	8006470 <HAL_RCC_OscConfig+0xe8>
 800648e:	e000      	b.n	8006492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d063      	beq.n	8006566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800649e:	4b4a      	ldr	r3, [pc, #296]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 030c 	and.w	r3, r3, #12
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00b      	beq.n	80064c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064aa:	4b47      	ldr	r3, [pc, #284]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	d11c      	bne.n	80064f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d116      	bne.n	80064f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	4b41      	ldr	r3, [pc, #260]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCC_OscConfig+0x152>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d001      	beq.n	80064da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e1c7      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064da:	4b3b      	ldr	r3, [pc, #236]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4937      	ldr	r1, [pc, #220]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	e03a      	b.n	8006566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d020      	beq.n	800653a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064f8:	4b34      	ldr	r3, [pc, #208]	; (80065cc <HAL_RCC_OscConfig+0x244>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fd fa47 	bl	8003990 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006506:	f7fd fa43 	bl	8003990 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e1a8      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006518:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4925      	ldr	r1, [pc, #148]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]
 8006538:	e015      	b.n	8006566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <HAL_RCC_OscConfig+0x244>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fd fa26 	bl	8003990 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006548:	f7fd fa22 	bl	8003990 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e187      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d036      	beq.n	80065e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <HAL_RCC_OscConfig+0x248>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fd fa06 	bl	8003990 <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	e008      	b.n	800659a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006588:	f7fd fa02 	bl	8003990 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	2b02      	cmp	r3, #2
 8006594:	d901      	bls.n	800659a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e167      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_OscConfig+0x240>)
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0f0      	beq.n	8006588 <HAL_RCC_OscConfig+0x200>
 80065a6:	e01b      	b.n	80065e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x248>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ae:	f7fd f9ef 	bl	8003990 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	e00e      	b.n	80065d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b6:	f7fd f9eb 	bl	8003990 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d907      	bls.n	80065d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e150      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
 80065c8:	40023800 	.word	0x40023800
 80065cc:	42470000 	.word	0x42470000
 80065d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d4:	4b88      	ldr	r3, [pc, #544]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80065d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ea      	bne.n	80065b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8097 	beq.w	800671c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ee:	2300      	movs	r3, #0
 80065f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f2:	4b81      	ldr	r3, [pc, #516]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	4b7d      	ldr	r3, [pc, #500]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	4a7c      	ldr	r2, [pc, #496]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	6413      	str	r3, [r2, #64]	; 0x40
 800660e:	4b7a      	ldr	r3, [pc, #488]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661e:	4b77      	ldr	r3, [pc, #476]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d118      	bne.n	800665c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662a:	4b74      	ldr	r3, [pc, #464]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a73      	ldr	r2, [pc, #460]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006636:	f7fd f9ab 	bl	8003990 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	e008      	b.n	8006650 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fd f9a7 	bl	8003990 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e10c      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	4b6a      	ldr	r3, [pc, #424]	; (80067fc <HAL_RCC_OscConfig+0x474>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HAL_RCC_OscConfig+0x2ea>
 8006664:	4b64      	ldr	r3, [pc, #400]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a63      	ldr	r2, [pc, #396]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f043 0301 	orr.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	e01c      	b.n	80066ac <HAL_RCC_OscConfig+0x324>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b05      	cmp	r3, #5
 8006678:	d10c      	bne.n	8006694 <HAL_RCC_OscConfig+0x30c>
 800667a:	4b5f      	ldr	r3, [pc, #380]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	4a5e      	ldr	r2, [pc, #376]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6713      	str	r3, [r2, #112]	; 0x70
 8006686:	4b5c      	ldr	r3, [pc, #368]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	6713      	str	r3, [r2, #112]	; 0x70
 8006692:	e00b      	b.n	80066ac <HAL_RCC_OscConfig+0x324>
 8006694:	4b58      	ldr	r3, [pc, #352]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006698:	4a57      	ldr	r2, [pc, #348]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800669a:	f023 0301 	bic.w	r3, r3, #1
 800669e:	6713      	str	r3, [r2, #112]	; 0x70
 80066a0:	4b55      	ldr	r3, [pc, #340]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	4a54      	ldr	r2, [pc, #336]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066a6:	f023 0304 	bic.w	r3, r3, #4
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fd f96c 	bl	8003990 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fd f968 	bl	8003990 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0cb      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	4b49      	ldr	r3, [pc, #292]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0ee      	beq.n	80066bc <HAL_RCC_OscConfig+0x334>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066e0:	f7fd f956 	bl	8003990 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e6:	e00a      	b.n	80066fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e8:	f7fd f952 	bl	8003990 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0b5      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fe:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ee      	bne.n	80066e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800670a:	7dfb      	ldrb	r3, [r7, #23]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b39      	ldr	r3, [pc, #228]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	4a38      	ldr	r2, [pc, #224]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80a1 	beq.w	8006868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006726:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b08      	cmp	r3, #8
 8006730:	d05c      	beq.n	80067ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d141      	bne.n	80067be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7fd f926 	bl	8003990 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006748:	f7fd f922 	bl	8003990 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e087      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	491b      	ldr	r1, [pc, #108]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 8006792:	2201      	movs	r2, #1
 8006794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fd f8fb 	bl	8003990 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679e:	f7fd f8f7 	bl	8003990 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e05c      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0f0      	beq.n	800679e <HAL_RCC_OscConfig+0x416>
 80067bc:	e054      	b.n	8006868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCC_OscConfig+0x478>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c4:	f7fd f8e4 	bl	8003990 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067cc:	f7fd f8e0 	bl	8003990 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e045      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067de:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <HAL_RCC_OscConfig+0x470>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x444>
 80067ea:	e03d      	b.n	8006868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d107      	bne.n	8006804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e038      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
 80067f8:	40023800 	.word	0x40023800
 80067fc:	40007000 	.word	0x40007000
 8006800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4ec>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d028      	beq.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d121      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d11a      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800683a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800683c:	4293      	cmp	r3, r2
 800683e:	d111      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684a:	085b      	lsrs	r3, r3, #1
 800684c:	3b01      	subs	r3, #1
 800684e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006850:	429a      	cmp	r2, r3
 8006852:	d107      	bne.n	8006864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023800 	.word	0x40023800

08006878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0cc      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d90c      	bls.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d001      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0b8      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d020      	beq.n	8006902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068cc:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a58      	ldr	r2, [pc, #352]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e4:	4b53      	ldr	r3, [pc, #332]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a52      	ldr	r2, [pc, #328]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f0:	4b50      	ldr	r3, [pc, #320]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	494d      	ldr	r1, [pc, #308]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d044      	beq.n	8006998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d119      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e07f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d003      	beq.n	8006936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006932:	2b03      	cmp	r3, #3
 8006934:	d107      	bne.n	8006946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006936:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e06f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006946:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e067      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 0203 	bic.w	r2, r3, #3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4934      	ldr	r1, [pc, #208]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	4313      	orrs	r3, r2
 8006966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006968:	f7fd f812 	bl	8003990 <HAL_GetTick>
 800696c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	e00a      	b.n	8006986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006970:	f7fd f80e 	bl	8003990 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e04f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 020c 	and.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	429a      	cmp	r2, r3
 8006996:	d1eb      	bne.n	8006970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d20c      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e032      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4916      	ldr	r1, [pc, #88]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	490e      	ldr	r1, [pc, #56]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069fe:	f000 f821 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	490a      	ldr	r1, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 8006a10:	5ccb      	ldrb	r3, [r1, r3]
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fd ff16 	bl	8004850 <HAL_InitTick>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023c00 	.word	0x40023c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	0800c1a0 	.word	0x0800c1a0
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	20000010 	.word	0x20000010

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a48:	b094      	sub	sp, #80	; 0x50
 8006a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a50:	2300      	movs	r3, #0
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a54:	2300      	movs	r3, #0
 8006a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a5c:	4b79      	ldr	r3, [pc, #484]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 030c 	and.w	r3, r3, #12
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d00d      	beq.n	8006a84 <HAL_RCC_GetSysClockFreq+0x40>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	f200 80e1 	bhi.w	8006c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x34>
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d003      	beq.n	8006a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a76:	e0db      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b73      	ldr	r3, [pc, #460]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a7c:	e0db      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a7e:	4b73      	ldr	r3, [pc, #460]	; (8006c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8006a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a82:	e0d8      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a84:	4b6f      	ldr	r3, [pc, #444]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a8e:	4b6d      	ldr	r3, [pc, #436]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d063      	beq.n	8006b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	099b      	lsrs	r3, r3, #6
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aac:	633b      	str	r3, [r7, #48]	; 0x30
 8006aae:	2300      	movs	r3, #0
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006ab6:	4622      	mov	r2, r4
 8006ab8:	462b      	mov	r3, r5
 8006aba:	f04f 0000 	mov.w	r0, #0
 8006abe:	f04f 0100 	mov.w	r1, #0
 8006ac2:	0159      	lsls	r1, r3, #5
 8006ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac8:	0150      	lsls	r0, r2, #5
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4621      	mov	r1, r4
 8006ad0:	1a51      	subs	r1, r2, r1
 8006ad2:	6139      	str	r1, [r7, #16]
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ae8:	4659      	mov	r1, fp
 8006aea:	018b      	lsls	r3, r1, #6
 8006aec:	4651      	mov	r1, sl
 8006aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006af2:	4651      	mov	r1, sl
 8006af4:	018a      	lsls	r2, r1, #6
 8006af6:	4651      	mov	r1, sl
 8006af8:	ebb2 0801 	subs.w	r8, r2, r1
 8006afc:	4659      	mov	r1, fp
 8006afe:	eb63 0901 	sbc.w	r9, r3, r1
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b16:	4690      	mov	r8, r2
 8006b18:	4699      	mov	r9, r3
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	eb18 0303 	adds.w	r3, r8, r3
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	462b      	mov	r3, r5
 8006b24:	eb49 0303 	adc.w	r3, r9, r3
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b36:	4629      	mov	r1, r5
 8006b38:	024b      	lsls	r3, r1, #9
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b40:	4621      	mov	r1, r4
 8006b42:	024a      	lsls	r2, r1, #9
 8006b44:	4610      	mov	r0, r2
 8006b46:	4619      	mov	r1, r3
 8006b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b54:	f7fa f828 	bl	8000ba8 <__aeabi_uldivmod>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b60:	e058      	b.n	8006c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b62:	4b38      	ldr	r3, [pc, #224]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	2200      	movs	r2, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b72:	623b      	str	r3, [r7, #32]
 8006b74:	2300      	movs	r3, #0
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
 8006b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b7c:	4642      	mov	r2, r8
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f04f 0000 	mov.w	r0, #0
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	0159      	lsls	r1, r3, #5
 8006b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b8e:	0150      	lsls	r0, r2, #5
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4641      	mov	r1, r8
 8006b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8006bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	00eb      	lsls	r3, r5, #3
 8006bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bca:	00e2      	lsls	r2, r4, #3
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	4643      	mov	r3, r8
 8006bd2:	18e3      	adds	r3, r4, r3
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	464b      	mov	r3, r9
 8006bd8:	eb45 0303 	adc.w	r3, r5, r3
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bea:	4629      	mov	r1, r5
 8006bec:	028b      	lsls	r3, r1, #10
 8006bee:	4621      	mov	r1, r4
 8006bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	028a      	lsls	r2, r1, #10
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bfe:	2200      	movs	r2, #0
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	61fa      	str	r2, [r7, #28]
 8006c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c08:	f7f9 ffce 	bl	8000ba8 <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4613      	mov	r3, r2
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	3301      	adds	r3, #1
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c2e:	e002      	b.n	8006c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3750      	adds	r7, #80	; 0x50
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800
 8006c48:	00f42400 	.word	0x00f42400
 8006c4c:	007a1200 	.word	0x007a1200

08006c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c54:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c56:	681b      	ldr	r3, [r3, #0]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000000c 	.word	0x2000000c

08006c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c6c:	f7ff fff0 	bl	8006c50 <HAL_RCC_GetHCLKFreq>
 8006c70:	4602      	mov	r2, r0
 8006c72:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	0a9b      	lsrs	r3, r3, #10
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	4903      	ldr	r1, [pc, #12]	; (8006c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c7e:	5ccb      	ldrb	r3, [r1, r3]
 8006c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	0800c1b0 	.word	0x0800c1b0

08006c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c94:	f7ff ffdc 	bl	8006c50 <HAL_RCC_GetHCLKFreq>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	0b5b      	lsrs	r3, r3, #13
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	4903      	ldr	r1, [pc, #12]	; (8006cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca6:	5ccb      	ldrb	r3, [r1, r3]
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	0800c1b0 	.word	0x0800c1b0

08006cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d035      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ce0:	4b62      	ldr	r3, [pc, #392]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce6:	f7fc fe53 	bl	8003990 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cec:	e008      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cee:	f7fc fe4f 	bl	8003990 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e0b0      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d00:	4b5b      	ldr	r3, [pc, #364]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f0      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	019a      	lsls	r2, r3, #6
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	071b      	lsls	r3, r3, #28
 8006d18:	4955      	ldr	r1, [pc, #340]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d20:	4b52      	ldr	r3, [pc, #328]	; (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d26:	f7fc fe33 	bl	8003990 <HAL_GetTick>
 8006d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d2e:	f7fc fe2f 	bl	8003990 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e090      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d40:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0f0      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8083 	beq.w	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	4b44      	ldr	r3, [pc, #272]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	4a43      	ldr	r2, [pc, #268]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6413      	str	r3, [r2, #64]	; 0x40
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d76:	4b3f      	ldr	r3, [pc, #252]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a3e      	ldr	r2, [pc, #248]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d82:	f7fc fe05 	bl	8003990 <HAL_GetTick>
 8006d86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d8a:	f7fc fe01 	bl	8003990 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e062      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d9c:	4b35      	ldr	r3, [pc, #212]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006da8:	4b31      	ldr	r3, [pc, #196]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d02f      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d028      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dd0:	4b29      	ldr	r3, [pc, #164]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd6:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ddc:	4a24      	ldr	r2, [pc, #144]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006de2:	4b23      	ldr	r3, [pc, #140]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d114      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006dee:	f7fc fdcf 	bl	8003990 <HAL_GetTick>
 8006df2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fc fdcb 	bl	8003990 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e02a      	b.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0c:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e24:	d10d      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e26:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3a:	490d      	ldr	r1, [pc, #52]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	e005      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e42:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e4c:	6093      	str	r3, [r2, #8]
 8006e4e:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e5a:	4905      	ldr	r1, [pc, #20]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	42470068 	.word	0x42470068
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40007000 	.word	0x40007000
 8006e78:	42470e40 	.word	0x42470e40

08006e7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e073      	b.n	8006f7a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7f5b      	ldrb	r3, [r3, #29]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fc fe16 	bl	8003ad4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d055      	beq.n	8006f68 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	22ca      	movs	r2, #202	; 0xca
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2253      	movs	r2, #83	; 0x53
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f99d 	bl	800720c <RTC_EnterInitMode>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d12c      	bne.n	8006f36 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6899      	ldr	r1, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68d2      	ldr	r2, [r2, #12]
 8006f16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6919      	ldr	r1, [r3, #16]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	041a      	lsls	r2, r3, #16
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9a4 	bl	800727a <RTC_ExitInitMode>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d110      	bne.n	8006f5e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	22ff      	movs	r2, #255	; 0xff
 8006f64:	625a      	str	r2, [r3, #36]	; 0x24
 8006f66:	e001      	b.n	8006f6c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f82:	b590      	push	{r4, r7, lr}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	7f1b      	ldrb	r3, [r3, #28]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_RTC_SetTime+0x1c>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e087      	b.n	80070ae <HAL_RTC_SetTime+0x12c>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d126      	bne.n	8006ffe <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f97b 	bl	80072c4 <RTC_ByteToBcd2>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f974 	bl	80072c4 <RTC_ByteToBcd2>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006fe0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	789b      	ldrb	r3, [r3, #2]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f96c 	bl	80072c4 <RTC_ByteToBcd2>
 8006fec:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006fee:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e018      	b.n	8007030 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2200      	movs	r2, #0
 8007010:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800701e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007024:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	78db      	ldrb	r3, [r3, #3]
 800702a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800702c:	4313      	orrs	r3, r2
 800702e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	22ca      	movs	r2, #202	; 0xca
 8007036:	625a      	str	r2, [r3, #36]	; 0x24
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2253      	movs	r2, #83	; 0x53
 800703e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f8e3 	bl	800720c <RTC_EnterInitMode>
 8007046:	4603      	mov	r3, r0
 8007048:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800704a:	7cfb      	ldrb	r3, [r7, #19]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d120      	bne.n	8007092 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800705a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800705e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800706e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6899      	ldr	r1, [r3, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	431a      	orrs	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f8f6 	bl	800727a <RTC_ExitInitMode>
 800708e:	4603      	mov	r3, r0
 8007090:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007092:	7cfb      	ldrb	r3, [r7, #19]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2201      	movs	r2, #1
 800709c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	22ff      	movs	r2, #255	; 0xff
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]

  return status;
 80070ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}

080070b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80070b6:	b590      	push	{r4, r7, lr}
 80070b8:	b087      	sub	sp, #28
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	7f1b      	ldrb	r3, [r3, #28]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_RTC_SetDate+0x1c>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e071      	b.n	80071b6 <HAL_RTC_SetDate+0x100>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2202      	movs	r2, #2
 80070dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10e      	bne.n	8007102 <HAL_RTC_SetDate+0x4c>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	f023 0310 	bic.w	r3, r3, #16
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	330a      	adds	r3, #10
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	78db      	ldrb	r3, [r3, #3]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f8d9 	bl	80072c4 <RTC_ByteToBcd2>
 8007112:	4603      	mov	r3, r0
 8007114:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f8d2 	bl	80072c4 <RTC_ByteToBcd2>
 8007120:	4603      	mov	r3, r0
 8007122:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007124:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	789b      	ldrb	r3, [r3, #2]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f8ca 	bl	80072c4 <RTC_ByteToBcd2>
 8007130:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007132:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e00e      	b.n	8007160 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	785b      	ldrb	r3, [r3, #1]
 800714c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800714e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007154:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	22ca      	movs	r2, #202	; 0xca
 8007166:	625a      	str	r2, [r3, #36]	; 0x24
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2253      	movs	r2, #83	; 0x53
 800716e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f84b 	bl	800720c <RTC_EnterInitMode>
 8007176:	4603      	mov	r3, r0
 8007178:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800717a:	7cfb      	ldrb	r3, [r7, #19]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800718e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f872 	bl	800727a <RTC_ExitInitMode>
 8007196:	4603      	mov	r3, r0
 8007198:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2201      	movs	r2, #1
 80071a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	22ff      	movs	r2, #255	; 0xff
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]

  return status;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
	...

080071c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <HAL_RTC_WaitForSynchro+0x48>)
 80071d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071d4:	f7fc fbdc 	bl	8003990 <HAL_GetTick>
 80071d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071da:	e009      	b.n	80071f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071dc:	f7fc fbd8 	bl	8003990 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ea:	d901      	bls.n	80071f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e007      	b.n	8007200 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0ee      	beq.n	80071dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	00017f5f 	.word	0x00017f5f

0800720c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d122      	bne.n	8007270 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007238:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800723a:	f7fc fba9 	bl	8003990 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007240:	e00c      	b.n	800725c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007242:	f7fc fba5 	bl	8003990 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007250:	d904      	bls.n	800725c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2204      	movs	r2, #4
 8007256:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <RTC_EnterInitMode+0x64>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d1e8      	bne.n	8007242 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007294:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff8b 	bl	80071c0 <HAL_RTC_WaitForSynchro>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2204      	movs	r2, #4
 80072b4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80072d2:	e005      	b.n	80072e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	3b0a      	subs	r3, #10
 80072de:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d8f6      	bhi.n	80072d4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	b2db      	uxtb	r3, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e041      	b.n	8007396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fd f858 	bl	80043dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3304      	adds	r3, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f000 fcd2 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d001      	beq.n	80073b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e04e      	b.n	8007456 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a23      	ldr	r2, [pc, #140]	; (8007464 <HAL_TIM_Base_Start_IT+0xc4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d022      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073e2:	d01d      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <HAL_TIM_Base_Start_IT+0xc8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1e      	ldr	r2, [pc, #120]	; (800746c <HAL_TIM_Base_Start_IT+0xcc>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <HAL_TIM_Base_Start_IT+0xd0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_TIM_Base_Start_IT+0xd4>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a19      	ldr	r2, [pc, #100]	; (8007478 <HAL_TIM_Base_Start_IT+0xd8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_TIM_Base_Start_IT+0x80>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_TIM_Base_Start_IT+0xdc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d111      	bne.n	8007444 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b06      	cmp	r3, #6
 8007430:	d010      	beq.n	8007454 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f042 0201 	orr.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007442:	e007      	b.n	8007454 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40010000 	.word	0x40010000
 8007468:	40000400 	.word	0x40000400
 800746c:	40000800 	.word	0x40000800
 8007470:	40000c00 	.word	0x40000c00
 8007474:	40010400 	.word	0x40010400
 8007478:	40014000 	.word	0x40014000
 800747c:	40001800 	.word	0x40001800

08007480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e041      	b.n	8007516 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f839 	bl	800751e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f000 fc12 	bl	8007ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <HAL_TIM_PWM_Start+0x24>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	bf14      	ite	ne
 8007550:	2301      	movne	r3, #1
 8007552:	2300      	moveq	r3, #0
 8007554:	b2db      	uxtb	r3, r3
 8007556:	e022      	b.n	800759e <HAL_TIM_PWM_Start+0x6a>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b04      	cmp	r3, #4
 800755c:	d109      	bne.n	8007572 <HAL_TIM_PWM_Start+0x3e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b01      	cmp	r3, #1
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	e015      	b.n	800759e <HAL_TIM_PWM_Start+0x6a>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b08      	cmp	r3, #8
 8007576:	d109      	bne.n	800758c <HAL_TIM_PWM_Start+0x58>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	bf14      	ite	ne
 8007584:	2301      	movne	r3, #1
 8007586:	2300      	moveq	r3, #0
 8007588:	b2db      	uxtb	r3, r3
 800758a:	e008      	b.n	800759e <HAL_TIM_PWM_Start+0x6a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e07c      	b.n	80076a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x82>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075b4:	e013      	b.n	80075de <HAL_TIM_PWM_Start+0xaa>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_PWM_Start+0x92>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075c4:	e00b      	b.n	80075de <HAL_TIM_PWM_Start+0xaa>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_PWM_Start+0xa2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d4:	e003      	b.n	80075de <HAL_TIM_PWM_Start+0xaa>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2201      	movs	r2, #1
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fe74 	bl	80082d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a2d      	ldr	r2, [pc, #180]	; (80076a8 <HAL_TIM_PWM_Start+0x174>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIM_PWM_Start+0xcc>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a2c      	ldr	r2, [pc, #176]	; (80076ac <HAL_TIM_PWM_Start+0x178>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d101      	bne.n	8007604 <HAL_TIM_PWM_Start+0xd0>
 8007600:	2301      	movs	r3, #1
 8007602:	e000      	b.n	8007606 <HAL_TIM_PWM_Start+0xd2>
 8007604:	2300      	movs	r3, #0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a22      	ldr	r2, [pc, #136]	; (80076a8 <HAL_TIM_PWM_Start+0x174>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d022      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762c:	d01d      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <HAL_TIM_PWM_Start+0x17c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d018      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <HAL_TIM_PWM_Start+0x180>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_TIM_PWM_Start+0x184>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00e      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a16      	ldr	r2, [pc, #88]	; (80076ac <HAL_TIM_PWM_Start+0x178>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d009      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_TIM_PWM_Start+0x188>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d004      	beq.n	800766a <HAL_TIM_PWM_Start+0x136>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_TIM_PWM_Start+0x18c>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d111      	bne.n	800768e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2b06      	cmp	r3, #6
 800767a:	d010      	beq.n	800769e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	e007      	b.n	800769e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40010400 	.word	0x40010400
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40001800 	.word	0x40001800

080076c4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fdfc 	bl	80082d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a2e      	ldr	r2, [pc, #184]	; (800779c <HAL_TIM_PWM_Stop+0xd8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d004      	beq.n	80076f0 <HAL_TIM_PWM_Stop+0x2c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <HAL_TIM_PWM_Stop+0xdc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d101      	bne.n	80076f4 <HAL_TIM_PWM_Stop+0x30>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e000      	b.n	80076f6 <HAL_TIM_PWM_Stop+0x32>
 80076f4:	2300      	movs	r3, #0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d017      	beq.n	800772a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	f241 1311 	movw	r3, #4369	; 0x1111
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10f      	bne.n	800772a <HAL_TIM_PWM_Stop+0x66>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	f240 4344 	movw	r3, #1092	; 0x444
 8007714:	4013      	ands	r3, r2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d107      	bne.n	800772a <HAL_TIM_PWM_Stop+0x66>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a1a      	ldr	r2, [r3, #32]
 8007730:	f241 1311 	movw	r3, #4369	; 0x1111
 8007734:	4013      	ands	r3, r2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10f      	bne.n	800775a <HAL_TIM_PWM_Stop+0x96>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a1a      	ldr	r2, [r3, #32]
 8007740:	f240 4344 	movw	r3, #1092	; 0x444
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d107      	bne.n	800775a <HAL_TIM_PWM_Stop+0x96>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Stop+0xa6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007768:	e013      	b.n	8007792 <HAL_TIM_PWM_Stop+0xce>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Stop+0xb6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007778:	e00b      	b.n	8007792 <HAL_TIM_PWM_Stop+0xce>
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d104      	bne.n	800778a <HAL_TIM_PWM_Stop+0xc6>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007788:	e003      	b.n	8007792 <HAL_TIM_PWM_Stop+0xce>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40010000 	.word	0x40010000
 80077a0:	40010400 	.word	0x40010400

080077a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d020      	beq.n	8007808 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01b      	beq.n	8007808 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0202 	mvn.w	r2, #2
 80077d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa5b 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa4d 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa5e 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d020      	beq.n	8007854 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01b      	beq.n	8007854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0204 	mvn.w	r2, #4
 8007824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa35 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa27 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa38 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d020      	beq.n	80078a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01b      	beq.n	80078a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0208 	mvn.w	r2, #8
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2204      	movs	r2, #4
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa0f 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa01 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa12 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d020      	beq.n	80078ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01b      	beq.n	80078ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0210 	mvn.w	r2, #16
 80078bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2208      	movs	r2, #8
 80078c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f9e9 	bl	8007caa <HAL_TIM_IC_CaptureCallback>
 80078d8:	e005      	b.n	80078e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9db 	bl	8007c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9ec 	bl	8007cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0201 	mvn.w	r2, #1
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fc f81c 	bl	8003948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00c      	beq.n	8007934 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fd7c 	bl	800842c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00c      	beq.n	8007958 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9bd 	bl	8007cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f06f 0220 	mvn.w	r2, #32
 8007974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fd4e 	bl	8008418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0ae      	b.n	8007b00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b0c      	cmp	r3, #12
 80079ae:	f200 809f 	bhi.w	8007af0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079ed 	.word	0x080079ed
 80079bc:	08007af1 	.word	0x08007af1
 80079c0:	08007af1 	.word	0x08007af1
 80079c4:	08007af1 	.word	0x08007af1
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007af1 	.word	0x08007af1
 80079d0:	08007af1 	.word	0x08007af1
 80079d4:	08007af1 	.word	0x08007af1
 80079d8:	08007a6f 	.word	0x08007a6f
 80079dc:	08007af1 	.word	0x08007af1
 80079e0:	08007af1 	.word	0x08007af1
 80079e4:	08007af1 	.word	0x08007af1
 80079e8:	08007aaf 	.word	0x08007aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fa24 	bl	8007e40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0208 	orr.w	r2, r2, #8
 8007a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0204 	bic.w	r2, r2, #4
 8007a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6999      	ldr	r1, [r3, #24]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	619a      	str	r2, [r3, #24]
      break;
 8007a2a:	e064      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fa74 	bl	8007f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6999      	ldr	r1, [r3, #24]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	021a      	lsls	r2, r3, #8
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	619a      	str	r2, [r3, #24]
      break;
 8007a6c:	e043      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 fac9 	bl	800800c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	69da      	ldr	r2, [r3, #28]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f042 0208 	orr.w	r2, r2, #8
 8007a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0204 	bic.w	r2, r2, #4
 8007a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69d9      	ldr	r1, [r3, #28]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	61da      	str	r2, [r3, #28]
      break;
 8007aac:	e023      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68b9      	ldr	r1, [r7, #8]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fb1d 	bl	80080f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69d9      	ldr	r1, [r3, #28]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	021a      	lsls	r2, r3, #8
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	61da      	str	r2, [r3, #28]
      break;
 8007aee:	e002      	b.n	8007af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	75fb      	strb	r3, [r7, #23]
      break;
 8007af4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_TIM_ConfigClockSource+0x1c>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e0b4      	b.n	8007c8e <HAL_TIM_ConfigClockSource+0x186>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b5c:	d03e      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0xd4>
 8007b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b62:	f200 8087 	bhi.w	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6a:	f000 8086 	beq.w	8007c7a <HAL_TIM_ConfigClockSource+0x172>
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	d87f      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b70      	cmp	r3, #112	; 0x70
 8007b76:	d01a      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0xa6>
 8007b78:	2b70      	cmp	r3, #112	; 0x70
 8007b7a:	d87b      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b7c:	2b60      	cmp	r3, #96	; 0x60
 8007b7e:	d050      	beq.n	8007c22 <HAL_TIM_ConfigClockSource+0x11a>
 8007b80:	2b60      	cmp	r3, #96	; 0x60
 8007b82:	d877      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b84:	2b50      	cmp	r3, #80	; 0x50
 8007b86:	d03c      	beq.n	8007c02 <HAL_TIM_ConfigClockSource+0xfa>
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d873      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b8c:	2b40      	cmp	r3, #64	; 0x40
 8007b8e:	d058      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x13a>
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d86f      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b94:	2b30      	cmp	r3, #48	; 0x30
 8007b96:	d064      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x15a>
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d86b      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007b9c:	2b20      	cmp	r3, #32
 8007b9e:	d060      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x15a>
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d867      	bhi.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d05c      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x15a>
 8007ba8:	2b10      	cmp	r3, #16
 8007baa:	d05a      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x15a>
 8007bac:	e062      	b.n	8007c74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bbe:	f000 fb69 	bl	8008294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	609a      	str	r2, [r3, #8]
      break;
 8007bda:	e04f      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bec:	f000 fb52 	bl	8008294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bfe:	609a      	str	r2, [r3, #8]
      break;
 8007c00:	e03c      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f000 fac6 	bl	80081a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2150      	movs	r1, #80	; 0x50
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fb1f 	bl	800825e <TIM_ITRx_SetConfig>
      break;
 8007c20:	e02c      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f000 fae5 	bl	80081fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2160      	movs	r1, #96	; 0x60
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fb0f 	bl	800825e <TIM_ITRx_SetConfig>
      break;
 8007c40:	e01c      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f000 faa6 	bl	80081a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2140      	movs	r1, #64	; 0x40
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 faff 	bl	800825e <TIM_ITRx_SetConfig>
      break;
 8007c60:	e00c      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f000 faf6 	bl	800825e <TIM_ITRx_SetConfig>
      break;
 8007c72:	e003      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	73fb      	strb	r3, [r7, #15]
      break;
 8007c78:	e000      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a46      	ldr	r2, [pc, #280]	; (8007e14 <TIM_Base_SetConfig+0x12c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d06:	d00f      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a43      	ldr	r2, [pc, #268]	; (8007e18 <TIM_Base_SetConfig+0x130>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00b      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a42      	ldr	r2, [pc, #264]	; (8007e1c <TIM_Base_SetConfig+0x134>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d007      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a41      	ldr	r2, [pc, #260]	; (8007e20 <TIM_Base_SetConfig+0x138>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d003      	beq.n	8007d28 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a40      	ldr	r2, [pc, #256]	; (8007e24 <TIM_Base_SetConfig+0x13c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d108      	bne.n	8007d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a35      	ldr	r2, [pc, #212]	; (8007e14 <TIM_Base_SetConfig+0x12c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d02b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d48:	d027      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a32      	ldr	r2, [pc, #200]	; (8007e18 <TIM_Base_SetConfig+0x130>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d023      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a31      	ldr	r2, [pc, #196]	; (8007e1c <TIM_Base_SetConfig+0x134>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d01f      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <TIM_Base_SetConfig+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a2f      	ldr	r2, [pc, #188]	; (8007e24 <TIM_Base_SetConfig+0x13c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d017      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2e      	ldr	r2, [pc, #184]	; (8007e28 <TIM_Base_SetConfig+0x140>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <TIM_Base_SetConfig+0x144>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00f      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	; (8007e30 <TIM_Base_SetConfig+0x148>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00b      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <TIM_Base_SetConfig+0x14c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d007      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <TIM_Base_SetConfig+0x150>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <TIM_Base_SetConfig+0x154>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d108      	bne.n	8007dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <TIM_Base_SetConfig+0x12c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_Base_SetConfig+0xf8>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <TIM_Base_SetConfig+0x13c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d103      	bne.n	8007de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d105      	bne.n	8007e06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f023 0201 	bic.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	611a      	str	r2, [r3, #16]
  }
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40000400 	.word	0x40000400
 8007e1c:	40000800 	.word	0x40000800
 8007e20:	40000c00 	.word	0x40000c00
 8007e24:	40010400 	.word	0x40010400
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800
 8007e34:	40001800 	.word	0x40001800
 8007e38:	40001c00 	.word	0x40001c00
 8007e3c:	40002000 	.word	0x40002000

08007e40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	f023 0201 	bic.w	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f023 0302 	bic.w	r3, r3, #2
 8007e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a20      	ldr	r2, [pc, #128]	; (8007f18 <TIM_OC1_SetConfig+0xd8>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC1_SetConfig+0x64>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a1f      	ldr	r2, [pc, #124]	; (8007f1c <TIM_OC1_SetConfig+0xdc>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d10c      	bne.n	8007ebe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f023 0308 	bic.w	r3, r3, #8
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f023 0304 	bic.w	r3, r3, #4
 8007ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <TIM_OC1_SetConfig+0xd8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_OC1_SetConfig+0x8e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a14      	ldr	r2, [pc, #80]	; (8007f1c <TIM_OC1_SetConfig+0xdc>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d111      	bne.n	8007ef2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	621a      	str	r2, [r3, #32]
}
 8007f0c:	bf00      	nop
 8007f0e:	371c      	adds	r7, #28
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400

08007f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f023 0320 	bic.w	r3, r3, #32
 8007f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a22      	ldr	r2, [pc, #136]	; (8008004 <TIM_OC2_SetConfig+0xe4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC2_SetConfig+0x68>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a21      	ldr	r2, [pc, #132]	; (8008008 <TIM_OC2_SetConfig+0xe8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d10d      	bne.n	8007fa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a17      	ldr	r2, [pc, #92]	; (8008004 <TIM_OC2_SetConfig+0xe4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d003      	beq.n	8007fb4 <TIM_OC2_SetConfig+0x94>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a16      	ldr	r2, [pc, #88]	; (8008008 <TIM_OC2_SetConfig+0xe8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d113      	bne.n	8007fdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40010000 	.word	0x40010000
 8008008:	40010400 	.word	0x40010400

0800800c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a21      	ldr	r2, [pc, #132]	; (80080ec <TIM_OC3_SetConfig+0xe0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d003      	beq.n	8008072 <TIM_OC3_SetConfig+0x66>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a20      	ldr	r2, [pc, #128]	; (80080f0 <TIM_OC3_SetConfig+0xe4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d10d      	bne.n	800808e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800808c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a16      	ldr	r2, [pc, #88]	; (80080ec <TIM_OC3_SetConfig+0xe0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d003      	beq.n	800809e <TIM_OC3_SetConfig+0x92>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <TIM_OC3_SetConfig+0xe4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d113      	bne.n	80080c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	621a      	str	r2, [r3, #32]
}
 80080e0:	bf00      	nop
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40010400 	.word	0x40010400

080080f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69db      	ldr	r3, [r3, #28]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4313      	orrs	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800813e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	031b      	lsls	r3, r3, #12
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a12      	ldr	r2, [pc, #72]	; (8008198 <TIM_OC4_SetConfig+0xa4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d003      	beq.n	800815c <TIM_OC4_SetConfig+0x68>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a11      	ldr	r2, [pc, #68]	; (800819c <TIM_OC4_SetConfig+0xa8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d109      	bne.n	8008170 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	019b      	lsls	r3, r3, #6
 800816a:	697a      	ldr	r2, [r7, #20]
 800816c:	4313      	orrs	r3, r2
 800816e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	621a      	str	r2, [r3, #32]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	40010000 	.word	0x40010000
 800819c:	40010400 	.word	0x40010400

080081a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f023 0201 	bic.w	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f023 030a 	bic.w	r3, r3, #10
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	bf00      	nop
 80081f4:	371c      	adds	r7, #28
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081fe:	b480      	push	{r7}
 8008200:	b087      	sub	sp, #28
 8008202:	af00      	add	r7, sp, #0
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	f023 0210 	bic.w	r2, r3, #16
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	031b      	lsls	r3, r3, #12
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800823a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	f043 0307 	orr.w	r3, r3, #7
 8008280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	609a      	str	r2, [r3, #8]
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	609a      	str	r2, [r3, #8]
}
 80082c8:	bf00      	nop
 80082ca:	371c      	adds	r7, #28
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	2201      	movs	r2, #1
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1a      	ldr	r2, [r3, #32]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	43db      	mvns	r3, r3
 80082f6:	401a      	ands	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1a      	ldr	r2, [r3, #32]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 031f 	and.w	r3, r3, #31
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	fa01 f303 	lsl.w	r3, r1, r3
 800830c:	431a      	orrs	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	621a      	str	r2, [r3, #32]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008334:	2302      	movs	r3, #2
 8008336:	e05a      	b.n	80083ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2202      	movs	r2, #2
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a21      	ldr	r2, [pc, #132]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d022      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008384:	d01d      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d018      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a1b      	ldr	r2, [pc, #108]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d013      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00e      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a18      	ldr	r2, [pc, #96]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d009      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a17      	ldr	r2, [pc, #92]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d004      	beq.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a15      	ldr	r2, [pc, #84]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d10c      	bne.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800
 8008408:	40000c00 	.word	0x40000c00
 800840c:	40010400 	.word	0x40010400
 8008410:	40014000 	.word	0x40014000
 8008414:	40001800 	.word	0x40001800

08008418 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e042      	b.n	80084d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fc f95e 	bl	8004728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2224      	movs	r2, #36	; 0x24
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fc7b 	bl	8008d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695a      	ldr	r2, [r3, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b0ba      	sub	sp, #232	; 0xe8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008506:	2300      	movs	r3, #0
 8008508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800850c:	2300      	movs	r3, #0
 800850e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800851e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10f      	bne.n	8008546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <HAL_UART_IRQHandler+0x66>
 8008532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb5f 	bl	8008c02 <UART_Receive_IT>
      return;
 8008544:	e25b      	b.n	80089fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 80de 	beq.w	800870c <HAL_UART_IRQHandler+0x22c>
 8008550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d106      	bne.n	800856a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800855c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80d1 	beq.w	800870c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800856a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <HAL_UART_IRQHandler+0xae>
 8008576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f043 0201 	orr.w	r2, r3, #1
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800858e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <HAL_UART_IRQHandler+0xd2>
 800859a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d005      	beq.n	80085b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085aa:	f043 0202 	orr.w	r2, r3, #2
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <HAL_UART_IRQHandler+0xf6>
 80085be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ce:	f043 0204 	orr.w	r2, r3, #4
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d011      	beq.n	8008606 <HAL_UART_IRQHandler+0x126>
 80085e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fe:	f043 0208 	orr.w	r2, r3, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 81f2 	beq.w	80089f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_UART_IRQHandler+0x14e>
 800861c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 faea 	bl	8008c02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	bf0c      	ite	eq
 800863c:	2301      	moveq	r3, #1
 800863e:	2300      	movne	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	f003 0308 	and.w	r3, r3, #8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <HAL_UART_IRQHandler+0x17a>
 8008652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04f      	beq.n	80086fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9f2 	bl	8008a44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d141      	bne.n	80086f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3314      	adds	r3, #20
 8008674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3314      	adds	r3, #20
 8008696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800869a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800869e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1d9      	bne.n	800866e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d013      	beq.n	80086ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	4a7e      	ldr	r2, [pc, #504]	; (80088c0 <HAL_UART_IRQHandler+0x3e0>)
 80086c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fd f8a4 	bl	800581c <HAL_DMA_Abort_IT>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e00e      	b.n	8008708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f994 	bl	8008a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	e00a      	b.n	8008708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f990 	bl	8008a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	e006      	b.n	8008708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f98c 	bl	8008a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008706:	e175      	b.n	80089f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	bf00      	nop
    return;
 800870a:	e173      	b.n	80089f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	2b01      	cmp	r3, #1
 8008712:	f040 814f 	bne.w	80089b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8148 	beq.w	80089b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8141 	beq.w	80089b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008732:	2300      	movs	r3, #0
 8008734:	60bb      	str	r3, [r7, #8]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	f040 80b6 	bne.w	80088c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8145 	beq.w	80089f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008776:	429a      	cmp	r2, r3
 8008778:	f080 813e 	bcs.w	80089f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008782:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878e:	f000 8088 	beq.w	80088a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	330c      	adds	r3, #12
 8008798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80087a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1d9      	bne.n	8008792 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3314      	adds	r3, #20
 80087e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f0:	f023 0301 	bic.w	r3, r3, #1
 80087f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3314      	adds	r3, #20
 80087fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008802:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008806:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800880a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e1      	bne.n	80087de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008830:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3314      	adds	r3, #20
 800883a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800883e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800884c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e3      	bne.n	800881a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	330c      	adds	r3, #12
 8008866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008872:	f023 0310 	bic.w	r3, r3, #16
 8008876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008884:	65ba      	str	r2, [r7, #88]	; 0x58
 8008886:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800888a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e3      	bne.n	8008860 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	4618      	mov	r0, r3
 800889e:	f7fc ff4d 	bl	800573c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8b7 	bl	8008a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088be:	e09b      	b.n	80089f8 <HAL_UART_IRQHandler+0x518>
 80088c0:	08008b0b 	.word	0x08008b0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 808e 	beq.w	80089fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8089 	beq.w	80089fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	330c      	adds	r3, #12
 80088f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	330c      	adds	r3, #12
 800890a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800890e:	647a      	str	r2, [r7, #68]	; 0x44
 8008910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800891c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e3      	bne.n	80088ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3314      	adds	r3, #20
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	623b      	str	r3, [r7, #32]
   return(result);
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008946:	633a      	str	r2, [r7, #48]	; 0x30
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800894c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e3      	bne.n	8008922 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	330c      	adds	r3, #12
 800896e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	60fb      	str	r3, [r7, #12]
   return(result);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800898c:	61fa      	str	r2, [r7, #28]
 800898e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	69fa      	ldr	r2, [r7, #28]
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	617b      	str	r3, [r7, #20]
   return(result);
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e3      	bne.n	8008968 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f83d 	bl	8008a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089b2:	e023      	b.n	80089fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <HAL_UART_IRQHandler+0x4f4>
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f8b0 	bl	8008b32 <UART_Transmit_IT>
    return;
 80089d2:	e014      	b.n	80089fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00e      	beq.n	80089fe <HAL_UART_IRQHandler+0x51e>
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f8f0 	bl	8008bd2 <UART_EndTransmit_IT>
    return;
 80089f2:	e004      	b.n	80089fe <HAL_UART_IRQHandler+0x51e>
    return;
 80089f4:	bf00      	nop
 80089f6:	e002      	b.n	80089fe <HAL_UART_IRQHandler+0x51e>
      return;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <HAL_UART_IRQHandler+0x51e>
      return;
 80089fc:	bf00      	nop
  }
}
 80089fe:	37e8      	adds	r7, #232	; 0xe8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b095      	sub	sp, #84	; 0x54
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a6c:	643a      	str	r2, [r7, #64]	; 0x40
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e5      	bne.n	8008a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3314      	adds	r3, #20
 8008a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e5      	bne.n	8008a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d119      	bne.n	8008af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	330c      	adds	r3, #12
 8008ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f023 0310 	bic.w	r3, r3, #16
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	330c      	adds	r3, #12
 8008ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008adc:	61ba      	str	r2, [r7, #24]
 8008ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6979      	ldr	r1, [r7, #20]
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008afe:	bf00      	nop
 8008b00:	3754      	adds	r7, #84	; 0x54
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff ff77 	bl	8008a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b21      	cmp	r3, #33	; 0x21
 8008b44:	d13e      	bne.n	8008bc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	d114      	bne.n	8008b7a <UART_Transmit_IT+0x48>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d110      	bne.n	8008b7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	1c9a      	adds	r2, r3, #2
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	621a      	str	r2, [r3, #32]
 8008b78:	e008      	b.n	8008b8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	1c59      	adds	r1, r3, #1
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6211      	str	r1, [r2, #32]
 8008b84:	781a      	ldrb	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10f      	bne.n	8008bc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e000      	b.n	8008bc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bc4:	2302      	movs	r3, #2
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ff06 	bl	8008a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b08c      	sub	sp, #48	; 0x30
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b22      	cmp	r3, #34	; 0x22
 8008c14:	f040 80ae 	bne.w	8008d74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c20:	d117      	bne.n	8008c52 <UART_Receive_IT+0x50>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d113      	bne.n	8008c52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	1c9a      	adds	r2, r3, #2
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8008c50:	e026      	b.n	8008ca0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c64:	d007      	beq.n	8008c76 <UART_Receive_IT+0x74>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10a      	bne.n	8008c84 <UART_Receive_IT+0x82>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d106      	bne.n	8008c84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e008      	b.n	8008c96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4619      	mov	r1, r3
 8008cae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d15d      	bne.n	8008d70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0220 	bic.w	r2, r2, #32
 8008cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d135      	bne.n	8008d66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	330c      	adds	r3, #12
 8008d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f023 0310 	bic.w	r3, r3, #16
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d20:	623a      	str	r2, [r7, #32]
 8008d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	69f9      	ldr	r1, [r7, #28]
 8008d26:	6a3a      	ldr	r2, [r7, #32]
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e5      	bne.n	8008d00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0310 	and.w	r3, r3, #16
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d10a      	bne.n	8008d58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fe64 	bl	8008a2c <HAL_UARTEx_RxEventCallback>
 8008d64:	e002      	b.n	8008d6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fa fde4 	bl	8003934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e002      	b.n	8008d76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3730      	adds	r7, #48	; 0x30
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d84:	b0c0      	sub	sp, #256	; 0x100
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	68d9      	ldr	r1, [r3, #12]
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	ea40 0301 	orr.w	r3, r0, r1
 8008da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dd8:	f021 010c 	bic.w	r1, r1, #12
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008de6:	430b      	orrs	r3, r1
 8008de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	6999      	ldr	r1, [r3, #24]
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	ea40 0301 	orr.w	r3, r0, r1
 8008e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b8f      	ldr	r3, [pc, #572]	; (800904c <UART_SetConfig+0x2cc>)
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d005      	beq.n	8008e20 <UART_SetConfig+0xa0>
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8d      	ldr	r3, [pc, #564]	; (8009050 <UART_SetConfig+0x2d0>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d104      	bne.n	8008e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7fd ff36 	bl	8006c90 <HAL_RCC_GetPCLK2Freq>
 8008e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e28:	e003      	b.n	8008e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7fd ff1d 	bl	8006c68 <HAL_RCC_GetPCLK1Freq>
 8008e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3c:	f040 810c 	bne.w	8009058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e52:	4622      	mov	r2, r4
 8008e54:	462b      	mov	r3, r5
 8008e56:	1891      	adds	r1, r2, r2
 8008e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e5a:	415b      	adcs	r3, r3
 8008e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e62:	4621      	mov	r1, r4
 8008e64:	eb12 0801 	adds.w	r8, r2, r1
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb43 0901 	adc.w	r9, r3, r1
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e82:	4690      	mov	r8, r2
 8008e84:	4699      	mov	r9, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	eb18 0303 	adds.w	r3, r8, r3
 8008e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e90:	462b      	mov	r3, r5
 8008e92:	eb49 0303 	adc.w	r3, r9, r3
 8008e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eae:	460b      	mov	r3, r1
 8008eb0:	18db      	adds	r3, r3, r3
 8008eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	657b      	str	r3, [r7, #84]	; 0x54
 8008ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ec4:	f7f7 fe70 	bl	8000ba8 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b61      	ldr	r3, [pc, #388]	; (8009054 <UART_SetConfig+0x2d4>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	011c      	lsls	r4, r3, #4
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ef8:	4641      	mov	r1, r8
 8008efa:	eb12 0a01 	adds.w	sl, r2, r1
 8008efe:	4649      	mov	r1, r9
 8008f00:	eb43 0b01 	adc.w	fp, r3, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f18:	4692      	mov	sl, r2
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f26:	464b      	mov	r3, r9
 8008f28:	eb4b 0303 	adc.w	r3, fp, r3
 8008f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f44:	460b      	mov	r3, r1
 8008f46:	18db      	adds	r3, r3, r3
 8008f48:	643b      	str	r3, [r7, #64]	; 0x40
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	eb42 0303 	adc.w	r3, r2, r3
 8008f50:	647b      	str	r3, [r7, #68]	; 0x44
 8008f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f5a:	f7f7 fe25 	bl	8000ba8 <__aeabi_uldivmod>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	4b3b      	ldr	r3, [pc, #236]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f66:	fba3 2301 	umull	r2, r3, r3, r1
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2264      	movs	r2, #100	; 0x64
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	1acb      	subs	r3, r1, r3
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <UART_SetConfig+0x2d4>)
 8008f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f88:	441c      	add	r4, r3
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009000:	460b      	mov	r3, r1
 8009002:	18db      	adds	r3, r3, r3
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
 8009006:	4613      	mov	r3, r2
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009016:	f7f7 fdc7 	bl	8000ba8 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <UART_SetConfig+0x2d4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	; 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	3332      	adds	r3, #50	; 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <UART_SetConfig+0x2d4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 0207 	and.w	r2, r3, #7
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009048:	e106      	b.n	8009258 <UART_SetConfig+0x4d8>
 800904a:	bf00      	nop
 800904c:	40011000 	.word	0x40011000
 8009050:	40011400 	.word	0x40011400
 8009054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800905c:	2200      	movs	r2, #0
 800905e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800906a:	4642      	mov	r2, r8
 800906c:	464b      	mov	r3, r9
 800906e:	1891      	adds	r1, r2, r2
 8009070:	6239      	str	r1, [r7, #32]
 8009072:	415b      	adcs	r3, r3
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
 8009076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800907a:	4641      	mov	r1, r8
 800907c:	1854      	adds	r4, r2, r1
 800907e:	4649      	mov	r1, r9
 8009080:	eb43 0501 	adc.w	r5, r3, r1
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	00eb      	lsls	r3, r5, #3
 800908e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009092:	00e2      	lsls	r2, r4, #3
 8009094:	4614      	mov	r4, r2
 8009096:	461d      	mov	r5, r3
 8009098:	4643      	mov	r3, r8
 800909a:	18e3      	adds	r3, r4, r3
 800909c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090a0:	464b      	mov	r3, r9
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090c6:	4629      	mov	r1, r5
 80090c8:	008b      	lsls	r3, r1, #2
 80090ca:	4621      	mov	r1, r4
 80090cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d0:	4621      	mov	r1, r4
 80090d2:	008a      	lsls	r2, r1, #2
 80090d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090d8:	f7f7 fd66 	bl	8000ba8 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b60      	ldr	r3, [pc, #384]	; (8009264 <UART_SetConfig+0x4e4>)
 80090e2:	fba3 2302 	umull	r2, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	011c      	lsls	r4, r3, #4
 80090ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	1891      	adds	r1, r2, r2
 8009102:	61b9      	str	r1, [r7, #24]
 8009104:	415b      	adcs	r3, r3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800910c:	4641      	mov	r1, r8
 800910e:	1851      	adds	r1, r2, r1
 8009110:	6139      	str	r1, [r7, #16]
 8009112:	4649      	mov	r1, r9
 8009114:	414b      	adcs	r3, r1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009124:	4659      	mov	r1, fp
 8009126:	00cb      	lsls	r3, r1, #3
 8009128:	4651      	mov	r1, sl
 800912a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800912e:	4651      	mov	r1, sl
 8009130:	00ca      	lsls	r2, r1, #3
 8009132:	4610      	mov	r0, r2
 8009134:	4619      	mov	r1, r3
 8009136:	4603      	mov	r3, r0
 8009138:	4642      	mov	r2, r8
 800913a:	189b      	adds	r3, r3, r2
 800913c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009140:	464b      	mov	r3, r9
 8009142:	460a      	mov	r2, r1
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	67bb      	str	r3, [r7, #120]	; 0x78
 8009156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009164:	4649      	mov	r1, r9
 8009166:	008b      	lsls	r3, r1, #2
 8009168:	4641      	mov	r1, r8
 800916a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800916e:	4641      	mov	r1, r8
 8009170:	008a      	lsls	r2, r1, #2
 8009172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009176:	f7f7 fd17 	bl	8000ba8 <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4611      	mov	r1, r2
 8009180:	4b38      	ldr	r3, [pc, #224]	; (8009264 <UART_SetConfig+0x4e4>)
 8009182:	fba3 2301 	umull	r2, r3, r3, r1
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	2264      	movs	r2, #100	; 0x64
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	1acb      	subs	r3, r1, r3
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	3332      	adds	r3, #50	; 0x32
 8009194:	4a33      	ldr	r2, [pc, #204]	; (8009264 <UART_SetConfig+0x4e4>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a0:	441c      	add	r4, r3
 80091a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091a6:	2200      	movs	r2, #0
 80091a8:	673b      	str	r3, [r7, #112]	; 0x70
 80091aa:	677a      	str	r2, [r7, #116]	; 0x74
 80091ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	1891      	adds	r1, r2, r2
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	415b      	adcs	r3, r3
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091c0:	4641      	mov	r1, r8
 80091c2:	1851      	adds	r1, r2, r1
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	4649      	mov	r1, r9
 80091c8:	414b      	adcs	r3, r1
 80091ca:	607b      	str	r3, [r7, #4]
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091d8:	4659      	mov	r1, fp
 80091da:	00cb      	lsls	r3, r1, #3
 80091dc:	4651      	mov	r1, sl
 80091de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e2:	4651      	mov	r1, sl
 80091e4:	00ca      	lsls	r2, r1, #3
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	4642      	mov	r2, r8
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80091f2:	464b      	mov	r3, r9
 80091f4:	460a      	mov	r2, r1
 80091f6:	eb42 0303 	adc.w	r3, r2, r3
 80091fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	663b      	str	r3, [r7, #96]	; 0x60
 8009206:	667a      	str	r2, [r7, #100]	; 0x64
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009214:	4649      	mov	r1, r9
 8009216:	008b      	lsls	r3, r1, #2
 8009218:	4641      	mov	r1, r8
 800921a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800921e:	4641      	mov	r1, r8
 8009220:	008a      	lsls	r2, r1, #2
 8009222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009226:	f7f7 fcbf 	bl	8000ba8 <__aeabi_uldivmod>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <UART_SetConfig+0x4e4>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	3332      	adds	r3, #50	; 0x32
 8009242:	4a08      	ldr	r2, [pc, #32]	; (8009264 <UART_SetConfig+0x4e4>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	f003 020f 	and.w	r2, r3, #15
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4422      	add	r2, r4
 8009256:	609a      	str	r2, [r3, #8]
}
 8009258:	bf00      	nop
 800925a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800925e:	46bd      	mov	sp, r7
 8009260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009264:	51eb851f 	.word	0x51eb851f

08009268 <__cvt>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	ec55 4b10 	vmov	r4, r5, d0
 8009270:	2d00      	cmp	r5, #0
 8009272:	460e      	mov	r6, r1
 8009274:	4619      	mov	r1, r3
 8009276:	462b      	mov	r3, r5
 8009278:	bfbb      	ittet	lt
 800927a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800927e:	461d      	movlt	r5, r3
 8009280:	2300      	movge	r3, #0
 8009282:	232d      	movlt	r3, #45	; 0x2d
 8009284:	700b      	strb	r3, [r1, #0]
 8009286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009288:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800928c:	4691      	mov	r9, r2
 800928e:	f023 0820 	bic.w	r8, r3, #32
 8009292:	bfbc      	itt	lt
 8009294:	4622      	movlt	r2, r4
 8009296:	4614      	movlt	r4, r2
 8009298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800929c:	d005      	beq.n	80092aa <__cvt+0x42>
 800929e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092a2:	d100      	bne.n	80092a6 <__cvt+0x3e>
 80092a4:	3601      	adds	r6, #1
 80092a6:	2102      	movs	r1, #2
 80092a8:	e000      	b.n	80092ac <__cvt+0x44>
 80092aa:	2103      	movs	r1, #3
 80092ac:	ab03      	add	r3, sp, #12
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	ab02      	add	r3, sp, #8
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	ec45 4b10 	vmov	d0, r4, r5
 80092b8:	4653      	mov	r3, sl
 80092ba:	4632      	mov	r2, r6
 80092bc:	f000 fe78 	bl	8009fb0 <_dtoa_r>
 80092c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092c4:	4607      	mov	r7, r0
 80092c6:	d102      	bne.n	80092ce <__cvt+0x66>
 80092c8:	f019 0f01 	tst.w	r9, #1
 80092cc:	d022      	beq.n	8009314 <__cvt+0xac>
 80092ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092d2:	eb07 0906 	add.w	r9, r7, r6
 80092d6:	d110      	bne.n	80092fa <__cvt+0x92>
 80092d8:	783b      	ldrb	r3, [r7, #0]
 80092da:	2b30      	cmp	r3, #48	; 0x30
 80092dc:	d10a      	bne.n	80092f4 <__cvt+0x8c>
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ea:	b918      	cbnz	r0, 80092f4 <__cvt+0x8c>
 80092ec:	f1c6 0601 	rsb	r6, r6, #1
 80092f0:	f8ca 6000 	str.w	r6, [sl]
 80092f4:	f8da 3000 	ldr.w	r3, [sl]
 80092f8:	4499      	add	r9, r3
 80092fa:	2200      	movs	r2, #0
 80092fc:	2300      	movs	r3, #0
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f7 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009306:	b108      	cbz	r0, 800930c <__cvt+0xa4>
 8009308:	f8cd 900c 	str.w	r9, [sp, #12]
 800930c:	2230      	movs	r2, #48	; 0x30
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	454b      	cmp	r3, r9
 8009312:	d307      	bcc.n	8009324 <__cvt+0xbc>
 8009314:	9b03      	ldr	r3, [sp, #12]
 8009316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009318:	1bdb      	subs	r3, r3, r7
 800931a:	4638      	mov	r0, r7
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	b004      	add	sp, #16
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	1c59      	adds	r1, r3, #1
 8009326:	9103      	str	r1, [sp, #12]
 8009328:	701a      	strb	r2, [r3, #0]
 800932a:	e7f0      	b.n	800930e <__cvt+0xa6>

0800932c <__exponent>:
 800932c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800932e:	4603      	mov	r3, r0
 8009330:	2900      	cmp	r1, #0
 8009332:	bfb8      	it	lt
 8009334:	4249      	neglt	r1, r1
 8009336:	f803 2b02 	strb.w	r2, [r3], #2
 800933a:	bfb4      	ite	lt
 800933c:	222d      	movlt	r2, #45	; 0x2d
 800933e:	222b      	movge	r2, #43	; 0x2b
 8009340:	2909      	cmp	r1, #9
 8009342:	7042      	strb	r2, [r0, #1]
 8009344:	dd2a      	ble.n	800939c <__exponent+0x70>
 8009346:	f10d 0207 	add.w	r2, sp, #7
 800934a:	4617      	mov	r7, r2
 800934c:	260a      	movs	r6, #10
 800934e:	4694      	mov	ip, r2
 8009350:	fb91 f5f6 	sdiv	r5, r1, r6
 8009354:	fb06 1415 	mls	r4, r6, r5, r1
 8009358:	3430      	adds	r4, #48	; 0x30
 800935a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800935e:	460c      	mov	r4, r1
 8009360:	2c63      	cmp	r4, #99	; 0x63
 8009362:	f102 32ff 	add.w	r2, r2, #4294967295
 8009366:	4629      	mov	r1, r5
 8009368:	dcf1      	bgt.n	800934e <__exponent+0x22>
 800936a:	3130      	adds	r1, #48	; 0x30
 800936c:	f1ac 0402 	sub.w	r4, ip, #2
 8009370:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009374:	1c41      	adds	r1, r0, #1
 8009376:	4622      	mov	r2, r4
 8009378:	42ba      	cmp	r2, r7
 800937a:	d30a      	bcc.n	8009392 <__exponent+0x66>
 800937c:	f10d 0209 	add.w	r2, sp, #9
 8009380:	eba2 020c 	sub.w	r2, r2, ip
 8009384:	42bc      	cmp	r4, r7
 8009386:	bf88      	it	hi
 8009388:	2200      	movhi	r2, #0
 800938a:	4413      	add	r3, r2
 800938c:	1a18      	subs	r0, r3, r0
 800938e:	b003      	add	sp, #12
 8009390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009392:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009396:	f801 5f01 	strb.w	r5, [r1, #1]!
 800939a:	e7ed      	b.n	8009378 <__exponent+0x4c>
 800939c:	2330      	movs	r3, #48	; 0x30
 800939e:	3130      	adds	r1, #48	; 0x30
 80093a0:	7083      	strb	r3, [r0, #2]
 80093a2:	70c1      	strb	r1, [r0, #3]
 80093a4:	1d03      	adds	r3, r0, #4
 80093a6:	e7f1      	b.n	800938c <__exponent+0x60>

080093a8 <_printf_float>:
 80093a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ac:	ed2d 8b02 	vpush	{d8}
 80093b0:	b08d      	sub	sp, #52	; 0x34
 80093b2:	460c      	mov	r4, r1
 80093b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093b8:	4616      	mov	r6, r2
 80093ba:	461f      	mov	r7, r3
 80093bc:	4605      	mov	r5, r0
 80093be:	f000 fce7 	bl	8009d90 <_localeconv_r>
 80093c2:	f8d0 a000 	ldr.w	sl, [r0]
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7f6 ff52 	bl	8000270 <strlen>
 80093cc:	2300      	movs	r3, #0
 80093ce:	930a      	str	r3, [sp, #40]	; 0x28
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	9305      	str	r3, [sp, #20]
 80093d4:	f8d8 3000 	ldr.w	r3, [r8]
 80093d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80093dc:	3307      	adds	r3, #7
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	f103 0208 	add.w	r2, r3, #8
 80093e6:	f8c8 2000 	str.w	r2, [r8]
 80093ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80093f8:	ee08 0a10 	vmov	s16, r0
 80093fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009400:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009404:	4b9e      	ldr	r3, [pc, #632]	; (8009680 <_printf_float+0x2d8>)
 8009406:	f04f 32ff 	mov.w	r2, #4294967295
 800940a:	f7f7 fb8f 	bl	8000b2c <__aeabi_dcmpun>
 800940e:	bb88      	cbnz	r0, 8009474 <_printf_float+0xcc>
 8009410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009414:	4b9a      	ldr	r3, [pc, #616]	; (8009680 <_printf_float+0x2d8>)
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	f7f7 fb69 	bl	8000af0 <__aeabi_dcmple>
 800941e:	bb48      	cbnz	r0, 8009474 <_printf_float+0xcc>
 8009420:	2200      	movs	r2, #0
 8009422:	2300      	movs	r3, #0
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 fb58 	bl	8000adc <__aeabi_dcmplt>
 800942c:	b110      	cbz	r0, 8009434 <_printf_float+0x8c>
 800942e:	232d      	movs	r3, #45	; 0x2d
 8009430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009434:	4a93      	ldr	r2, [pc, #588]	; (8009684 <_printf_float+0x2dc>)
 8009436:	4b94      	ldr	r3, [pc, #592]	; (8009688 <_printf_float+0x2e0>)
 8009438:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800943c:	bf94      	ite	ls
 800943e:	4690      	movls	r8, r2
 8009440:	4698      	movhi	r8, r3
 8009442:	2303      	movs	r3, #3
 8009444:	6123      	str	r3, [r4, #16]
 8009446:	9b05      	ldr	r3, [sp, #20]
 8009448:	f023 0304 	bic.w	r3, r3, #4
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	f04f 0900 	mov.w	r9, #0
 8009452:	9700      	str	r7, [sp, #0]
 8009454:	4633      	mov	r3, r6
 8009456:	aa0b      	add	r2, sp, #44	; 0x2c
 8009458:	4621      	mov	r1, r4
 800945a:	4628      	mov	r0, r5
 800945c:	f000 f9da 	bl	8009814 <_printf_common>
 8009460:	3001      	adds	r0, #1
 8009462:	f040 8090 	bne.w	8009586 <_printf_float+0x1de>
 8009466:	f04f 30ff 	mov.w	r0, #4294967295
 800946a:	b00d      	add	sp, #52	; 0x34
 800946c:	ecbd 8b02 	vpop	{d8}
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f7 fb56 	bl	8000b2c <__aeabi_dcmpun>
 8009480:	b140      	cbz	r0, 8009494 <_printf_float+0xec>
 8009482:	464b      	mov	r3, r9
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbc      	itt	lt
 8009488:	232d      	movlt	r3, #45	; 0x2d
 800948a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800948e:	4a7f      	ldr	r2, [pc, #508]	; (800968c <_printf_float+0x2e4>)
 8009490:	4b7f      	ldr	r3, [pc, #508]	; (8009690 <_printf_float+0x2e8>)
 8009492:	e7d1      	b.n	8009438 <_printf_float+0x90>
 8009494:	6863      	ldr	r3, [r4, #4]
 8009496:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800949a:	9206      	str	r2, [sp, #24]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	d13f      	bne.n	8009520 <_printf_float+0x178>
 80094a0:	2306      	movs	r3, #6
 80094a2:	6063      	str	r3, [r4, #4]
 80094a4:	9b05      	ldr	r3, [sp, #20]
 80094a6:	6861      	ldr	r1, [r4, #4]
 80094a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094ac:	2300      	movs	r3, #0
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	ab0a      	add	r3, sp, #40	; 0x28
 80094b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094b6:	ab09      	add	r3, sp, #36	; 0x24
 80094b8:	ec49 8b10 	vmov	d0, r8, r9
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	6022      	str	r2, [r4, #0]
 80094c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094c4:	4628      	mov	r0, r5
 80094c6:	f7ff fecf 	bl	8009268 <__cvt>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ce:	2b47      	cmp	r3, #71	; 0x47
 80094d0:	4680      	mov	r8, r0
 80094d2:	d108      	bne.n	80094e6 <_printf_float+0x13e>
 80094d4:	1cc8      	adds	r0, r1, #3
 80094d6:	db02      	blt.n	80094de <_printf_float+0x136>
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	4299      	cmp	r1, r3
 80094dc:	dd41      	ble.n	8009562 <_printf_float+0x1ba>
 80094de:	f1ab 0302 	sub.w	r3, fp, #2
 80094e2:	fa5f fb83 	uxtb.w	fp, r3
 80094e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80094ea:	d820      	bhi.n	800952e <_printf_float+0x186>
 80094ec:	3901      	subs	r1, #1
 80094ee:	465a      	mov	r2, fp
 80094f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094f4:	9109      	str	r1, [sp, #36]	; 0x24
 80094f6:	f7ff ff19 	bl	800932c <__exponent>
 80094fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094fc:	1813      	adds	r3, r2, r0
 80094fe:	2a01      	cmp	r2, #1
 8009500:	4681      	mov	r9, r0
 8009502:	6123      	str	r3, [r4, #16]
 8009504:	dc02      	bgt.n	800950c <_printf_float+0x164>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	07d2      	lsls	r2, r2, #31
 800950a:	d501      	bpl.n	8009510 <_printf_float+0x168>
 800950c:	3301      	adds	r3, #1
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009514:	2b00      	cmp	r3, #0
 8009516:	d09c      	beq.n	8009452 <_printf_float+0xaa>
 8009518:	232d      	movs	r3, #45	; 0x2d
 800951a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800951e:	e798      	b.n	8009452 <_printf_float+0xaa>
 8009520:	9a06      	ldr	r2, [sp, #24]
 8009522:	2a47      	cmp	r2, #71	; 0x47
 8009524:	d1be      	bne.n	80094a4 <_printf_float+0xfc>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1bc      	bne.n	80094a4 <_printf_float+0xfc>
 800952a:	2301      	movs	r3, #1
 800952c:	e7b9      	b.n	80094a2 <_printf_float+0xfa>
 800952e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009532:	d118      	bne.n	8009566 <_printf_float+0x1be>
 8009534:	2900      	cmp	r1, #0
 8009536:	6863      	ldr	r3, [r4, #4]
 8009538:	dd0b      	ble.n	8009552 <_printf_float+0x1aa>
 800953a:	6121      	str	r1, [r4, #16]
 800953c:	b913      	cbnz	r3, 8009544 <_printf_float+0x19c>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	07d0      	lsls	r0, r2, #31
 8009542:	d502      	bpl.n	800954a <_printf_float+0x1a2>
 8009544:	3301      	adds	r3, #1
 8009546:	440b      	add	r3, r1
 8009548:	6123      	str	r3, [r4, #16]
 800954a:	65a1      	str	r1, [r4, #88]	; 0x58
 800954c:	f04f 0900 	mov.w	r9, #0
 8009550:	e7de      	b.n	8009510 <_printf_float+0x168>
 8009552:	b913      	cbnz	r3, 800955a <_printf_float+0x1b2>
 8009554:	6822      	ldr	r2, [r4, #0]
 8009556:	07d2      	lsls	r2, r2, #31
 8009558:	d501      	bpl.n	800955e <_printf_float+0x1b6>
 800955a:	3302      	adds	r3, #2
 800955c:	e7f4      	b.n	8009548 <_printf_float+0x1a0>
 800955e:	2301      	movs	r3, #1
 8009560:	e7f2      	b.n	8009548 <_printf_float+0x1a0>
 8009562:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009568:	4299      	cmp	r1, r3
 800956a:	db05      	blt.n	8009578 <_printf_float+0x1d0>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	6121      	str	r1, [r4, #16]
 8009570:	07d8      	lsls	r0, r3, #31
 8009572:	d5ea      	bpl.n	800954a <_printf_float+0x1a2>
 8009574:	1c4b      	adds	r3, r1, #1
 8009576:	e7e7      	b.n	8009548 <_printf_float+0x1a0>
 8009578:	2900      	cmp	r1, #0
 800957a:	bfd4      	ite	le
 800957c:	f1c1 0202 	rsble	r2, r1, #2
 8009580:	2201      	movgt	r2, #1
 8009582:	4413      	add	r3, r2
 8009584:	e7e0      	b.n	8009548 <_printf_float+0x1a0>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	055a      	lsls	r2, r3, #21
 800958a:	d407      	bmi.n	800959c <_printf_float+0x1f4>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	4642      	mov	r2, r8
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	d12c      	bne.n	80095f4 <_printf_float+0x24c>
 800959a:	e764      	b.n	8009466 <_printf_float+0xbe>
 800959c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095a0:	f240 80e0 	bls.w	8009764 <_printf_float+0x3bc>
 80095a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095a8:	2200      	movs	r2, #0
 80095aa:	2300      	movs	r3, #0
 80095ac:	f7f7 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d034      	beq.n	800961e <_printf_float+0x276>
 80095b4:	4a37      	ldr	r2, [pc, #220]	; (8009694 <_printf_float+0x2ec>)
 80095b6:	2301      	movs	r3, #1
 80095b8:	4631      	mov	r1, r6
 80095ba:	4628      	mov	r0, r5
 80095bc:	47b8      	blx	r7
 80095be:	3001      	adds	r0, #1
 80095c0:	f43f af51 	beq.w	8009466 <_printf_float+0xbe>
 80095c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095c8:	429a      	cmp	r2, r3
 80095ca:	db02      	blt.n	80095d2 <_printf_float+0x22a>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	07d8      	lsls	r0, r3, #31
 80095d0:	d510      	bpl.n	80095f4 <_printf_float+0x24c>
 80095d2:	ee18 3a10 	vmov	r3, s16
 80095d6:	4652      	mov	r2, sl
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	f43f af41 	beq.w	8009466 <_printf_float+0xbe>
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	f104 091a 	add.w	r9, r4, #26
 80095ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4543      	cmp	r3, r8
 80095f2:	dc09      	bgt.n	8009608 <_printf_float+0x260>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	079b      	lsls	r3, r3, #30
 80095f8:	f100 8107 	bmi.w	800980a <_printf_float+0x462>
 80095fc:	68e0      	ldr	r0, [r4, #12]
 80095fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009600:	4298      	cmp	r0, r3
 8009602:	bfb8      	it	lt
 8009604:	4618      	movlt	r0, r3
 8009606:	e730      	b.n	800946a <_printf_float+0xc2>
 8009608:	2301      	movs	r3, #1
 800960a:	464a      	mov	r2, r9
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	f43f af27 	beq.w	8009466 <_printf_float+0xbe>
 8009618:	f108 0801 	add.w	r8, r8, #1
 800961c:	e7e6      	b.n	80095ec <_printf_float+0x244>
 800961e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009620:	2b00      	cmp	r3, #0
 8009622:	dc39      	bgt.n	8009698 <_printf_float+0x2f0>
 8009624:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <_printf_float+0x2ec>)
 8009626:	2301      	movs	r3, #1
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f af19 	beq.w	8009466 <_printf_float+0xbe>
 8009634:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009638:	4313      	orrs	r3, r2
 800963a:	d102      	bne.n	8009642 <_printf_float+0x29a>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	07d9      	lsls	r1, r3, #31
 8009640:	d5d8      	bpl.n	80095f4 <_printf_float+0x24c>
 8009642:	ee18 3a10 	vmov	r3, s16
 8009646:	4652      	mov	r2, sl
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	f43f af09 	beq.w	8009466 <_printf_float+0xbe>
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	f104 0a1a 	add.w	sl, r4, #26
 800965c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965e:	425b      	negs	r3, r3
 8009660:	454b      	cmp	r3, r9
 8009662:	dc01      	bgt.n	8009668 <_printf_float+0x2c0>
 8009664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009666:	e792      	b.n	800958e <_printf_float+0x1e6>
 8009668:	2301      	movs	r3, #1
 800966a:	4652      	mov	r2, sl
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	47b8      	blx	r7
 8009672:	3001      	adds	r0, #1
 8009674:	f43f aef7 	beq.w	8009466 <_printf_float+0xbe>
 8009678:	f109 0901 	add.w	r9, r9, #1
 800967c:	e7ee      	b.n	800965c <_printf_float+0x2b4>
 800967e:	bf00      	nop
 8009680:	7fefffff 	.word	0x7fefffff
 8009684:	0800c1c0 	.word	0x0800c1c0
 8009688:	0800c1c4 	.word	0x0800c1c4
 800968c:	0800c1c8 	.word	0x0800c1c8
 8009690:	0800c1cc 	.word	0x0800c1cc
 8009694:	0800c1d0 	.word	0x0800c1d0
 8009698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800969a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800969c:	429a      	cmp	r2, r3
 800969e:	bfa8      	it	ge
 80096a0:	461a      	movge	r2, r3
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	4691      	mov	r9, r2
 80096a6:	dc37      	bgt.n	8009718 <_printf_float+0x370>
 80096a8:	f04f 0b00 	mov.w	fp, #0
 80096ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b0:	f104 021a 	add.w	r2, r4, #26
 80096b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	eba3 0309 	sub.w	r3, r3, r9
 80096bc:	455b      	cmp	r3, fp
 80096be:	dc33      	bgt.n	8009728 <_printf_float+0x380>
 80096c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c4:	429a      	cmp	r2, r3
 80096c6:	db3b      	blt.n	8009740 <_printf_float+0x398>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	07da      	lsls	r2, r3, #31
 80096cc:	d438      	bmi.n	8009740 <_printf_float+0x398>
 80096ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80096d2:	eba2 0903 	sub.w	r9, r2, r3
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	1ad2      	subs	r2, r2, r3
 80096da:	4591      	cmp	r9, r2
 80096dc:	bfa8      	it	ge
 80096de:	4691      	movge	r9, r2
 80096e0:	f1b9 0f00 	cmp.w	r9, #0
 80096e4:	dc35      	bgt.n	8009752 <_printf_float+0x3aa>
 80096e6:	f04f 0800 	mov.w	r8, #0
 80096ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ee:	f104 0a1a 	add.w	sl, r4, #26
 80096f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	eba3 0309 	sub.w	r3, r3, r9
 80096fc:	4543      	cmp	r3, r8
 80096fe:	f77f af79 	ble.w	80095f4 <_printf_float+0x24c>
 8009702:	2301      	movs	r3, #1
 8009704:	4652      	mov	r2, sl
 8009706:	4631      	mov	r1, r6
 8009708:	4628      	mov	r0, r5
 800970a:	47b8      	blx	r7
 800970c:	3001      	adds	r0, #1
 800970e:	f43f aeaa 	beq.w	8009466 <_printf_float+0xbe>
 8009712:	f108 0801 	add.w	r8, r8, #1
 8009716:	e7ec      	b.n	80096f2 <_printf_float+0x34a>
 8009718:	4613      	mov	r3, r2
 800971a:	4631      	mov	r1, r6
 800971c:	4642      	mov	r2, r8
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	d1c0      	bne.n	80096a8 <_printf_float+0x300>
 8009726:	e69e      	b.n	8009466 <_printf_float+0xbe>
 8009728:	2301      	movs	r3, #1
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	9205      	str	r2, [sp, #20]
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f ae97 	beq.w	8009466 <_printf_float+0xbe>
 8009738:	9a05      	ldr	r2, [sp, #20]
 800973a:	f10b 0b01 	add.w	fp, fp, #1
 800973e:	e7b9      	b.n	80096b4 <_printf_float+0x30c>
 8009740:	ee18 3a10 	vmov	r3, s16
 8009744:	4652      	mov	r2, sl
 8009746:	4631      	mov	r1, r6
 8009748:	4628      	mov	r0, r5
 800974a:	47b8      	blx	r7
 800974c:	3001      	adds	r0, #1
 800974e:	d1be      	bne.n	80096ce <_printf_float+0x326>
 8009750:	e689      	b.n	8009466 <_printf_float+0xbe>
 8009752:	9a05      	ldr	r2, [sp, #20]
 8009754:	464b      	mov	r3, r9
 8009756:	4442      	add	r2, r8
 8009758:	4631      	mov	r1, r6
 800975a:	4628      	mov	r0, r5
 800975c:	47b8      	blx	r7
 800975e:	3001      	adds	r0, #1
 8009760:	d1c1      	bne.n	80096e6 <_printf_float+0x33e>
 8009762:	e680      	b.n	8009466 <_printf_float+0xbe>
 8009764:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009766:	2a01      	cmp	r2, #1
 8009768:	dc01      	bgt.n	800976e <_printf_float+0x3c6>
 800976a:	07db      	lsls	r3, r3, #31
 800976c:	d53a      	bpl.n	80097e4 <_printf_float+0x43c>
 800976e:	2301      	movs	r3, #1
 8009770:	4642      	mov	r2, r8
 8009772:	4631      	mov	r1, r6
 8009774:	4628      	mov	r0, r5
 8009776:	47b8      	blx	r7
 8009778:	3001      	adds	r0, #1
 800977a:	f43f ae74 	beq.w	8009466 <_printf_float+0xbe>
 800977e:	ee18 3a10 	vmov	r3, s16
 8009782:	4652      	mov	r2, sl
 8009784:	4631      	mov	r1, r6
 8009786:	4628      	mov	r0, r5
 8009788:	47b8      	blx	r7
 800978a:	3001      	adds	r0, #1
 800978c:	f43f ae6b 	beq.w	8009466 <_printf_float+0xbe>
 8009790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800979c:	f7f7 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a0:	b9d8      	cbnz	r0, 80097da <_printf_float+0x432>
 80097a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097a6:	f108 0201 	add.w	r2, r8, #1
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	d10e      	bne.n	80097d2 <_printf_float+0x42a>
 80097b4:	e657      	b.n	8009466 <_printf_float+0xbe>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4652      	mov	r2, sl
 80097ba:	4631      	mov	r1, r6
 80097bc:	4628      	mov	r0, r5
 80097be:	47b8      	blx	r7
 80097c0:	3001      	adds	r0, #1
 80097c2:	f43f ae50 	beq.w	8009466 <_printf_float+0xbe>
 80097c6:	f108 0801 	add.w	r8, r8, #1
 80097ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4543      	cmp	r3, r8
 80097d0:	dcf1      	bgt.n	80097b6 <_printf_float+0x40e>
 80097d2:	464b      	mov	r3, r9
 80097d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097d8:	e6da      	b.n	8009590 <_printf_float+0x1e8>
 80097da:	f04f 0800 	mov.w	r8, #0
 80097de:	f104 0a1a 	add.w	sl, r4, #26
 80097e2:	e7f2      	b.n	80097ca <_printf_float+0x422>
 80097e4:	2301      	movs	r3, #1
 80097e6:	4642      	mov	r2, r8
 80097e8:	e7df      	b.n	80097aa <_printf_float+0x402>
 80097ea:	2301      	movs	r3, #1
 80097ec:	464a      	mov	r2, r9
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	f43f ae36 	beq.w	8009466 <_printf_float+0xbe>
 80097fa:	f108 0801 	add.w	r8, r8, #1
 80097fe:	68e3      	ldr	r3, [r4, #12]
 8009800:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009802:	1a5b      	subs	r3, r3, r1
 8009804:	4543      	cmp	r3, r8
 8009806:	dcf0      	bgt.n	80097ea <_printf_float+0x442>
 8009808:	e6f8      	b.n	80095fc <_printf_float+0x254>
 800980a:	f04f 0800 	mov.w	r8, #0
 800980e:	f104 0919 	add.w	r9, r4, #25
 8009812:	e7f4      	b.n	80097fe <_printf_float+0x456>

08009814 <_printf_common>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	4616      	mov	r6, r2
 800981a:	4699      	mov	r9, r3
 800981c:	688a      	ldr	r2, [r1, #8]
 800981e:	690b      	ldr	r3, [r1, #16]
 8009820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009824:	4293      	cmp	r3, r2
 8009826:	bfb8      	it	lt
 8009828:	4613      	movlt	r3, r2
 800982a:	6033      	str	r3, [r6, #0]
 800982c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009830:	4607      	mov	r7, r0
 8009832:	460c      	mov	r4, r1
 8009834:	b10a      	cbz	r2, 800983a <_printf_common+0x26>
 8009836:	3301      	adds	r3, #1
 8009838:	6033      	str	r3, [r6, #0]
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	0699      	lsls	r1, r3, #26
 800983e:	bf42      	ittt	mi
 8009840:	6833      	ldrmi	r3, [r6, #0]
 8009842:	3302      	addmi	r3, #2
 8009844:	6033      	strmi	r3, [r6, #0]
 8009846:	6825      	ldr	r5, [r4, #0]
 8009848:	f015 0506 	ands.w	r5, r5, #6
 800984c:	d106      	bne.n	800985c <_printf_common+0x48>
 800984e:	f104 0a19 	add.w	sl, r4, #25
 8009852:	68e3      	ldr	r3, [r4, #12]
 8009854:	6832      	ldr	r2, [r6, #0]
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	42ab      	cmp	r3, r5
 800985a:	dc26      	bgt.n	80098aa <_printf_common+0x96>
 800985c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009860:	1e13      	subs	r3, r2, #0
 8009862:	6822      	ldr	r2, [r4, #0]
 8009864:	bf18      	it	ne
 8009866:	2301      	movne	r3, #1
 8009868:	0692      	lsls	r2, r2, #26
 800986a:	d42b      	bmi.n	80098c4 <_printf_common+0xb0>
 800986c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009870:	4649      	mov	r1, r9
 8009872:	4638      	mov	r0, r7
 8009874:	47c0      	blx	r8
 8009876:	3001      	adds	r0, #1
 8009878:	d01e      	beq.n	80098b8 <_printf_common+0xa4>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	6922      	ldr	r2, [r4, #16]
 800987e:	f003 0306 	and.w	r3, r3, #6
 8009882:	2b04      	cmp	r3, #4
 8009884:	bf02      	ittt	eq
 8009886:	68e5      	ldreq	r5, [r4, #12]
 8009888:	6833      	ldreq	r3, [r6, #0]
 800988a:	1aed      	subeq	r5, r5, r3
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	bf0c      	ite	eq
 8009890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009894:	2500      	movne	r5, #0
 8009896:	4293      	cmp	r3, r2
 8009898:	bfc4      	itt	gt
 800989a:	1a9b      	subgt	r3, r3, r2
 800989c:	18ed      	addgt	r5, r5, r3
 800989e:	2600      	movs	r6, #0
 80098a0:	341a      	adds	r4, #26
 80098a2:	42b5      	cmp	r5, r6
 80098a4:	d11a      	bne.n	80098dc <_printf_common+0xc8>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e008      	b.n	80098bc <_printf_common+0xa8>
 80098aa:	2301      	movs	r3, #1
 80098ac:	4652      	mov	r2, sl
 80098ae:	4649      	mov	r1, r9
 80098b0:	4638      	mov	r0, r7
 80098b2:	47c0      	blx	r8
 80098b4:	3001      	adds	r0, #1
 80098b6:	d103      	bne.n	80098c0 <_printf_common+0xac>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	3501      	adds	r5, #1
 80098c2:	e7c6      	b.n	8009852 <_printf_common+0x3e>
 80098c4:	18e1      	adds	r1, r4, r3
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	2030      	movs	r0, #48	; 0x30
 80098ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098ce:	4422      	add	r2, r4
 80098d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098d8:	3302      	adds	r3, #2
 80098da:	e7c7      	b.n	800986c <_printf_common+0x58>
 80098dc:	2301      	movs	r3, #1
 80098de:	4622      	mov	r2, r4
 80098e0:	4649      	mov	r1, r9
 80098e2:	4638      	mov	r0, r7
 80098e4:	47c0      	blx	r8
 80098e6:	3001      	adds	r0, #1
 80098e8:	d0e6      	beq.n	80098b8 <_printf_common+0xa4>
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7d9      	b.n	80098a2 <_printf_common+0x8e>
	...

080098f0 <_printf_i>:
 80098f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	7e0f      	ldrb	r7, [r1, #24]
 80098f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098f8:	2f78      	cmp	r7, #120	; 0x78
 80098fa:	4691      	mov	r9, r2
 80098fc:	4680      	mov	r8, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	469a      	mov	sl, r3
 8009902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009906:	d807      	bhi.n	8009918 <_printf_i+0x28>
 8009908:	2f62      	cmp	r7, #98	; 0x62
 800990a:	d80a      	bhi.n	8009922 <_printf_i+0x32>
 800990c:	2f00      	cmp	r7, #0
 800990e:	f000 80d4 	beq.w	8009aba <_printf_i+0x1ca>
 8009912:	2f58      	cmp	r7, #88	; 0x58
 8009914:	f000 80c0 	beq.w	8009a98 <_printf_i+0x1a8>
 8009918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800991c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009920:	e03a      	b.n	8009998 <_printf_i+0xa8>
 8009922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009926:	2b15      	cmp	r3, #21
 8009928:	d8f6      	bhi.n	8009918 <_printf_i+0x28>
 800992a:	a101      	add	r1, pc, #4	; (adr r1, 8009930 <_printf_i+0x40>)
 800992c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009930:	08009989 	.word	0x08009989
 8009934:	0800999d 	.word	0x0800999d
 8009938:	08009919 	.word	0x08009919
 800993c:	08009919 	.word	0x08009919
 8009940:	08009919 	.word	0x08009919
 8009944:	08009919 	.word	0x08009919
 8009948:	0800999d 	.word	0x0800999d
 800994c:	08009919 	.word	0x08009919
 8009950:	08009919 	.word	0x08009919
 8009954:	08009919 	.word	0x08009919
 8009958:	08009919 	.word	0x08009919
 800995c:	08009aa1 	.word	0x08009aa1
 8009960:	080099c9 	.word	0x080099c9
 8009964:	08009a5b 	.word	0x08009a5b
 8009968:	08009919 	.word	0x08009919
 800996c:	08009919 	.word	0x08009919
 8009970:	08009ac3 	.word	0x08009ac3
 8009974:	08009919 	.word	0x08009919
 8009978:	080099c9 	.word	0x080099c9
 800997c:	08009919 	.word	0x08009919
 8009980:	08009919 	.word	0x08009919
 8009984:	08009a63 	.word	0x08009a63
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	1d1a      	adds	r2, r3, #4
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	602a      	str	r2, [r5, #0]
 8009990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009998:	2301      	movs	r3, #1
 800999a:	e09f      	b.n	8009adc <_printf_i+0x1ec>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	0607      	lsls	r7, r0, #24
 80099a2:	f103 0104 	add.w	r1, r3, #4
 80099a6:	6029      	str	r1, [r5, #0]
 80099a8:	d501      	bpl.n	80099ae <_printf_i+0xbe>
 80099aa:	681e      	ldr	r6, [r3, #0]
 80099ac:	e003      	b.n	80099b6 <_printf_i+0xc6>
 80099ae:	0646      	lsls	r6, r0, #25
 80099b0:	d5fb      	bpl.n	80099aa <_printf_i+0xba>
 80099b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	da03      	bge.n	80099c2 <_printf_i+0xd2>
 80099ba:	232d      	movs	r3, #45	; 0x2d
 80099bc:	4276      	negs	r6, r6
 80099be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c2:	485a      	ldr	r0, [pc, #360]	; (8009b2c <_printf_i+0x23c>)
 80099c4:	230a      	movs	r3, #10
 80099c6:	e012      	b.n	80099ee <_printf_i+0xfe>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	6820      	ldr	r0, [r4, #0]
 80099cc:	1d19      	adds	r1, r3, #4
 80099ce:	6029      	str	r1, [r5, #0]
 80099d0:	0605      	lsls	r5, r0, #24
 80099d2:	d501      	bpl.n	80099d8 <_printf_i+0xe8>
 80099d4:	681e      	ldr	r6, [r3, #0]
 80099d6:	e002      	b.n	80099de <_printf_i+0xee>
 80099d8:	0641      	lsls	r1, r0, #25
 80099da:	d5fb      	bpl.n	80099d4 <_printf_i+0xe4>
 80099dc:	881e      	ldrh	r6, [r3, #0]
 80099de:	4853      	ldr	r0, [pc, #332]	; (8009b2c <_printf_i+0x23c>)
 80099e0:	2f6f      	cmp	r7, #111	; 0x6f
 80099e2:	bf0c      	ite	eq
 80099e4:	2308      	moveq	r3, #8
 80099e6:	230a      	movne	r3, #10
 80099e8:	2100      	movs	r1, #0
 80099ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ee:	6865      	ldr	r5, [r4, #4]
 80099f0:	60a5      	str	r5, [r4, #8]
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	bfa2      	ittt	ge
 80099f6:	6821      	ldrge	r1, [r4, #0]
 80099f8:	f021 0104 	bicge.w	r1, r1, #4
 80099fc:	6021      	strge	r1, [r4, #0]
 80099fe:	b90e      	cbnz	r6, 8009a04 <_printf_i+0x114>
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	d04b      	beq.n	8009a9c <_printf_i+0x1ac>
 8009a04:	4615      	mov	r5, r2
 8009a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8009a0e:	5dc7      	ldrb	r7, [r0, r7]
 8009a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a14:	4637      	mov	r7, r6
 8009a16:	42bb      	cmp	r3, r7
 8009a18:	460e      	mov	r6, r1
 8009a1a:	d9f4      	bls.n	8009a06 <_printf_i+0x116>
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d10b      	bne.n	8009a38 <_printf_i+0x148>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	07de      	lsls	r6, r3, #31
 8009a24:	d508      	bpl.n	8009a38 <_printf_i+0x148>
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	6861      	ldr	r1, [r4, #4]
 8009a2a:	4299      	cmp	r1, r3
 8009a2c:	bfde      	ittt	le
 8009a2e:	2330      	movle	r3, #48	; 0x30
 8009a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a38:	1b52      	subs	r2, r2, r5
 8009a3a:	6122      	str	r2, [r4, #16]
 8009a3c:	f8cd a000 	str.w	sl, [sp]
 8009a40:	464b      	mov	r3, r9
 8009a42:	aa03      	add	r2, sp, #12
 8009a44:	4621      	mov	r1, r4
 8009a46:	4640      	mov	r0, r8
 8009a48:	f7ff fee4 	bl	8009814 <_printf_common>
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	d14a      	bne.n	8009ae6 <_printf_i+0x1f6>
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	b004      	add	sp, #16
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	f043 0320 	orr.w	r3, r3, #32
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	4833      	ldr	r0, [pc, #204]	; (8009b30 <_printf_i+0x240>)
 8009a64:	2778      	movs	r7, #120	; 0x78
 8009a66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	6829      	ldr	r1, [r5, #0]
 8009a6e:	061f      	lsls	r7, r3, #24
 8009a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a74:	d402      	bmi.n	8009a7c <_printf_i+0x18c>
 8009a76:	065f      	lsls	r7, r3, #25
 8009a78:	bf48      	it	mi
 8009a7a:	b2b6      	uxthmi	r6, r6
 8009a7c:	07df      	lsls	r7, r3, #31
 8009a7e:	bf48      	it	mi
 8009a80:	f043 0320 	orrmi.w	r3, r3, #32
 8009a84:	6029      	str	r1, [r5, #0]
 8009a86:	bf48      	it	mi
 8009a88:	6023      	strmi	r3, [r4, #0]
 8009a8a:	b91e      	cbnz	r6, 8009a94 <_printf_i+0x1a4>
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	f023 0320 	bic.w	r3, r3, #32
 8009a92:	6023      	str	r3, [r4, #0]
 8009a94:	2310      	movs	r3, #16
 8009a96:	e7a7      	b.n	80099e8 <_printf_i+0xf8>
 8009a98:	4824      	ldr	r0, [pc, #144]	; (8009b2c <_printf_i+0x23c>)
 8009a9a:	e7e4      	b.n	8009a66 <_printf_i+0x176>
 8009a9c:	4615      	mov	r5, r2
 8009a9e:	e7bd      	b.n	8009a1c <_printf_i+0x12c>
 8009aa0:	682b      	ldr	r3, [r5, #0]
 8009aa2:	6826      	ldr	r6, [r4, #0]
 8009aa4:	6961      	ldr	r1, [r4, #20]
 8009aa6:	1d18      	adds	r0, r3, #4
 8009aa8:	6028      	str	r0, [r5, #0]
 8009aaa:	0635      	lsls	r5, r6, #24
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0x1c4>
 8009ab0:	6019      	str	r1, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <_printf_i+0x1ca>
 8009ab4:	0670      	lsls	r0, r6, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0x1c0>
 8009ab8:	8019      	strh	r1, [r3, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	6123      	str	r3, [r4, #16]
 8009abe:	4615      	mov	r5, r2
 8009ac0:	e7bc      	b.n	8009a3c <_printf_i+0x14c>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	1d1a      	adds	r2, r3, #4
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	681d      	ldr	r5, [r3, #0]
 8009aca:	6862      	ldr	r2, [r4, #4]
 8009acc:	2100      	movs	r1, #0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7f6 fb7e 	bl	80001d0 <memchr>
 8009ad4:	b108      	cbz	r0, 8009ada <_printf_i+0x1ea>
 8009ad6:	1b40      	subs	r0, r0, r5
 8009ad8:	6060      	str	r0, [r4, #4]
 8009ada:	6863      	ldr	r3, [r4, #4]
 8009adc:	6123      	str	r3, [r4, #16]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae4:	e7aa      	b.n	8009a3c <_printf_i+0x14c>
 8009ae6:	6923      	ldr	r3, [r4, #16]
 8009ae8:	462a      	mov	r2, r5
 8009aea:	4649      	mov	r1, r9
 8009aec:	4640      	mov	r0, r8
 8009aee:	47d0      	blx	sl
 8009af0:	3001      	adds	r0, #1
 8009af2:	d0ad      	beq.n	8009a50 <_printf_i+0x160>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	079b      	lsls	r3, r3, #30
 8009af8:	d413      	bmi.n	8009b22 <_printf_i+0x232>
 8009afa:	68e0      	ldr	r0, [r4, #12]
 8009afc:	9b03      	ldr	r3, [sp, #12]
 8009afe:	4298      	cmp	r0, r3
 8009b00:	bfb8      	it	lt
 8009b02:	4618      	movlt	r0, r3
 8009b04:	e7a6      	b.n	8009a54 <_printf_i+0x164>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4632      	mov	r2, r6
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	47d0      	blx	sl
 8009b10:	3001      	adds	r0, #1
 8009b12:	d09d      	beq.n	8009a50 <_printf_i+0x160>
 8009b14:	3501      	adds	r5, #1
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	9903      	ldr	r1, [sp, #12]
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	42ab      	cmp	r3, r5
 8009b1e:	dcf2      	bgt.n	8009b06 <_printf_i+0x216>
 8009b20:	e7eb      	b.n	8009afa <_printf_i+0x20a>
 8009b22:	2500      	movs	r5, #0
 8009b24:	f104 0619 	add.w	r6, r4, #25
 8009b28:	e7f5      	b.n	8009b16 <_printf_i+0x226>
 8009b2a:	bf00      	nop
 8009b2c:	0800c1d2 	.word	0x0800c1d2
 8009b30:	0800c1e3 	.word	0x0800c1e3

08009b34 <std>:
 8009b34:	2300      	movs	r3, #0
 8009b36:	b510      	push	{r4, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b42:	6083      	str	r3, [r0, #8]
 8009b44:	8181      	strh	r1, [r0, #12]
 8009b46:	6643      	str	r3, [r0, #100]	; 0x64
 8009b48:	81c2      	strh	r2, [r0, #14]
 8009b4a:	6183      	str	r3, [r0, #24]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	2208      	movs	r2, #8
 8009b50:	305c      	adds	r0, #92	; 0x5c
 8009b52:	f000 f914 	bl	8009d7e <memset>
 8009b56:	4b0d      	ldr	r3, [pc, #52]	; (8009b8c <std+0x58>)
 8009b58:	6263      	str	r3, [r4, #36]	; 0x24
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <std+0x5c>)
 8009b5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b5e:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <std+0x60>)
 8009b60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <std+0x64>)
 8009b64:	6323      	str	r3, [r4, #48]	; 0x30
 8009b66:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <std+0x68>)
 8009b68:	6224      	str	r4, [r4, #32]
 8009b6a:	429c      	cmp	r4, r3
 8009b6c:	d006      	beq.n	8009b7c <std+0x48>
 8009b6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b72:	4294      	cmp	r4, r2
 8009b74:	d002      	beq.n	8009b7c <std+0x48>
 8009b76:	33d0      	adds	r3, #208	; 0xd0
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	d105      	bne.n	8009b88 <std+0x54>
 8009b7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b84:	f000 b978 	b.w	8009e78 <__retarget_lock_init_recursive>
 8009b88:	bd10      	pop	{r4, pc}
 8009b8a:	bf00      	nop
 8009b8c:	08009cf9 	.word	0x08009cf9
 8009b90:	08009d1b 	.word	0x08009d1b
 8009b94:	08009d53 	.word	0x08009d53
 8009b98:	08009d77 	.word	0x08009d77
 8009b9c:	20000640 	.word	0x20000640

08009ba0 <stdio_exit_handler>:
 8009ba0:	4a02      	ldr	r2, [pc, #8]	; (8009bac <stdio_exit_handler+0xc>)
 8009ba2:	4903      	ldr	r1, [pc, #12]	; (8009bb0 <stdio_exit_handler+0x10>)
 8009ba4:	4803      	ldr	r0, [pc, #12]	; (8009bb4 <stdio_exit_handler+0x14>)
 8009ba6:	f000 b869 	b.w	8009c7c <_fwalk_sglue>
 8009baa:	bf00      	nop
 8009bac:	20000018 	.word	0x20000018
 8009bb0:	0800b849 	.word	0x0800b849
 8009bb4:	20000024 	.word	0x20000024

08009bb8 <cleanup_stdio>:
 8009bb8:	6841      	ldr	r1, [r0, #4]
 8009bba:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <cleanup_stdio+0x34>)
 8009bbc:	4299      	cmp	r1, r3
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	d001      	beq.n	8009bc8 <cleanup_stdio+0x10>
 8009bc4:	f001 fe40 	bl	800b848 <_fflush_r>
 8009bc8:	68a1      	ldr	r1, [r4, #8]
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <cleanup_stdio+0x38>)
 8009bcc:	4299      	cmp	r1, r3
 8009bce:	d002      	beq.n	8009bd6 <cleanup_stdio+0x1e>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f001 fe39 	bl	800b848 <_fflush_r>
 8009bd6:	68e1      	ldr	r1, [r4, #12]
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <cleanup_stdio+0x3c>)
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d004      	beq.n	8009be8 <cleanup_stdio+0x30>
 8009bde:	4620      	mov	r0, r4
 8009be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be4:	f001 be30 	b.w	800b848 <_fflush_r>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	bf00      	nop
 8009bec:	20000640 	.word	0x20000640
 8009bf0:	200006a8 	.word	0x200006a8
 8009bf4:	20000710 	.word	0x20000710

08009bf8 <global_stdio_init.part.0>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <global_stdio_init.part.0+0x30>)
 8009bfc:	4c0b      	ldr	r4, [pc, #44]	; (8009c2c <global_stdio_init.part.0+0x34>)
 8009bfe:	4a0c      	ldr	r2, [pc, #48]	; (8009c30 <global_stdio_init.part.0+0x38>)
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	4620      	mov	r0, r4
 8009c04:	2200      	movs	r2, #0
 8009c06:	2104      	movs	r1, #4
 8009c08:	f7ff ff94 	bl	8009b34 <std>
 8009c0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c10:	2201      	movs	r2, #1
 8009c12:	2109      	movs	r1, #9
 8009c14:	f7ff ff8e 	bl	8009b34 <std>
 8009c18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c22:	2112      	movs	r1, #18
 8009c24:	f7ff bf86 	b.w	8009b34 <std>
 8009c28:	20000778 	.word	0x20000778
 8009c2c:	20000640 	.word	0x20000640
 8009c30:	08009ba1 	.word	0x08009ba1

08009c34 <__sfp_lock_acquire>:
 8009c34:	4801      	ldr	r0, [pc, #4]	; (8009c3c <__sfp_lock_acquire+0x8>)
 8009c36:	f000 b920 	b.w	8009e7a <__retarget_lock_acquire_recursive>
 8009c3a:	bf00      	nop
 8009c3c:	20000781 	.word	0x20000781

08009c40 <__sfp_lock_release>:
 8009c40:	4801      	ldr	r0, [pc, #4]	; (8009c48 <__sfp_lock_release+0x8>)
 8009c42:	f000 b91b 	b.w	8009e7c <__retarget_lock_release_recursive>
 8009c46:	bf00      	nop
 8009c48:	20000781 	.word	0x20000781

08009c4c <__sinit>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	4604      	mov	r4, r0
 8009c50:	f7ff fff0 	bl	8009c34 <__sfp_lock_acquire>
 8009c54:	6a23      	ldr	r3, [r4, #32]
 8009c56:	b11b      	cbz	r3, 8009c60 <__sinit+0x14>
 8009c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c5c:	f7ff bff0 	b.w	8009c40 <__sfp_lock_release>
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <__sinit+0x28>)
 8009c62:	6223      	str	r3, [r4, #32]
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <__sinit+0x2c>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1f5      	bne.n	8009c58 <__sinit+0xc>
 8009c6c:	f7ff ffc4 	bl	8009bf8 <global_stdio_init.part.0>
 8009c70:	e7f2      	b.n	8009c58 <__sinit+0xc>
 8009c72:	bf00      	nop
 8009c74:	08009bb9 	.word	0x08009bb9
 8009c78:	20000778 	.word	0x20000778

08009c7c <_fwalk_sglue>:
 8009c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c80:	4607      	mov	r7, r0
 8009c82:	4688      	mov	r8, r1
 8009c84:	4614      	mov	r4, r2
 8009c86:	2600      	movs	r6, #0
 8009c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c90:	d505      	bpl.n	8009c9e <_fwalk_sglue+0x22>
 8009c92:	6824      	ldr	r4, [r4, #0]
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d1f7      	bne.n	8009c88 <_fwalk_sglue+0xc>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9e:	89ab      	ldrh	r3, [r5, #12]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d907      	bls.n	8009cb4 <_fwalk_sglue+0x38>
 8009ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	d003      	beq.n	8009cb4 <_fwalk_sglue+0x38>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4638      	mov	r0, r7
 8009cb0:	47c0      	blx	r8
 8009cb2:	4306      	orrs	r6, r0
 8009cb4:	3568      	adds	r5, #104	; 0x68
 8009cb6:	e7e9      	b.n	8009c8c <_fwalk_sglue+0x10>

08009cb8 <siprintf>:
 8009cb8:	b40e      	push	{r1, r2, r3}
 8009cba:	b500      	push	{lr}
 8009cbc:	b09c      	sub	sp, #112	; 0x70
 8009cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8009cc0:	9002      	str	r0, [sp, #8]
 8009cc2:	9006      	str	r0, [sp, #24]
 8009cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cc8:	4809      	ldr	r0, [pc, #36]	; (8009cf0 <siprintf+0x38>)
 8009cca:	9107      	str	r1, [sp, #28]
 8009ccc:	9104      	str	r1, [sp, #16]
 8009cce:	4909      	ldr	r1, [pc, #36]	; (8009cf4 <siprintf+0x3c>)
 8009cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd4:	9105      	str	r1, [sp, #20]
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	a902      	add	r1, sp, #8
 8009cdc:	f001 fc30 	bl	800b540 <_svfiprintf_r>
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	b01c      	add	sp, #112	; 0x70
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	20000070 	.word	0x20000070
 8009cf4:	ffff0208 	.word	0xffff0208

08009cf8 <__sread>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f86c 	bl	8009ddc <_read_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	bfab      	itete	ge
 8009d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d0c:	181b      	addge	r3, r3, r0
 8009d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d12:	bfac      	ite	ge
 8009d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d16:	81a3      	strhlt	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__swrite>:
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	461f      	mov	r7, r3
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	05db      	lsls	r3, r3, #23
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	4616      	mov	r6, r2
 8009d2a:	d505      	bpl.n	8009d38 <__swrite+0x1e>
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f000 f840 	bl	8009db8 <_lseek_r>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	f000 b857 	b.w	8009e00 <_write_r>

08009d52 <__sseek>:
 8009d52:	b510      	push	{r4, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 f82d 	bl	8009db8 <_lseek_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	bf15      	itete	ne
 8009d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d6e:	81a3      	strheq	r3, [r4, #12]
 8009d70:	bf18      	it	ne
 8009d72:	81a3      	strhne	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__sclose>:
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 b80d 	b.w	8009d98 <_close_r>

08009d7e <memset>:
 8009d7e:	4402      	add	r2, r0
 8009d80:	4603      	mov	r3, r0
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d100      	bne.n	8009d88 <memset+0xa>
 8009d86:	4770      	bx	lr
 8009d88:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8c:	e7f9      	b.n	8009d82 <memset+0x4>
	...

08009d90 <_localeconv_r>:
 8009d90:	4800      	ldr	r0, [pc, #0]	; (8009d94 <_localeconv_r+0x4>)
 8009d92:	4770      	bx	lr
 8009d94:	20000164 	.word	0x20000164

08009d98 <_close_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	; (8009db4 <_close_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f9 ffc5 	bl	8003d32 <_close>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_close_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_close_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	2000077c 	.word	0x2000077c

08009db8 <_lseek_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d07      	ldr	r5, [pc, #28]	; (8009dd8 <_lseek_r+0x20>)
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	4608      	mov	r0, r1
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	602a      	str	r2, [r5, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f7f9 ffda 	bl	8003d80 <_lseek>
 8009dcc:	1c43      	adds	r3, r0, #1
 8009dce:	d102      	bne.n	8009dd6 <_lseek_r+0x1e>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	b103      	cbz	r3, 8009dd6 <_lseek_r+0x1e>
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	2000077c 	.word	0x2000077c

08009ddc <_read_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d07      	ldr	r5, [pc, #28]	; (8009dfc <_read_r+0x20>)
 8009de0:	4604      	mov	r4, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	602a      	str	r2, [r5, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f7f9 ff68 	bl	8003cc0 <_read>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_read_r+0x1e>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_read_r+0x1e>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	2000077c 	.word	0x2000077c

08009e00 <_write_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	; (8009e20 <_write_r+0x20>)
 8009e04:	4604      	mov	r4, r0
 8009e06:	4608      	mov	r0, r1
 8009e08:	4611      	mov	r1, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	602a      	str	r2, [r5, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f7f9 ff73 	bl	8003cfa <_write>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_write_r+0x1e>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_write_r+0x1e>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	2000077c 	.word	0x2000077c

08009e24 <__errno>:
 8009e24:	4b01      	ldr	r3, [pc, #4]	; (8009e2c <__errno+0x8>)
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20000070 	.word	0x20000070

08009e30 <__libc_init_array>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	4d0d      	ldr	r5, [pc, #52]	; (8009e68 <__libc_init_array+0x38>)
 8009e34:	4c0d      	ldr	r4, [pc, #52]	; (8009e6c <__libc_init_array+0x3c>)
 8009e36:	1b64      	subs	r4, r4, r5
 8009e38:	10a4      	asrs	r4, r4, #2
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	42a6      	cmp	r6, r4
 8009e3e:	d109      	bne.n	8009e54 <__libc_init_array+0x24>
 8009e40:	4d0b      	ldr	r5, [pc, #44]	; (8009e70 <__libc_init_array+0x40>)
 8009e42:	4c0c      	ldr	r4, [pc, #48]	; (8009e74 <__libc_init_array+0x44>)
 8009e44:	f002 f896 	bl	800bf74 <_init>
 8009e48:	1b64      	subs	r4, r4, r5
 8009e4a:	10a4      	asrs	r4, r4, #2
 8009e4c:	2600      	movs	r6, #0
 8009e4e:	42a6      	cmp	r6, r4
 8009e50:	d105      	bne.n	8009e5e <__libc_init_array+0x2e>
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e58:	4798      	blx	r3
 8009e5a:	3601      	adds	r6, #1
 8009e5c:	e7ee      	b.n	8009e3c <__libc_init_array+0xc>
 8009e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e62:	4798      	blx	r3
 8009e64:	3601      	adds	r6, #1
 8009e66:	e7f2      	b.n	8009e4e <__libc_init_array+0x1e>
 8009e68:	0800c53c 	.word	0x0800c53c
 8009e6c:	0800c53c 	.word	0x0800c53c
 8009e70:	0800c53c 	.word	0x0800c53c
 8009e74:	0800c540 	.word	0x0800c540

08009e78 <__retarget_lock_init_recursive>:
 8009e78:	4770      	bx	lr

08009e7a <__retarget_lock_acquire_recursive>:
 8009e7a:	4770      	bx	lr

08009e7c <__retarget_lock_release_recursive>:
 8009e7c:	4770      	bx	lr

08009e7e <memcpy>:
 8009e7e:	440a      	add	r2, r1
 8009e80:	4291      	cmp	r1, r2
 8009e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e86:	d100      	bne.n	8009e8a <memcpy+0xc>
 8009e88:	4770      	bx	lr
 8009e8a:	b510      	push	{r4, lr}
 8009e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e94:	4291      	cmp	r1, r2
 8009e96:	d1f9      	bne.n	8009e8c <memcpy+0xe>
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <quorem>:
 8009e9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9e:	6903      	ldr	r3, [r0, #16]
 8009ea0:	690c      	ldr	r4, [r1, #16]
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	db7e      	blt.n	8009fa6 <quorem+0x10c>
 8009ea8:	3c01      	subs	r4, #1
 8009eaa:	f101 0814 	add.w	r8, r1, #20
 8009eae:	f100 0514 	add.w	r5, r0, #20
 8009eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ebc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ec8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ecc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ed0:	d331      	bcc.n	8009f36 <quorem+0x9c>
 8009ed2:	f04f 0e00 	mov.w	lr, #0
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	46ac      	mov	ip, r5
 8009eda:	46f2      	mov	sl, lr
 8009edc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ee0:	b293      	uxth	r3, r2
 8009ee2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eea:	0c1a      	lsrs	r2, r3, #16
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	ebaa 0303 	sub.w	r3, sl, r3
 8009ef2:	f8dc a000 	ldr.w	sl, [ip]
 8009ef6:	fa13 f38a 	uxtah	r3, r3, sl
 8009efa:	fb06 220e 	mla	r2, r6, lr, r2
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f06:	b292      	uxth	r2, r2
 8009f08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f10:	f8bd 3000 	ldrh.w	r3, [sp]
 8009f14:	4581      	cmp	r9, r0
 8009f16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009f1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f22:	d2db      	bcs.n	8009edc <quorem+0x42>
 8009f24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f28:	b92b      	cbnz	r3, 8009f36 <quorem+0x9c>
 8009f2a:	9b01      	ldr	r3, [sp, #4]
 8009f2c:	3b04      	subs	r3, #4
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	461a      	mov	r2, r3
 8009f32:	d32c      	bcc.n	8009f8e <quorem+0xf4>
 8009f34:	613c      	str	r4, [r7, #16]
 8009f36:	4638      	mov	r0, r7
 8009f38:	f001 f9a8 	bl	800b28c <__mcmp>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	db22      	blt.n	8009f86 <quorem+0xec>
 8009f40:	3601      	adds	r6, #1
 8009f42:	4629      	mov	r1, r5
 8009f44:	2000      	movs	r0, #0
 8009f46:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f4a:	f8d1 c000 	ldr.w	ip, [r1]
 8009f4e:	b293      	uxth	r3, r2
 8009f50:	1ac3      	subs	r3, r0, r3
 8009f52:	0c12      	lsrs	r2, r2, #16
 8009f54:	fa13 f38c 	uxtah	r3, r3, ip
 8009f58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f66:	45c1      	cmp	r9, r8
 8009f68:	f841 3b04 	str.w	r3, [r1], #4
 8009f6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f70:	d2e9      	bcs.n	8009f46 <quorem+0xac>
 8009f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f7a:	b922      	cbnz	r2, 8009f86 <quorem+0xec>
 8009f7c:	3b04      	subs	r3, #4
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	461a      	mov	r2, r3
 8009f82:	d30a      	bcc.n	8009f9a <quorem+0x100>
 8009f84:	613c      	str	r4, [r7, #16]
 8009f86:	4630      	mov	r0, r6
 8009f88:	b003      	add	sp, #12
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	6812      	ldr	r2, [r2, #0]
 8009f90:	3b04      	subs	r3, #4
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	d1ce      	bne.n	8009f34 <quorem+0x9a>
 8009f96:	3c01      	subs	r4, #1
 8009f98:	e7c9      	b.n	8009f2e <quorem+0x94>
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	3b04      	subs	r3, #4
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	d1f0      	bne.n	8009f84 <quorem+0xea>
 8009fa2:	3c01      	subs	r4, #1
 8009fa4:	e7eb      	b.n	8009f7e <quorem+0xe4>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e7ee      	b.n	8009f88 <quorem+0xee>
 8009faa:	0000      	movs	r0, r0
 8009fac:	0000      	movs	r0, r0
	...

08009fb0 <_dtoa_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ed2d 8b04 	vpush	{d8-d9}
 8009fb8:	69c5      	ldr	r5, [r0, #28]
 8009fba:	b093      	sub	sp, #76	; 0x4c
 8009fbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009fc0:	ec57 6b10 	vmov	r6, r7, d0
 8009fc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fc8:	9107      	str	r1, [sp, #28]
 8009fca:	4604      	mov	r4, r0
 8009fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8009fce:	930d      	str	r3, [sp, #52]	; 0x34
 8009fd0:	b975      	cbnz	r5, 8009ff0 <_dtoa_r+0x40>
 8009fd2:	2010      	movs	r0, #16
 8009fd4:	f000 fe2a 	bl	800ac2c <malloc>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	61e0      	str	r0, [r4, #28]
 8009fdc:	b920      	cbnz	r0, 8009fe8 <_dtoa_r+0x38>
 8009fde:	4bae      	ldr	r3, [pc, #696]	; (800a298 <_dtoa_r+0x2e8>)
 8009fe0:	21ef      	movs	r1, #239	; 0xef
 8009fe2:	48ae      	ldr	r0, [pc, #696]	; (800a29c <_dtoa_r+0x2ec>)
 8009fe4:	f001 fc82 	bl	800b8ec <__assert_func>
 8009fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fec:	6005      	str	r5, [r0, #0]
 8009fee:	60c5      	str	r5, [r0, #12]
 8009ff0:	69e3      	ldr	r3, [r4, #28]
 8009ff2:	6819      	ldr	r1, [r3, #0]
 8009ff4:	b151      	cbz	r1, 800a00c <_dtoa_r+0x5c>
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	604a      	str	r2, [r1, #4]
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4093      	lsls	r3, r2
 8009ffe:	608b      	str	r3, [r1, #8]
 800a000:	4620      	mov	r0, r4
 800a002:	f000 ff07 	bl	800ae14 <_Bfree>
 800a006:	69e3      	ldr	r3, [r4, #28]
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	1e3b      	subs	r3, r7, #0
 800a00e:	bfbb      	ittet	lt
 800a010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a014:	9303      	strlt	r3, [sp, #12]
 800a016:	2300      	movge	r3, #0
 800a018:	2201      	movlt	r2, #1
 800a01a:	bfac      	ite	ge
 800a01c:	f8c8 3000 	strge.w	r3, [r8]
 800a020:	f8c8 2000 	strlt.w	r2, [r8]
 800a024:	4b9e      	ldr	r3, [pc, #632]	; (800a2a0 <_dtoa_r+0x2f0>)
 800a026:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a02a:	ea33 0308 	bics.w	r3, r3, r8
 800a02e:	d11b      	bne.n	800a068 <_dtoa_r+0xb8>
 800a030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a032:	f242 730f 	movw	r3, #9999	; 0x270f
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a03c:	4333      	orrs	r3, r6
 800a03e:	f000 8593 	beq.w	800ab68 <_dtoa_r+0xbb8>
 800a042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a044:	b963      	cbnz	r3, 800a060 <_dtoa_r+0xb0>
 800a046:	4b97      	ldr	r3, [pc, #604]	; (800a2a4 <_dtoa_r+0x2f4>)
 800a048:	e027      	b.n	800a09a <_dtoa_r+0xea>
 800a04a:	4b97      	ldr	r3, [pc, #604]	; (800a2a8 <_dtoa_r+0x2f8>)
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	3308      	adds	r3, #8
 800a050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a052:	6013      	str	r3, [r2, #0]
 800a054:	9800      	ldr	r0, [sp, #0]
 800a056:	b013      	add	sp, #76	; 0x4c
 800a058:	ecbd 8b04 	vpop	{d8-d9}
 800a05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a060:	4b90      	ldr	r3, [pc, #576]	; (800a2a4 <_dtoa_r+0x2f4>)
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	3303      	adds	r3, #3
 800a066:	e7f3      	b.n	800a050 <_dtoa_r+0xa0>
 800a068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a06c:	2200      	movs	r2, #0
 800a06e:	ec51 0b17 	vmov	r0, r1, d7
 800a072:	eeb0 8a47 	vmov.f32	s16, s14
 800a076:	eef0 8a67 	vmov.f32	s17, s15
 800a07a:	2300      	movs	r3, #0
 800a07c:	f7f6 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 800a080:	4681      	mov	r9, r0
 800a082:	b160      	cbz	r0, 800a09e <_dtoa_r+0xee>
 800a084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a086:	2301      	movs	r3, #1
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	f000 8568 	beq.w	800ab62 <_dtoa_r+0xbb2>
 800a092:	4b86      	ldr	r3, [pc, #536]	; (800a2ac <_dtoa_r+0x2fc>)
 800a094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	3b01      	subs	r3, #1
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	e7da      	b.n	800a054 <_dtoa_r+0xa4>
 800a09e:	aa10      	add	r2, sp, #64	; 0x40
 800a0a0:	a911      	add	r1, sp, #68	; 0x44
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a0a8:	eef0 0a68 	vmov.f32	s1, s17
 800a0ac:	f001 f994 	bl	800b3d8 <__d2b>
 800a0b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	d07f      	beq.n	800a1ba <_dtoa_r+0x20a>
 800a0ba:	ee18 3a90 	vmov	r3, s17
 800a0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a0c6:	ec51 0b18 	vmov	r0, r1, d8
 800a0ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	2200      	movs	r2, #0
 800a0da:	4b75      	ldr	r3, [pc, #468]	; (800a2b0 <_dtoa_r+0x300>)
 800a0dc:	f7f6 f8d4 	bl	8000288 <__aeabi_dsub>
 800a0e0:	a367      	add	r3, pc, #412	; (adr r3, 800a280 <_dtoa_r+0x2d0>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	a367      	add	r3, pc, #412	; (adr r3, 800a288 <_dtoa_r+0x2d8>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 f8cc 	bl	800028c <__adddf3>
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	f7f6 fa13 	bl	8000524 <__aeabi_i2d>
 800a0fe:	a364      	add	r3, pc, #400	; (adr r3, 800a290 <_dtoa_r+0x2e0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	4630      	mov	r0, r6
 800a10e:	4639      	mov	r1, r7
 800a110:	f7f6 f8bc 	bl	800028c <__adddf3>
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	f7f6 fd1e 	bl	8000b58 <__aeabi_d2iz>
 800a11c:	2200      	movs	r2, #0
 800a11e:	4683      	mov	fp, r0
 800a120:	2300      	movs	r3, #0
 800a122:	4630      	mov	r0, r6
 800a124:	4639      	mov	r1, r7
 800a126:	f7f6 fcd9 	bl	8000adc <__aeabi_dcmplt>
 800a12a:	b148      	cbz	r0, 800a140 <_dtoa_r+0x190>
 800a12c:	4658      	mov	r0, fp
 800a12e:	f7f6 f9f9 	bl	8000524 <__aeabi_i2d>
 800a132:	4632      	mov	r2, r6
 800a134:	463b      	mov	r3, r7
 800a136:	f7f6 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a13a:	b908      	cbnz	r0, 800a140 <_dtoa_r+0x190>
 800a13c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a140:	f1bb 0f16 	cmp.w	fp, #22
 800a144:	d857      	bhi.n	800a1f6 <_dtoa_r+0x246>
 800a146:	4b5b      	ldr	r3, [pc, #364]	; (800a2b4 <_dtoa_r+0x304>)
 800a148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	ec51 0b18 	vmov	r0, r1, d8
 800a154:	f7f6 fcc2 	bl	8000adc <__aeabi_dcmplt>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d04e      	beq.n	800a1fa <_dtoa_r+0x24a>
 800a15c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a160:	2300      	movs	r3, #0
 800a162:	930c      	str	r3, [sp, #48]	; 0x30
 800a164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a166:	1b5b      	subs	r3, r3, r5
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	bf45      	ittet	mi
 800a16c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a170:	9305      	strmi	r3, [sp, #20]
 800a172:	2300      	movpl	r3, #0
 800a174:	2300      	movmi	r3, #0
 800a176:	9206      	str	r2, [sp, #24]
 800a178:	bf54      	ite	pl
 800a17a:	9305      	strpl	r3, [sp, #20]
 800a17c:	9306      	strmi	r3, [sp, #24]
 800a17e:	f1bb 0f00 	cmp.w	fp, #0
 800a182:	db3c      	blt.n	800a1fe <_dtoa_r+0x24e>
 800a184:	9b06      	ldr	r3, [sp, #24]
 800a186:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a18a:	445b      	add	r3, fp
 800a18c:	9306      	str	r3, [sp, #24]
 800a18e:	2300      	movs	r3, #0
 800a190:	9308      	str	r3, [sp, #32]
 800a192:	9b07      	ldr	r3, [sp, #28]
 800a194:	2b09      	cmp	r3, #9
 800a196:	d868      	bhi.n	800a26a <_dtoa_r+0x2ba>
 800a198:	2b05      	cmp	r3, #5
 800a19a:	bfc4      	itt	gt
 800a19c:	3b04      	subgt	r3, #4
 800a19e:	9307      	strgt	r3, [sp, #28]
 800a1a0:	9b07      	ldr	r3, [sp, #28]
 800a1a2:	f1a3 0302 	sub.w	r3, r3, #2
 800a1a6:	bfcc      	ite	gt
 800a1a8:	2500      	movgt	r5, #0
 800a1aa:	2501      	movle	r5, #1
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	f200 8085 	bhi.w	800a2bc <_dtoa_r+0x30c>
 800a1b2:	e8df f003 	tbb	[pc, r3]
 800a1b6:	3b2e      	.short	0x3b2e
 800a1b8:	5839      	.short	0x5839
 800a1ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1be:	441d      	add	r5, r3
 800a1c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	bfc1      	itttt	gt
 800a1c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a1d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a1d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a1d8:	bfd6      	itet	le
 800a1da:	f1c3 0320 	rsble	r3, r3, #32
 800a1de:	ea48 0003 	orrgt.w	r0, r8, r3
 800a1e2:	fa06 f003 	lslle.w	r0, r6, r3
 800a1e6:	f7f6 f98d 	bl	8000504 <__aeabi_ui2d>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a1f0:	3d01      	subs	r5, #1
 800a1f2:	920e      	str	r2, [sp, #56]	; 0x38
 800a1f4:	e76f      	b.n	800a0d6 <_dtoa_r+0x126>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7b3      	b.n	800a162 <_dtoa_r+0x1b2>
 800a1fa:	900c      	str	r0, [sp, #48]	; 0x30
 800a1fc:	e7b2      	b.n	800a164 <_dtoa_r+0x1b4>
 800a1fe:	9b05      	ldr	r3, [sp, #20]
 800a200:	eba3 030b 	sub.w	r3, r3, fp
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	f1cb 0300 	rsb	r3, fp, #0
 800a20a:	9308      	str	r3, [sp, #32]
 800a20c:	2300      	movs	r3, #0
 800a20e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a210:	e7bf      	b.n	800a192 <_dtoa_r+0x1e2>
 800a212:	2300      	movs	r3, #0
 800a214:	9309      	str	r3, [sp, #36]	; 0x24
 800a216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc52      	bgt.n	800a2c2 <_dtoa_r+0x312>
 800a21c:	2301      	movs	r3, #1
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	461a      	mov	r2, r3
 800a224:	920a      	str	r2, [sp, #40]	; 0x28
 800a226:	e00b      	b.n	800a240 <_dtoa_r+0x290>
 800a228:	2301      	movs	r3, #1
 800a22a:	e7f3      	b.n	800a214 <_dtoa_r+0x264>
 800a22c:	2300      	movs	r3, #0
 800a22e:	9309      	str	r3, [sp, #36]	; 0x24
 800a230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a232:	445b      	add	r3, fp
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	3301      	adds	r3, #1
 800a238:	2b01      	cmp	r3, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	bfb8      	it	lt
 800a23e:	2301      	movlt	r3, #1
 800a240:	69e0      	ldr	r0, [r4, #28]
 800a242:	2100      	movs	r1, #0
 800a244:	2204      	movs	r2, #4
 800a246:	f102 0614 	add.w	r6, r2, #20
 800a24a:	429e      	cmp	r6, r3
 800a24c:	d93d      	bls.n	800a2ca <_dtoa_r+0x31a>
 800a24e:	6041      	str	r1, [r0, #4]
 800a250:	4620      	mov	r0, r4
 800a252:	f000 fd9f 	bl	800ad94 <_Balloc>
 800a256:	9000      	str	r0, [sp, #0]
 800a258:	2800      	cmp	r0, #0
 800a25a:	d139      	bne.n	800a2d0 <_dtoa_r+0x320>
 800a25c:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <_dtoa_r+0x308>)
 800a25e:	4602      	mov	r2, r0
 800a260:	f240 11af 	movw	r1, #431	; 0x1af
 800a264:	e6bd      	b.n	8009fe2 <_dtoa_r+0x32>
 800a266:	2301      	movs	r3, #1
 800a268:	e7e1      	b.n	800a22e <_dtoa_r+0x27e>
 800a26a:	2501      	movs	r5, #1
 800a26c:	2300      	movs	r3, #0
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	9509      	str	r5, [sp, #36]	; 0x24
 800a272:	f04f 33ff 	mov.w	r3, #4294967295
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	2312      	movs	r3, #18
 800a27e:	e7d1      	b.n	800a224 <_dtoa_r+0x274>
 800a280:	636f4361 	.word	0x636f4361
 800a284:	3fd287a7 	.word	0x3fd287a7
 800a288:	8b60c8b3 	.word	0x8b60c8b3
 800a28c:	3fc68a28 	.word	0x3fc68a28
 800a290:	509f79fb 	.word	0x509f79fb
 800a294:	3fd34413 	.word	0x3fd34413
 800a298:	0800c201 	.word	0x0800c201
 800a29c:	0800c218 	.word	0x0800c218
 800a2a0:	7ff00000 	.word	0x7ff00000
 800a2a4:	0800c1fd 	.word	0x0800c1fd
 800a2a8:	0800c1f4 	.word	0x0800c1f4
 800a2ac:	0800c1d1 	.word	0x0800c1d1
 800a2b0:	3ff80000 	.word	0x3ff80000
 800a2b4:	0800c308 	.word	0x0800c308
 800a2b8:	0800c270 	.word	0x0800c270
 800a2bc:	2301      	movs	r3, #1
 800a2be:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c0:	e7d7      	b.n	800a272 <_dtoa_r+0x2c2>
 800a2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	e7ba      	b.n	800a240 <_dtoa_r+0x290>
 800a2ca:	3101      	adds	r1, #1
 800a2cc:	0052      	lsls	r2, r2, #1
 800a2ce:	e7ba      	b.n	800a246 <_dtoa_r+0x296>
 800a2d0:	69e3      	ldr	r3, [r4, #28]
 800a2d2:	9a00      	ldr	r2, [sp, #0]
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	2b0e      	cmp	r3, #14
 800a2da:	f200 80a8 	bhi.w	800a42e <_dtoa_r+0x47e>
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	f000 80a5 	beq.w	800a42e <_dtoa_r+0x47e>
 800a2e4:	f1bb 0f00 	cmp.w	fp, #0
 800a2e8:	dd38      	ble.n	800a35c <_dtoa_r+0x3ac>
 800a2ea:	4bc0      	ldr	r3, [pc, #768]	; (800a5ec <_dtoa_r+0x63c>)
 800a2ec:	f00b 020f 	and.w	r2, fp, #15
 800a2f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a2f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a2fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a300:	d019      	beq.n	800a336 <_dtoa_r+0x386>
 800a302:	4bbb      	ldr	r3, [pc, #748]	; (800a5f0 <_dtoa_r+0x640>)
 800a304:	ec51 0b18 	vmov	r0, r1, d8
 800a308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a30c:	f7f6 fa9e 	bl	800084c <__aeabi_ddiv>
 800a310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a314:	f008 080f 	and.w	r8, r8, #15
 800a318:	2503      	movs	r5, #3
 800a31a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a5f0 <_dtoa_r+0x640>
 800a31e:	f1b8 0f00 	cmp.w	r8, #0
 800a322:	d10a      	bne.n	800a33a <_dtoa_r+0x38a>
 800a324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a328:	4632      	mov	r2, r6
 800a32a:	463b      	mov	r3, r7
 800a32c:	f7f6 fa8e 	bl	800084c <__aeabi_ddiv>
 800a330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a334:	e02b      	b.n	800a38e <_dtoa_r+0x3de>
 800a336:	2502      	movs	r5, #2
 800a338:	e7ef      	b.n	800a31a <_dtoa_r+0x36a>
 800a33a:	f018 0f01 	tst.w	r8, #1
 800a33e:	d008      	beq.n	800a352 <_dtoa_r+0x3a2>
 800a340:	4630      	mov	r0, r6
 800a342:	4639      	mov	r1, r7
 800a344:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	3501      	adds	r5, #1
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a356:	f109 0908 	add.w	r9, r9, #8
 800a35a:	e7e0      	b.n	800a31e <_dtoa_r+0x36e>
 800a35c:	f000 809f 	beq.w	800a49e <_dtoa_r+0x4ee>
 800a360:	f1cb 0600 	rsb	r6, fp, #0
 800a364:	4ba1      	ldr	r3, [pc, #644]	; (800a5ec <_dtoa_r+0x63c>)
 800a366:	4fa2      	ldr	r7, [pc, #648]	; (800a5f0 <_dtoa_r+0x640>)
 800a368:	f006 020f 	and.w	r2, r6, #15
 800a36c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	ec51 0b18 	vmov	r0, r1, d8
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a380:	1136      	asrs	r6, r6, #4
 800a382:	2300      	movs	r3, #0
 800a384:	2502      	movs	r5, #2
 800a386:	2e00      	cmp	r6, #0
 800a388:	d17e      	bne.n	800a488 <_dtoa_r+0x4d8>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1d0      	bne.n	800a330 <_dtoa_r+0x380>
 800a38e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a390:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8084 	beq.w	800a4a2 <_dtoa_r+0x4f2>
 800a39a:	4b96      	ldr	r3, [pc, #600]	; (800a5f4 <_dtoa_r+0x644>)
 800a39c:	2200      	movs	r2, #0
 800a39e:	4640      	mov	r0, r8
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	f7f6 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d07b      	beq.n	800a4a2 <_dtoa_r+0x4f2>
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d078      	beq.n	800a4a2 <_dtoa_r+0x4f2>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd39      	ble.n	800a42a <_dtoa_r+0x47a>
 800a3b6:	4b90      	ldr	r3, [pc, #576]	; (800a5f8 <_dtoa_r+0x648>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	4649      	mov	r1, r9
 800a3be:	f7f6 f91b 	bl	80005f8 <__aeabi_dmul>
 800a3c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3c6:	9e01      	ldr	r6, [sp, #4]
 800a3c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7f6 f8a6 	bl	8000524 <__aeabi_i2d>
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	f7f6 f90c 	bl	80005f8 <__aeabi_dmul>
 800a3e0:	4b86      	ldr	r3, [pc, #536]	; (800a5fc <_dtoa_r+0x64c>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f7f5 ff52 	bl	800028c <__adddf3>
 800a3e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3f0:	9303      	str	r3, [sp, #12]
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	d158      	bne.n	800a4a8 <_dtoa_r+0x4f8>
 800a3f6:	4b82      	ldr	r3, [pc, #520]	; (800a600 <_dtoa_r+0x650>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4640      	mov	r0, r8
 800a3fc:	4649      	mov	r1, r9
 800a3fe:	f7f5 ff43 	bl	8000288 <__aeabi_dsub>
 800a402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	f7f6 fb85 	bl	8000b18 <__aeabi_dcmpgt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f040 8296 	bne.w	800a940 <_dtoa_r+0x990>
 800a414:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a418:	4640      	mov	r0, r8
 800a41a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a41e:	4649      	mov	r1, r9
 800a420:	f7f6 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800a424:	2800      	cmp	r0, #0
 800a426:	f040 8289 	bne.w	800a93c <_dtoa_r+0x98c>
 800a42a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a430:	2b00      	cmp	r3, #0
 800a432:	f2c0 814e 	blt.w	800a6d2 <_dtoa_r+0x722>
 800a436:	f1bb 0f0e 	cmp.w	fp, #14
 800a43a:	f300 814a 	bgt.w	800a6d2 <_dtoa_r+0x722>
 800a43e:	4b6b      	ldr	r3, [pc, #428]	; (800a5ec <_dtoa_r+0x63c>)
 800a440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a444:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f280 80dc 	bge.w	800a608 <_dtoa_r+0x658>
 800a450:	9b04      	ldr	r3, [sp, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f300 80d8 	bgt.w	800a608 <_dtoa_r+0x658>
 800a458:	f040 826f 	bne.w	800a93a <_dtoa_r+0x98a>
 800a45c:	4b68      	ldr	r3, [pc, #416]	; (800a600 <_dtoa_r+0x650>)
 800a45e:	2200      	movs	r2, #0
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a46c:	f7f6 fb4a 	bl	8000b04 <__aeabi_dcmpge>
 800a470:	9e04      	ldr	r6, [sp, #16]
 800a472:	4637      	mov	r7, r6
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 8245 	bne.w	800a904 <_dtoa_r+0x954>
 800a47a:	9d00      	ldr	r5, [sp, #0]
 800a47c:	2331      	movs	r3, #49	; 0x31
 800a47e:	f805 3b01 	strb.w	r3, [r5], #1
 800a482:	f10b 0b01 	add.w	fp, fp, #1
 800a486:	e241      	b.n	800a90c <_dtoa_r+0x95c>
 800a488:	07f2      	lsls	r2, r6, #31
 800a48a:	d505      	bpl.n	800a498 <_dtoa_r+0x4e8>
 800a48c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	3501      	adds	r5, #1
 800a496:	2301      	movs	r3, #1
 800a498:	1076      	asrs	r6, r6, #1
 800a49a:	3708      	adds	r7, #8
 800a49c:	e773      	b.n	800a386 <_dtoa_r+0x3d6>
 800a49e:	2502      	movs	r5, #2
 800a4a0:	e775      	b.n	800a38e <_dtoa_r+0x3de>
 800a4a2:	9e04      	ldr	r6, [sp, #16]
 800a4a4:	465f      	mov	r7, fp
 800a4a6:	e792      	b.n	800a3ce <_dtoa_r+0x41e>
 800a4a8:	9900      	ldr	r1, [sp, #0]
 800a4aa:	4b50      	ldr	r3, [pc, #320]	; (800a5ec <_dtoa_r+0x63c>)
 800a4ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4b0:	4431      	add	r1, r6
 800a4b2:	9102      	str	r1, [sp, #8]
 800a4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4b6:	eeb0 9a47 	vmov.f32	s18, s14
 800a4ba:	eef0 9a67 	vmov.f32	s19, s15
 800a4be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4c6:	2900      	cmp	r1, #0
 800a4c8:	d044      	beq.n	800a554 <_dtoa_r+0x5a4>
 800a4ca:	494e      	ldr	r1, [pc, #312]	; (800a604 <_dtoa_r+0x654>)
 800a4cc:	2000      	movs	r0, #0
 800a4ce:	f7f6 f9bd 	bl	800084c <__aeabi_ddiv>
 800a4d2:	ec53 2b19 	vmov	r2, r3, d9
 800a4d6:	f7f5 fed7 	bl	8000288 <__aeabi_dsub>
 800a4da:	9d00      	ldr	r5, [sp, #0]
 800a4dc:	ec41 0b19 	vmov	d9, r0, r1
 800a4e0:	4649      	mov	r1, r9
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	f7f6 fb38 	bl	8000b58 <__aeabi_d2iz>
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	f7f6 f81b 	bl	8000524 <__aeabi_i2d>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	f7f5 fec7 	bl	8000288 <__aeabi_dsub>
 800a4fa:	3630      	adds	r6, #48	; 0x30
 800a4fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a500:	ec53 2b19 	vmov	r2, r3, d9
 800a504:	4680      	mov	r8, r0
 800a506:	4689      	mov	r9, r1
 800a508:	f7f6 fae8 	bl	8000adc <__aeabi_dcmplt>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d164      	bne.n	800a5da <_dtoa_r+0x62a>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	4937      	ldr	r1, [pc, #220]	; (800a5f4 <_dtoa_r+0x644>)
 800a516:	2000      	movs	r0, #0
 800a518:	f7f5 feb6 	bl	8000288 <__aeabi_dsub>
 800a51c:	ec53 2b19 	vmov	r2, r3, d9
 800a520:	f7f6 fadc 	bl	8000adc <__aeabi_dcmplt>
 800a524:	2800      	cmp	r0, #0
 800a526:	f040 80b6 	bne.w	800a696 <_dtoa_r+0x6e6>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	429d      	cmp	r5, r3
 800a52e:	f43f af7c 	beq.w	800a42a <_dtoa_r+0x47a>
 800a532:	4b31      	ldr	r3, [pc, #196]	; (800a5f8 <_dtoa_r+0x648>)
 800a534:	ec51 0b19 	vmov	r0, r1, d9
 800a538:	2200      	movs	r2, #0
 800a53a:	f7f6 f85d 	bl	80005f8 <__aeabi_dmul>
 800a53e:	4b2e      	ldr	r3, [pc, #184]	; (800a5f8 <_dtoa_r+0x648>)
 800a540:	ec41 0b19 	vmov	d9, r0, r1
 800a544:	2200      	movs	r2, #0
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	f7f6 f855 	bl	80005f8 <__aeabi_dmul>
 800a54e:	4680      	mov	r8, r0
 800a550:	4689      	mov	r9, r1
 800a552:	e7c5      	b.n	800a4e0 <_dtoa_r+0x530>
 800a554:	ec51 0b17 	vmov	r0, r1, d7
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	9b02      	ldr	r3, [sp, #8]
 800a55e:	9d00      	ldr	r5, [sp, #0]
 800a560:	930f      	str	r3, [sp, #60]	; 0x3c
 800a562:	ec41 0b19 	vmov	d9, r0, r1
 800a566:	4649      	mov	r1, r9
 800a568:	4640      	mov	r0, r8
 800a56a:	f7f6 faf5 	bl	8000b58 <__aeabi_d2iz>
 800a56e:	4606      	mov	r6, r0
 800a570:	f7f5 ffd8 	bl	8000524 <__aeabi_i2d>
 800a574:	3630      	adds	r6, #48	; 0x30
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4640      	mov	r0, r8
 800a57c:	4649      	mov	r1, r9
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	f805 6b01 	strb.w	r6, [r5], #1
 800a586:	9b02      	ldr	r3, [sp, #8]
 800a588:	429d      	cmp	r5, r3
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	f04f 0200 	mov.w	r2, #0
 800a592:	d124      	bne.n	800a5de <_dtoa_r+0x62e>
 800a594:	4b1b      	ldr	r3, [pc, #108]	; (800a604 <_dtoa_r+0x654>)
 800a596:	ec51 0b19 	vmov	r0, r1, d9
 800a59a:	f7f5 fe77 	bl	800028c <__adddf3>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f6 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d173      	bne.n	800a696 <_dtoa_r+0x6e6>
 800a5ae:	ec53 2b19 	vmov	r2, r3, d9
 800a5b2:	4914      	ldr	r1, [pc, #80]	; (800a604 <_dtoa_r+0x654>)
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f7f5 fe67 	bl	8000288 <__aeabi_dsub>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	f7f6 fa8b 	bl	8000adc <__aeabi_dcmplt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f af2f 	beq.w	800a42a <_dtoa_r+0x47a>
 800a5cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a5ce:	1e6b      	subs	r3, r5, #1
 800a5d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5d6:	2b30      	cmp	r3, #48	; 0x30
 800a5d8:	d0f8      	beq.n	800a5cc <_dtoa_r+0x61c>
 800a5da:	46bb      	mov	fp, r7
 800a5dc:	e04a      	b.n	800a674 <_dtoa_r+0x6c4>
 800a5de:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <_dtoa_r+0x648>)
 800a5e0:	f7f6 f80a 	bl	80005f8 <__aeabi_dmul>
 800a5e4:	4680      	mov	r8, r0
 800a5e6:	4689      	mov	r9, r1
 800a5e8:	e7bd      	b.n	800a566 <_dtoa_r+0x5b6>
 800a5ea:	bf00      	nop
 800a5ec:	0800c308 	.word	0x0800c308
 800a5f0:	0800c2e0 	.word	0x0800c2e0
 800a5f4:	3ff00000 	.word	0x3ff00000
 800a5f8:	40240000 	.word	0x40240000
 800a5fc:	401c0000 	.word	0x401c0000
 800a600:	40140000 	.word	0x40140000
 800a604:	3fe00000 	.word	0x3fe00000
 800a608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a60c:	9d00      	ldr	r5, [sp, #0]
 800a60e:	4642      	mov	r2, r8
 800a610:	464b      	mov	r3, r9
 800a612:	4630      	mov	r0, r6
 800a614:	4639      	mov	r1, r7
 800a616:	f7f6 f919 	bl	800084c <__aeabi_ddiv>
 800a61a:	f7f6 fa9d 	bl	8000b58 <__aeabi_d2iz>
 800a61e:	9001      	str	r0, [sp, #4]
 800a620:	f7f5 ff80 	bl	8000524 <__aeabi_i2d>
 800a624:	4642      	mov	r2, r8
 800a626:	464b      	mov	r3, r9
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f5 fe28 	bl	8000288 <__aeabi_dsub>
 800a638:	9e01      	ldr	r6, [sp, #4]
 800a63a:	9f04      	ldr	r7, [sp, #16]
 800a63c:	3630      	adds	r6, #48	; 0x30
 800a63e:	f805 6b01 	strb.w	r6, [r5], #1
 800a642:	9e00      	ldr	r6, [sp, #0]
 800a644:	1bae      	subs	r6, r5, r6
 800a646:	42b7      	cmp	r7, r6
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	d134      	bne.n	800a6b8 <_dtoa_r+0x708>
 800a64e:	f7f5 fe1d 	bl	800028c <__adddf3>
 800a652:	4642      	mov	r2, r8
 800a654:	464b      	mov	r3, r9
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	f7f6 fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800a65e:	b9c8      	cbnz	r0, 800a694 <_dtoa_r+0x6e4>
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	4630      	mov	r0, r6
 800a666:	4639      	mov	r1, r7
 800a668:	f7f6 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66c:	b110      	cbz	r0, 800a674 <_dtoa_r+0x6c4>
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	07db      	lsls	r3, r3, #31
 800a672:	d40f      	bmi.n	800a694 <_dtoa_r+0x6e4>
 800a674:	4651      	mov	r1, sl
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fbcc 	bl	800ae14 <_Bfree>
 800a67c:	2300      	movs	r3, #0
 800a67e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a680:	702b      	strb	r3, [r5, #0]
 800a682:	f10b 0301 	add.w	r3, fp, #1
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f43f ace2 	beq.w	800a054 <_dtoa_r+0xa4>
 800a690:	601d      	str	r5, [r3, #0]
 800a692:	e4df      	b.n	800a054 <_dtoa_r+0xa4>
 800a694:	465f      	mov	r7, fp
 800a696:	462b      	mov	r3, r5
 800a698:	461d      	mov	r5, r3
 800a69a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a69e:	2a39      	cmp	r2, #57	; 0x39
 800a6a0:	d106      	bne.n	800a6b0 <_dtoa_r+0x700>
 800a6a2:	9a00      	ldr	r2, [sp, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d1f7      	bne.n	800a698 <_dtoa_r+0x6e8>
 800a6a8:	9900      	ldr	r1, [sp, #0]
 800a6aa:	2230      	movs	r2, #48	; 0x30
 800a6ac:	3701      	adds	r7, #1
 800a6ae:	700a      	strb	r2, [r1, #0]
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	701a      	strb	r2, [r3, #0]
 800a6b6:	e790      	b.n	800a5da <_dtoa_r+0x62a>
 800a6b8:	4ba3      	ldr	r3, [pc, #652]	; (800a948 <_dtoa_r+0x998>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	f7f6 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d09e      	beq.n	800a60e <_dtoa_r+0x65e>
 800a6d0:	e7d0      	b.n	800a674 <_dtoa_r+0x6c4>
 800a6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	f000 80ca 	beq.w	800a86e <_dtoa_r+0x8be>
 800a6da:	9a07      	ldr	r2, [sp, #28]
 800a6dc:	2a01      	cmp	r2, #1
 800a6de:	f300 80ad 	bgt.w	800a83c <_dtoa_r+0x88c>
 800a6e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6e4:	2a00      	cmp	r2, #0
 800a6e6:	f000 80a5 	beq.w	800a834 <_dtoa_r+0x884>
 800a6ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6ee:	9e08      	ldr	r6, [sp, #32]
 800a6f0:	9d05      	ldr	r5, [sp, #20]
 800a6f2:	9a05      	ldr	r2, [sp, #20]
 800a6f4:	441a      	add	r2, r3
 800a6f6:	9205      	str	r2, [sp, #20]
 800a6f8:	9a06      	ldr	r2, [sp, #24]
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	441a      	add	r2, r3
 800a6fe:	4620      	mov	r0, r4
 800a700:	9206      	str	r2, [sp, #24]
 800a702:	f000 fc3d 	bl	800af80 <__i2b>
 800a706:	4607      	mov	r7, r0
 800a708:	b165      	cbz	r5, 800a724 <_dtoa_r+0x774>
 800a70a:	9b06      	ldr	r3, [sp, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	dd09      	ble.n	800a724 <_dtoa_r+0x774>
 800a710:	42ab      	cmp	r3, r5
 800a712:	9a05      	ldr	r2, [sp, #20]
 800a714:	bfa8      	it	ge
 800a716:	462b      	movge	r3, r5
 800a718:	1ad2      	subs	r2, r2, r3
 800a71a:	9205      	str	r2, [sp, #20]
 800a71c:	9a06      	ldr	r2, [sp, #24]
 800a71e:	1aed      	subs	r5, r5, r3
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	9306      	str	r3, [sp, #24]
 800a724:	9b08      	ldr	r3, [sp, #32]
 800a726:	b1f3      	cbz	r3, 800a766 <_dtoa_r+0x7b6>
 800a728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 80a3 	beq.w	800a876 <_dtoa_r+0x8c6>
 800a730:	2e00      	cmp	r6, #0
 800a732:	dd10      	ble.n	800a756 <_dtoa_r+0x7a6>
 800a734:	4639      	mov	r1, r7
 800a736:	4632      	mov	r2, r6
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fce1 	bl	800b100 <__pow5mult>
 800a73e:	4652      	mov	r2, sl
 800a740:	4601      	mov	r1, r0
 800a742:	4607      	mov	r7, r0
 800a744:	4620      	mov	r0, r4
 800a746:	f000 fc31 	bl	800afac <__multiply>
 800a74a:	4651      	mov	r1, sl
 800a74c:	4680      	mov	r8, r0
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 fb60 	bl	800ae14 <_Bfree>
 800a754:	46c2      	mov	sl, r8
 800a756:	9b08      	ldr	r3, [sp, #32]
 800a758:	1b9a      	subs	r2, r3, r6
 800a75a:	d004      	beq.n	800a766 <_dtoa_r+0x7b6>
 800a75c:	4651      	mov	r1, sl
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 fcce 	bl	800b100 <__pow5mult>
 800a764:	4682      	mov	sl, r0
 800a766:	2101      	movs	r1, #1
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fc09 	bl	800af80 <__i2b>
 800a76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a770:	2b00      	cmp	r3, #0
 800a772:	4606      	mov	r6, r0
 800a774:	f340 8081 	ble.w	800a87a <_dtoa_r+0x8ca>
 800a778:	461a      	mov	r2, r3
 800a77a:	4601      	mov	r1, r0
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 fcbf 	bl	800b100 <__pow5mult>
 800a782:	9b07      	ldr	r3, [sp, #28]
 800a784:	2b01      	cmp	r3, #1
 800a786:	4606      	mov	r6, r0
 800a788:	dd7a      	ble.n	800a880 <_dtoa_r+0x8d0>
 800a78a:	f04f 0800 	mov.w	r8, #0
 800a78e:	6933      	ldr	r3, [r6, #16]
 800a790:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a794:	6918      	ldr	r0, [r3, #16]
 800a796:	f000 fba5 	bl	800aee4 <__hi0bits>
 800a79a:	f1c0 0020 	rsb	r0, r0, #32
 800a79e:	9b06      	ldr	r3, [sp, #24]
 800a7a0:	4418      	add	r0, r3
 800a7a2:	f010 001f 	ands.w	r0, r0, #31
 800a7a6:	f000 8094 	beq.w	800a8d2 <_dtoa_r+0x922>
 800a7aa:	f1c0 0320 	rsb	r3, r0, #32
 800a7ae:	2b04      	cmp	r3, #4
 800a7b0:	f340 8085 	ble.w	800a8be <_dtoa_r+0x90e>
 800a7b4:	9b05      	ldr	r3, [sp, #20]
 800a7b6:	f1c0 001c 	rsb	r0, r0, #28
 800a7ba:	4403      	add	r3, r0
 800a7bc:	9305      	str	r3, [sp, #20]
 800a7be:	9b06      	ldr	r3, [sp, #24]
 800a7c0:	4403      	add	r3, r0
 800a7c2:	4405      	add	r5, r0
 800a7c4:	9306      	str	r3, [sp, #24]
 800a7c6:	9b05      	ldr	r3, [sp, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dd05      	ble.n	800a7d8 <_dtoa_r+0x828>
 800a7cc:	4651      	mov	r1, sl
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 fcef 	bl	800b1b4 <__lshift>
 800a7d6:	4682      	mov	sl, r0
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dd05      	ble.n	800a7ea <_dtoa_r+0x83a>
 800a7de:	4631      	mov	r1, r6
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fce6 	bl	800b1b4 <__lshift>
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d072      	beq.n	800a8d6 <_dtoa_r+0x926>
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	f000 fd4a 	bl	800b28c <__mcmp>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	da6c      	bge.n	800a8d6 <_dtoa_r+0x926>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4651      	mov	r1, sl
 800a800:	220a      	movs	r2, #10
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fb28 	bl	800ae58 <__multadd>
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a80e:	4682      	mov	sl, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 81b0 	beq.w	800ab76 <_dtoa_r+0xbc6>
 800a816:	2300      	movs	r3, #0
 800a818:	4639      	mov	r1, r7
 800a81a:	220a      	movs	r2, #10
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 fb1b 	bl	800ae58 <__multadd>
 800a822:	9b01      	ldr	r3, [sp, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	4607      	mov	r7, r0
 800a828:	f300 8096 	bgt.w	800a958 <_dtoa_r+0x9a8>
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	dc59      	bgt.n	800a8e6 <_dtoa_r+0x936>
 800a832:	e091      	b.n	800a958 <_dtoa_r+0x9a8>
 800a834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a83a:	e758      	b.n	800a6ee <_dtoa_r+0x73e>
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	1e5e      	subs	r6, r3, #1
 800a840:	9b08      	ldr	r3, [sp, #32]
 800a842:	42b3      	cmp	r3, r6
 800a844:	bfbf      	itttt	lt
 800a846:	9b08      	ldrlt	r3, [sp, #32]
 800a848:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a84a:	9608      	strlt	r6, [sp, #32]
 800a84c:	1af3      	sublt	r3, r6, r3
 800a84e:	bfb4      	ite	lt
 800a850:	18d2      	addlt	r2, r2, r3
 800a852:	1b9e      	subge	r6, r3, r6
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	bfbc      	itt	lt
 800a858:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a85a:	2600      	movlt	r6, #0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	bfb7      	itett	lt
 800a860:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a864:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a868:	1a9d      	sublt	r5, r3, r2
 800a86a:	2300      	movlt	r3, #0
 800a86c:	e741      	b.n	800a6f2 <_dtoa_r+0x742>
 800a86e:	9e08      	ldr	r6, [sp, #32]
 800a870:	9d05      	ldr	r5, [sp, #20]
 800a872:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a874:	e748      	b.n	800a708 <_dtoa_r+0x758>
 800a876:	9a08      	ldr	r2, [sp, #32]
 800a878:	e770      	b.n	800a75c <_dtoa_r+0x7ac>
 800a87a:	9b07      	ldr	r3, [sp, #28]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	dc19      	bgt.n	800a8b4 <_dtoa_r+0x904>
 800a880:	9b02      	ldr	r3, [sp, #8]
 800a882:	b9bb      	cbnz	r3, 800a8b4 <_dtoa_r+0x904>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a88a:	b99b      	cbnz	r3, 800a8b4 <_dtoa_r+0x904>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a892:	0d1b      	lsrs	r3, r3, #20
 800a894:	051b      	lsls	r3, r3, #20
 800a896:	b183      	cbz	r3, 800a8ba <_dtoa_r+0x90a>
 800a898:	9b05      	ldr	r3, [sp, #20]
 800a89a:	3301      	adds	r3, #1
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	9b06      	ldr	r3, [sp, #24]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	f04f 0801 	mov.w	r8, #1
 800a8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f47f af6f 	bne.w	800a78e <_dtoa_r+0x7de>
 800a8b0:	2001      	movs	r0, #1
 800a8b2:	e774      	b.n	800a79e <_dtoa_r+0x7ee>
 800a8b4:	f04f 0800 	mov.w	r8, #0
 800a8b8:	e7f6      	b.n	800a8a8 <_dtoa_r+0x8f8>
 800a8ba:	4698      	mov	r8, r3
 800a8bc:	e7f4      	b.n	800a8a8 <_dtoa_r+0x8f8>
 800a8be:	d082      	beq.n	800a7c6 <_dtoa_r+0x816>
 800a8c0:	9a05      	ldr	r2, [sp, #20]
 800a8c2:	331c      	adds	r3, #28
 800a8c4:	441a      	add	r2, r3
 800a8c6:	9205      	str	r2, [sp, #20]
 800a8c8:	9a06      	ldr	r2, [sp, #24]
 800a8ca:	441a      	add	r2, r3
 800a8cc:	441d      	add	r5, r3
 800a8ce:	9206      	str	r2, [sp, #24]
 800a8d0:	e779      	b.n	800a7c6 <_dtoa_r+0x816>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	e7f4      	b.n	800a8c0 <_dtoa_r+0x910>
 800a8d6:	9b04      	ldr	r3, [sp, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc37      	bgt.n	800a94c <_dtoa_r+0x99c>
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	dd34      	ble.n	800a94c <_dtoa_r+0x99c>
 800a8e2:	9b04      	ldr	r3, [sp, #16]
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	b963      	cbnz	r3, 800a904 <_dtoa_r+0x954>
 800a8ea:	4631      	mov	r1, r6
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f000 fab2 	bl	800ae58 <__multadd>
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	f000 fcc7 	bl	800b28c <__mcmp>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f73f adbb 	bgt.w	800a47a <_dtoa_r+0x4ca>
 800a904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a906:	9d00      	ldr	r5, [sp, #0]
 800a908:	ea6f 0b03 	mvn.w	fp, r3
 800a90c:	f04f 0800 	mov.w	r8, #0
 800a910:	4631      	mov	r1, r6
 800a912:	4620      	mov	r0, r4
 800a914:	f000 fa7e 	bl	800ae14 <_Bfree>
 800a918:	2f00      	cmp	r7, #0
 800a91a:	f43f aeab 	beq.w	800a674 <_dtoa_r+0x6c4>
 800a91e:	f1b8 0f00 	cmp.w	r8, #0
 800a922:	d005      	beq.n	800a930 <_dtoa_r+0x980>
 800a924:	45b8      	cmp	r8, r7
 800a926:	d003      	beq.n	800a930 <_dtoa_r+0x980>
 800a928:	4641      	mov	r1, r8
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fa72 	bl	800ae14 <_Bfree>
 800a930:	4639      	mov	r1, r7
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fa6e 	bl	800ae14 <_Bfree>
 800a938:	e69c      	b.n	800a674 <_dtoa_r+0x6c4>
 800a93a:	2600      	movs	r6, #0
 800a93c:	4637      	mov	r7, r6
 800a93e:	e7e1      	b.n	800a904 <_dtoa_r+0x954>
 800a940:	46bb      	mov	fp, r7
 800a942:	4637      	mov	r7, r6
 800a944:	e599      	b.n	800a47a <_dtoa_r+0x4ca>
 800a946:	bf00      	nop
 800a948:	40240000 	.word	0x40240000
 800a94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 80c8 	beq.w	800aae4 <_dtoa_r+0xb34>
 800a954:	9b04      	ldr	r3, [sp, #16]
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	2d00      	cmp	r5, #0
 800a95a:	dd05      	ble.n	800a968 <_dtoa_r+0x9b8>
 800a95c:	4639      	mov	r1, r7
 800a95e:	462a      	mov	r2, r5
 800a960:	4620      	mov	r0, r4
 800a962:	f000 fc27 	bl	800b1b4 <__lshift>
 800a966:	4607      	mov	r7, r0
 800a968:	f1b8 0f00 	cmp.w	r8, #0
 800a96c:	d05b      	beq.n	800aa26 <_dtoa_r+0xa76>
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fa0f 	bl	800ad94 <_Balloc>
 800a976:	4605      	mov	r5, r0
 800a978:	b928      	cbnz	r0, 800a986 <_dtoa_r+0x9d6>
 800a97a:	4b83      	ldr	r3, [pc, #524]	; (800ab88 <_dtoa_r+0xbd8>)
 800a97c:	4602      	mov	r2, r0
 800a97e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a982:	f7ff bb2e 	b.w	8009fe2 <_dtoa_r+0x32>
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	3202      	adds	r2, #2
 800a98a:	0092      	lsls	r2, r2, #2
 800a98c:	f107 010c 	add.w	r1, r7, #12
 800a990:	300c      	adds	r0, #12
 800a992:	f7ff fa74 	bl	8009e7e <memcpy>
 800a996:	2201      	movs	r2, #1
 800a998:	4629      	mov	r1, r5
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fc0a 	bl	800b1b4 <__lshift>
 800a9a0:	9b00      	ldr	r3, [sp, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	9308      	str	r3, [sp, #32]
 800a9ae:	9b02      	ldr	r3, [sp, #8]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	46b8      	mov	r8, r7
 800a9b6:	9306      	str	r3, [sp, #24]
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	9b04      	ldr	r3, [sp, #16]
 800a9bc:	4631      	mov	r1, r6
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	f7ff fa69 	bl	8009e9a <quorem>
 800a9c8:	4641      	mov	r1, r8
 800a9ca:	9002      	str	r0, [sp, #8]
 800a9cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9d0:	4650      	mov	r0, sl
 800a9d2:	f000 fc5b 	bl	800b28c <__mcmp>
 800a9d6:	463a      	mov	r2, r7
 800a9d8:	9005      	str	r0, [sp, #20]
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 fc71 	bl	800b2c4 <__mdiff>
 800a9e2:	68c2      	ldr	r2, [r0, #12]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	bb02      	cbnz	r2, 800aa2a <_dtoa_r+0xa7a>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	4650      	mov	r0, sl
 800a9ec:	f000 fc4e 	bl	800b28c <__mcmp>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a9f8:	f000 fa0c 	bl	800ae14 <_Bfree>
 800a9fc:	9b07      	ldr	r3, [sp, #28]
 800a9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa00:	9d04      	ldr	r5, [sp, #16]
 800aa02:	ea43 0102 	orr.w	r1, r3, r2
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	4319      	orrs	r1, r3
 800aa0a:	d110      	bne.n	800aa2e <_dtoa_r+0xa7e>
 800aa0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa10:	d029      	beq.n	800aa66 <_dtoa_r+0xab6>
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd02      	ble.n	800aa1e <_dtoa_r+0xa6e>
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	f883 9000 	strb.w	r9, [r3]
 800aa24:	e774      	b.n	800a910 <_dtoa_r+0x960>
 800aa26:	4638      	mov	r0, r7
 800aa28:	e7ba      	b.n	800a9a0 <_dtoa_r+0x9f0>
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	e7e1      	b.n	800a9f2 <_dtoa_r+0xa42>
 800aa2e:	9b05      	ldr	r3, [sp, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	db04      	blt.n	800aa3e <_dtoa_r+0xa8e>
 800aa34:	9907      	ldr	r1, [sp, #28]
 800aa36:	430b      	orrs	r3, r1
 800aa38:	9906      	ldr	r1, [sp, #24]
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	d120      	bne.n	800aa80 <_dtoa_r+0xad0>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	dded      	ble.n	800aa1e <_dtoa_r+0xa6e>
 800aa42:	4651      	mov	r1, sl
 800aa44:	2201      	movs	r2, #1
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 fbb4 	bl	800b1b4 <__lshift>
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4682      	mov	sl, r0
 800aa50:	f000 fc1c 	bl	800b28c <__mcmp>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	dc03      	bgt.n	800aa60 <_dtoa_r+0xab0>
 800aa58:	d1e1      	bne.n	800aa1e <_dtoa_r+0xa6e>
 800aa5a:	f019 0f01 	tst.w	r9, #1
 800aa5e:	d0de      	beq.n	800aa1e <_dtoa_r+0xa6e>
 800aa60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa64:	d1d8      	bne.n	800aa18 <_dtoa_r+0xa68>
 800aa66:	9a01      	ldr	r2, [sp, #4]
 800aa68:	2339      	movs	r3, #57	; 0x39
 800aa6a:	7013      	strb	r3, [r2, #0]
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	461d      	mov	r5, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa76:	2a39      	cmp	r2, #57	; 0x39
 800aa78:	d06c      	beq.n	800ab54 <_dtoa_r+0xba4>
 800aa7a:	3201      	adds	r2, #1
 800aa7c:	701a      	strb	r2, [r3, #0]
 800aa7e:	e747      	b.n	800a910 <_dtoa_r+0x960>
 800aa80:	2a00      	cmp	r2, #0
 800aa82:	dd07      	ble.n	800aa94 <_dtoa_r+0xae4>
 800aa84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa88:	d0ed      	beq.n	800aa66 <_dtoa_r+0xab6>
 800aa8a:	9a01      	ldr	r2, [sp, #4]
 800aa8c:	f109 0301 	add.w	r3, r9, #1
 800aa90:	7013      	strb	r3, [r2, #0]
 800aa92:	e73d      	b.n	800a910 <_dtoa_r+0x960>
 800aa94:	9b04      	ldr	r3, [sp, #16]
 800aa96:	9a08      	ldr	r2, [sp, #32]
 800aa98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d043      	beq.n	800ab28 <_dtoa_r+0xb78>
 800aaa0:	4651      	mov	r1, sl
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	220a      	movs	r2, #10
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f9d6 	bl	800ae58 <__multadd>
 800aaac:	45b8      	cmp	r8, r7
 800aaae:	4682      	mov	sl, r0
 800aab0:	f04f 0300 	mov.w	r3, #0
 800aab4:	f04f 020a 	mov.w	r2, #10
 800aab8:	4641      	mov	r1, r8
 800aaba:	4620      	mov	r0, r4
 800aabc:	d107      	bne.n	800aace <_dtoa_r+0xb1e>
 800aabe:	f000 f9cb 	bl	800ae58 <__multadd>
 800aac2:	4680      	mov	r8, r0
 800aac4:	4607      	mov	r7, r0
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	3301      	adds	r3, #1
 800aaca:	9304      	str	r3, [sp, #16]
 800aacc:	e775      	b.n	800a9ba <_dtoa_r+0xa0a>
 800aace:	f000 f9c3 	bl	800ae58 <__multadd>
 800aad2:	4639      	mov	r1, r7
 800aad4:	4680      	mov	r8, r0
 800aad6:	2300      	movs	r3, #0
 800aad8:	220a      	movs	r2, #10
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f9bc 	bl	800ae58 <__multadd>
 800aae0:	4607      	mov	r7, r0
 800aae2:	e7f0      	b.n	800aac6 <_dtoa_r+0xb16>
 800aae4:	9b04      	ldr	r3, [sp, #16]
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	9d00      	ldr	r5, [sp, #0]
 800aaea:	4631      	mov	r1, r6
 800aaec:	4650      	mov	r0, sl
 800aaee:	f7ff f9d4 	bl	8009e9a <quorem>
 800aaf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	f805 9b01 	strb.w	r9, [r5], #1
 800aafc:	1aea      	subs	r2, r5, r3
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	dd07      	ble.n	800ab14 <_dtoa_r+0xb64>
 800ab04:	4651      	mov	r1, sl
 800ab06:	2300      	movs	r3, #0
 800ab08:	220a      	movs	r2, #10
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 f9a4 	bl	800ae58 <__multadd>
 800ab10:	4682      	mov	sl, r0
 800ab12:	e7ea      	b.n	800aaea <_dtoa_r+0xb3a>
 800ab14:	9b01      	ldr	r3, [sp, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfc8      	it	gt
 800ab1a:	461d      	movgt	r5, r3
 800ab1c:	9b00      	ldr	r3, [sp, #0]
 800ab1e:	bfd8      	it	le
 800ab20:	2501      	movle	r5, #1
 800ab22:	441d      	add	r5, r3
 800ab24:	f04f 0800 	mov.w	r8, #0
 800ab28:	4651      	mov	r1, sl
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 fb41 	bl	800b1b4 <__lshift>
 800ab32:	4631      	mov	r1, r6
 800ab34:	4682      	mov	sl, r0
 800ab36:	f000 fba9 	bl	800b28c <__mcmp>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	dc96      	bgt.n	800aa6c <_dtoa_r+0xabc>
 800ab3e:	d102      	bne.n	800ab46 <_dtoa_r+0xb96>
 800ab40:	f019 0f01 	tst.w	r9, #1
 800ab44:	d192      	bne.n	800aa6c <_dtoa_r+0xabc>
 800ab46:	462b      	mov	r3, r5
 800ab48:	461d      	mov	r5, r3
 800ab4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab4e:	2a30      	cmp	r2, #48	; 0x30
 800ab50:	d0fa      	beq.n	800ab48 <_dtoa_r+0xb98>
 800ab52:	e6dd      	b.n	800a910 <_dtoa_r+0x960>
 800ab54:	9a00      	ldr	r2, [sp, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d189      	bne.n	800aa6e <_dtoa_r+0xabe>
 800ab5a:	f10b 0b01 	add.w	fp, fp, #1
 800ab5e:	2331      	movs	r3, #49	; 0x31
 800ab60:	e796      	b.n	800aa90 <_dtoa_r+0xae0>
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <_dtoa_r+0xbdc>)
 800ab64:	f7ff ba99 	b.w	800a09a <_dtoa_r+0xea>
 800ab68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f47f aa6d 	bne.w	800a04a <_dtoa_r+0x9a>
 800ab70:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <_dtoa_r+0xbe0>)
 800ab72:	f7ff ba92 	b.w	800a09a <_dtoa_r+0xea>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dcb5      	bgt.n	800aae8 <_dtoa_r+0xb38>
 800ab7c:	9b07      	ldr	r3, [sp, #28]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	f73f aeb1 	bgt.w	800a8e6 <_dtoa_r+0x936>
 800ab84:	e7b0      	b.n	800aae8 <_dtoa_r+0xb38>
 800ab86:	bf00      	nop
 800ab88:	0800c270 	.word	0x0800c270
 800ab8c:	0800c1d0 	.word	0x0800c1d0
 800ab90:	0800c1f4 	.word	0x0800c1f4

0800ab94 <_free_r>:
 800ab94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab96:	2900      	cmp	r1, #0
 800ab98:	d044      	beq.n	800ac24 <_free_r+0x90>
 800ab9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab9e:	9001      	str	r0, [sp, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f1a1 0404 	sub.w	r4, r1, #4
 800aba6:	bfb8      	it	lt
 800aba8:	18e4      	addlt	r4, r4, r3
 800abaa:	f000 f8e7 	bl	800ad7c <__malloc_lock>
 800abae:	4a1e      	ldr	r2, [pc, #120]	; (800ac28 <_free_r+0x94>)
 800abb0:	9801      	ldr	r0, [sp, #4]
 800abb2:	6813      	ldr	r3, [r2, #0]
 800abb4:	b933      	cbnz	r3, 800abc4 <_free_r+0x30>
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	6014      	str	r4, [r2, #0]
 800abba:	b003      	add	sp, #12
 800abbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc0:	f000 b8e2 	b.w	800ad88 <__malloc_unlock>
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	d908      	bls.n	800abda <_free_r+0x46>
 800abc8:	6825      	ldr	r5, [r4, #0]
 800abca:	1961      	adds	r1, r4, r5
 800abcc:	428b      	cmp	r3, r1
 800abce:	bf01      	itttt	eq
 800abd0:	6819      	ldreq	r1, [r3, #0]
 800abd2:	685b      	ldreq	r3, [r3, #4]
 800abd4:	1949      	addeq	r1, r1, r5
 800abd6:	6021      	streq	r1, [r4, #0]
 800abd8:	e7ed      	b.n	800abb6 <_free_r+0x22>
 800abda:	461a      	mov	r2, r3
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	b10b      	cbz	r3, 800abe4 <_free_r+0x50>
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	d9fa      	bls.n	800abda <_free_r+0x46>
 800abe4:	6811      	ldr	r1, [r2, #0]
 800abe6:	1855      	adds	r5, r2, r1
 800abe8:	42a5      	cmp	r5, r4
 800abea:	d10b      	bne.n	800ac04 <_free_r+0x70>
 800abec:	6824      	ldr	r4, [r4, #0]
 800abee:	4421      	add	r1, r4
 800abf0:	1854      	adds	r4, r2, r1
 800abf2:	42a3      	cmp	r3, r4
 800abf4:	6011      	str	r1, [r2, #0]
 800abf6:	d1e0      	bne.n	800abba <_free_r+0x26>
 800abf8:	681c      	ldr	r4, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	6053      	str	r3, [r2, #4]
 800abfe:	440c      	add	r4, r1
 800ac00:	6014      	str	r4, [r2, #0]
 800ac02:	e7da      	b.n	800abba <_free_r+0x26>
 800ac04:	d902      	bls.n	800ac0c <_free_r+0x78>
 800ac06:	230c      	movs	r3, #12
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	e7d6      	b.n	800abba <_free_r+0x26>
 800ac0c:	6825      	ldr	r5, [r4, #0]
 800ac0e:	1961      	adds	r1, r4, r5
 800ac10:	428b      	cmp	r3, r1
 800ac12:	bf04      	itt	eq
 800ac14:	6819      	ldreq	r1, [r3, #0]
 800ac16:	685b      	ldreq	r3, [r3, #4]
 800ac18:	6063      	str	r3, [r4, #4]
 800ac1a:	bf04      	itt	eq
 800ac1c:	1949      	addeq	r1, r1, r5
 800ac1e:	6021      	streq	r1, [r4, #0]
 800ac20:	6054      	str	r4, [r2, #4]
 800ac22:	e7ca      	b.n	800abba <_free_r+0x26>
 800ac24:	b003      	add	sp, #12
 800ac26:	bd30      	pop	{r4, r5, pc}
 800ac28:	20000784 	.word	0x20000784

0800ac2c <malloc>:
 800ac2c:	4b02      	ldr	r3, [pc, #8]	; (800ac38 <malloc+0xc>)
 800ac2e:	4601      	mov	r1, r0
 800ac30:	6818      	ldr	r0, [r3, #0]
 800ac32:	f000 b823 	b.w	800ac7c <_malloc_r>
 800ac36:	bf00      	nop
 800ac38:	20000070 	.word	0x20000070

0800ac3c <sbrk_aligned>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	4e0e      	ldr	r6, [pc, #56]	; (800ac78 <sbrk_aligned+0x3c>)
 800ac40:	460c      	mov	r4, r1
 800ac42:	6831      	ldr	r1, [r6, #0]
 800ac44:	4605      	mov	r5, r0
 800ac46:	b911      	cbnz	r1, 800ac4e <sbrk_aligned+0x12>
 800ac48:	f000 fe40 	bl	800b8cc <_sbrk_r>
 800ac4c:	6030      	str	r0, [r6, #0]
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4628      	mov	r0, r5
 800ac52:	f000 fe3b 	bl	800b8cc <_sbrk_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	d00a      	beq.n	800ac70 <sbrk_aligned+0x34>
 800ac5a:	1cc4      	adds	r4, r0, #3
 800ac5c:	f024 0403 	bic.w	r4, r4, #3
 800ac60:	42a0      	cmp	r0, r4
 800ac62:	d007      	beq.n	800ac74 <sbrk_aligned+0x38>
 800ac64:	1a21      	subs	r1, r4, r0
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 fe30 	bl	800b8cc <_sbrk_r>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d101      	bne.n	800ac74 <sbrk_aligned+0x38>
 800ac70:	f04f 34ff 	mov.w	r4, #4294967295
 800ac74:	4620      	mov	r0, r4
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	20000788 	.word	0x20000788

0800ac7c <_malloc_r>:
 800ac7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac80:	1ccd      	adds	r5, r1, #3
 800ac82:	f025 0503 	bic.w	r5, r5, #3
 800ac86:	3508      	adds	r5, #8
 800ac88:	2d0c      	cmp	r5, #12
 800ac8a:	bf38      	it	cc
 800ac8c:	250c      	movcc	r5, #12
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	4607      	mov	r7, r0
 800ac92:	db01      	blt.n	800ac98 <_malloc_r+0x1c>
 800ac94:	42a9      	cmp	r1, r5
 800ac96:	d905      	bls.n	800aca4 <_malloc_r+0x28>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	603b      	str	r3, [r7, #0]
 800ac9c:	2600      	movs	r6, #0
 800ac9e:	4630      	mov	r0, r6
 800aca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad78 <_malloc_r+0xfc>
 800aca8:	f000 f868 	bl	800ad7c <__malloc_lock>
 800acac:	f8d8 3000 	ldr.w	r3, [r8]
 800acb0:	461c      	mov	r4, r3
 800acb2:	bb5c      	cbnz	r4, 800ad0c <_malloc_r+0x90>
 800acb4:	4629      	mov	r1, r5
 800acb6:	4638      	mov	r0, r7
 800acb8:	f7ff ffc0 	bl	800ac3c <sbrk_aligned>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	4604      	mov	r4, r0
 800acc0:	d155      	bne.n	800ad6e <_malloc_r+0xf2>
 800acc2:	f8d8 4000 	ldr.w	r4, [r8]
 800acc6:	4626      	mov	r6, r4
 800acc8:	2e00      	cmp	r6, #0
 800acca:	d145      	bne.n	800ad58 <_malloc_r+0xdc>
 800accc:	2c00      	cmp	r4, #0
 800acce:	d048      	beq.n	800ad62 <_malloc_r+0xe6>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	4631      	mov	r1, r6
 800acd4:	4638      	mov	r0, r7
 800acd6:	eb04 0903 	add.w	r9, r4, r3
 800acda:	f000 fdf7 	bl	800b8cc <_sbrk_r>
 800acde:	4581      	cmp	r9, r0
 800ace0:	d13f      	bne.n	800ad62 <_malloc_r+0xe6>
 800ace2:	6821      	ldr	r1, [r4, #0]
 800ace4:	1a6d      	subs	r5, r5, r1
 800ace6:	4629      	mov	r1, r5
 800ace8:	4638      	mov	r0, r7
 800acea:	f7ff ffa7 	bl	800ac3c <sbrk_aligned>
 800acee:	3001      	adds	r0, #1
 800acf0:	d037      	beq.n	800ad62 <_malloc_r+0xe6>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	442b      	add	r3, r5
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	f8d8 3000 	ldr.w	r3, [r8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d038      	beq.n	800ad72 <_malloc_r+0xf6>
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	42a2      	cmp	r2, r4
 800ad04:	d12b      	bne.n	800ad5e <_malloc_r+0xe2>
 800ad06:	2200      	movs	r2, #0
 800ad08:	605a      	str	r2, [r3, #4]
 800ad0a:	e00f      	b.n	800ad2c <_malloc_r+0xb0>
 800ad0c:	6822      	ldr	r2, [r4, #0]
 800ad0e:	1b52      	subs	r2, r2, r5
 800ad10:	d41f      	bmi.n	800ad52 <_malloc_r+0xd6>
 800ad12:	2a0b      	cmp	r2, #11
 800ad14:	d917      	bls.n	800ad46 <_malloc_r+0xca>
 800ad16:	1961      	adds	r1, r4, r5
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	6025      	str	r5, [r4, #0]
 800ad1c:	bf18      	it	ne
 800ad1e:	6059      	strne	r1, [r3, #4]
 800ad20:	6863      	ldr	r3, [r4, #4]
 800ad22:	bf08      	it	eq
 800ad24:	f8c8 1000 	streq.w	r1, [r8]
 800ad28:	5162      	str	r2, [r4, r5]
 800ad2a:	604b      	str	r3, [r1, #4]
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	f104 060b 	add.w	r6, r4, #11
 800ad32:	f000 f829 	bl	800ad88 <__malloc_unlock>
 800ad36:	f026 0607 	bic.w	r6, r6, #7
 800ad3a:	1d23      	adds	r3, r4, #4
 800ad3c:	1af2      	subs	r2, r6, r3
 800ad3e:	d0ae      	beq.n	800ac9e <_malloc_r+0x22>
 800ad40:	1b9b      	subs	r3, r3, r6
 800ad42:	50a3      	str	r3, [r4, r2]
 800ad44:	e7ab      	b.n	800ac9e <_malloc_r+0x22>
 800ad46:	42a3      	cmp	r3, r4
 800ad48:	6862      	ldr	r2, [r4, #4]
 800ad4a:	d1dd      	bne.n	800ad08 <_malloc_r+0x8c>
 800ad4c:	f8c8 2000 	str.w	r2, [r8]
 800ad50:	e7ec      	b.n	800ad2c <_malloc_r+0xb0>
 800ad52:	4623      	mov	r3, r4
 800ad54:	6864      	ldr	r4, [r4, #4]
 800ad56:	e7ac      	b.n	800acb2 <_malloc_r+0x36>
 800ad58:	4634      	mov	r4, r6
 800ad5a:	6876      	ldr	r6, [r6, #4]
 800ad5c:	e7b4      	b.n	800acc8 <_malloc_r+0x4c>
 800ad5e:	4613      	mov	r3, r2
 800ad60:	e7cc      	b.n	800acfc <_malloc_r+0x80>
 800ad62:	230c      	movs	r3, #12
 800ad64:	603b      	str	r3, [r7, #0]
 800ad66:	4638      	mov	r0, r7
 800ad68:	f000 f80e 	bl	800ad88 <__malloc_unlock>
 800ad6c:	e797      	b.n	800ac9e <_malloc_r+0x22>
 800ad6e:	6025      	str	r5, [r4, #0]
 800ad70:	e7dc      	b.n	800ad2c <_malloc_r+0xb0>
 800ad72:	605b      	str	r3, [r3, #4]
 800ad74:	deff      	udf	#255	; 0xff
 800ad76:	bf00      	nop
 800ad78:	20000784 	.word	0x20000784

0800ad7c <__malloc_lock>:
 800ad7c:	4801      	ldr	r0, [pc, #4]	; (800ad84 <__malloc_lock+0x8>)
 800ad7e:	f7ff b87c 	b.w	8009e7a <__retarget_lock_acquire_recursive>
 800ad82:	bf00      	nop
 800ad84:	20000780 	.word	0x20000780

0800ad88 <__malloc_unlock>:
 800ad88:	4801      	ldr	r0, [pc, #4]	; (800ad90 <__malloc_unlock+0x8>)
 800ad8a:	f7ff b877 	b.w	8009e7c <__retarget_lock_release_recursive>
 800ad8e:	bf00      	nop
 800ad90:	20000780 	.word	0x20000780

0800ad94 <_Balloc>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	69c6      	ldr	r6, [r0, #28]
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	b976      	cbnz	r6, 800adbc <_Balloc+0x28>
 800ad9e:	2010      	movs	r0, #16
 800ada0:	f7ff ff44 	bl	800ac2c <malloc>
 800ada4:	4602      	mov	r2, r0
 800ada6:	61e0      	str	r0, [r4, #28]
 800ada8:	b920      	cbnz	r0, 800adb4 <_Balloc+0x20>
 800adaa:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <_Balloc+0x78>)
 800adac:	4818      	ldr	r0, [pc, #96]	; (800ae10 <_Balloc+0x7c>)
 800adae:	216b      	movs	r1, #107	; 0x6b
 800adb0:	f000 fd9c 	bl	800b8ec <__assert_func>
 800adb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb8:	6006      	str	r6, [r0, #0]
 800adba:	60c6      	str	r6, [r0, #12]
 800adbc:	69e6      	ldr	r6, [r4, #28]
 800adbe:	68f3      	ldr	r3, [r6, #12]
 800adc0:	b183      	cbz	r3, 800ade4 <_Balloc+0x50>
 800adc2:	69e3      	ldr	r3, [r4, #28]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adca:	b9b8      	cbnz	r0, 800adfc <_Balloc+0x68>
 800adcc:	2101      	movs	r1, #1
 800adce:	fa01 f605 	lsl.w	r6, r1, r5
 800add2:	1d72      	adds	r2, r6, #5
 800add4:	0092      	lsls	r2, r2, #2
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fda6 	bl	800b928 <_calloc_r>
 800addc:	b160      	cbz	r0, 800adf8 <_Balloc+0x64>
 800adde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ade2:	e00e      	b.n	800ae02 <_Balloc+0x6e>
 800ade4:	2221      	movs	r2, #33	; 0x21
 800ade6:	2104      	movs	r1, #4
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fd9d 	bl	800b928 <_calloc_r>
 800adee:	69e3      	ldr	r3, [r4, #28]
 800adf0:	60f0      	str	r0, [r6, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1e4      	bne.n	800adc2 <_Balloc+0x2e>
 800adf8:	2000      	movs	r0, #0
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	6802      	ldr	r2, [r0, #0]
 800adfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae02:	2300      	movs	r3, #0
 800ae04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae08:	e7f7      	b.n	800adfa <_Balloc+0x66>
 800ae0a:	bf00      	nop
 800ae0c:	0800c201 	.word	0x0800c201
 800ae10:	0800c281 	.word	0x0800c281

0800ae14 <_Bfree>:
 800ae14:	b570      	push	{r4, r5, r6, lr}
 800ae16:	69c6      	ldr	r6, [r0, #28]
 800ae18:	4605      	mov	r5, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	b976      	cbnz	r6, 800ae3c <_Bfree+0x28>
 800ae1e:	2010      	movs	r0, #16
 800ae20:	f7ff ff04 	bl	800ac2c <malloc>
 800ae24:	4602      	mov	r2, r0
 800ae26:	61e8      	str	r0, [r5, #28]
 800ae28:	b920      	cbnz	r0, 800ae34 <_Bfree+0x20>
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <_Bfree+0x3c>)
 800ae2c:	4809      	ldr	r0, [pc, #36]	; (800ae54 <_Bfree+0x40>)
 800ae2e:	218f      	movs	r1, #143	; 0x8f
 800ae30:	f000 fd5c 	bl	800b8ec <__assert_func>
 800ae34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae38:	6006      	str	r6, [r0, #0]
 800ae3a:	60c6      	str	r6, [r0, #12]
 800ae3c:	b13c      	cbz	r4, 800ae4e <_Bfree+0x3a>
 800ae3e:	69eb      	ldr	r3, [r5, #28]
 800ae40:	6862      	ldr	r2, [r4, #4]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae48:	6021      	str	r1, [r4, #0]
 800ae4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae4e:	bd70      	pop	{r4, r5, r6, pc}
 800ae50:	0800c201 	.word	0x0800c201
 800ae54:	0800c281 	.word	0x0800c281

0800ae58 <__multadd>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	690d      	ldr	r5, [r1, #16]
 800ae5e:	4607      	mov	r7, r0
 800ae60:	460c      	mov	r4, r1
 800ae62:	461e      	mov	r6, r3
 800ae64:	f101 0c14 	add.w	ip, r1, #20
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ae6e:	b299      	uxth	r1, r3
 800ae70:	fb02 6101 	mla	r1, r2, r1, r6
 800ae74:	0c1e      	lsrs	r6, r3, #16
 800ae76:	0c0b      	lsrs	r3, r1, #16
 800ae78:	fb02 3306 	mla	r3, r2, r6, r3
 800ae7c:	b289      	uxth	r1, r1
 800ae7e:	3001      	adds	r0, #1
 800ae80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae84:	4285      	cmp	r5, r0
 800ae86:	f84c 1b04 	str.w	r1, [ip], #4
 800ae8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae8e:	dcec      	bgt.n	800ae6a <__multadd+0x12>
 800ae90:	b30e      	cbz	r6, 800aed6 <__multadd+0x7e>
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	42ab      	cmp	r3, r5
 800ae96:	dc19      	bgt.n	800aecc <__multadd+0x74>
 800ae98:	6861      	ldr	r1, [r4, #4]
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	3101      	adds	r1, #1
 800ae9e:	f7ff ff79 	bl	800ad94 <_Balloc>
 800aea2:	4680      	mov	r8, r0
 800aea4:	b928      	cbnz	r0, 800aeb2 <__multadd+0x5a>
 800aea6:	4602      	mov	r2, r0
 800aea8:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <__multadd+0x84>)
 800aeaa:	480d      	ldr	r0, [pc, #52]	; (800aee0 <__multadd+0x88>)
 800aeac:	21ba      	movs	r1, #186	; 0xba
 800aeae:	f000 fd1d 	bl	800b8ec <__assert_func>
 800aeb2:	6922      	ldr	r2, [r4, #16]
 800aeb4:	3202      	adds	r2, #2
 800aeb6:	f104 010c 	add.w	r1, r4, #12
 800aeba:	0092      	lsls	r2, r2, #2
 800aebc:	300c      	adds	r0, #12
 800aebe:	f7fe ffde 	bl	8009e7e <memcpy>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4638      	mov	r0, r7
 800aec6:	f7ff ffa5 	bl	800ae14 <_Bfree>
 800aeca:	4644      	mov	r4, r8
 800aecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aed0:	3501      	adds	r5, #1
 800aed2:	615e      	str	r6, [r3, #20]
 800aed4:	6125      	str	r5, [r4, #16]
 800aed6:	4620      	mov	r0, r4
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	0800c270 	.word	0x0800c270
 800aee0:	0800c281 	.word	0x0800c281

0800aee4 <__hi0bits>:
 800aee4:	0c03      	lsrs	r3, r0, #16
 800aee6:	041b      	lsls	r3, r3, #16
 800aee8:	b9d3      	cbnz	r3, 800af20 <__hi0bits+0x3c>
 800aeea:	0400      	lsls	r0, r0, #16
 800aeec:	2310      	movs	r3, #16
 800aeee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aef2:	bf04      	itt	eq
 800aef4:	0200      	lsleq	r0, r0, #8
 800aef6:	3308      	addeq	r3, #8
 800aef8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aefc:	bf04      	itt	eq
 800aefe:	0100      	lsleq	r0, r0, #4
 800af00:	3304      	addeq	r3, #4
 800af02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af06:	bf04      	itt	eq
 800af08:	0080      	lsleq	r0, r0, #2
 800af0a:	3302      	addeq	r3, #2
 800af0c:	2800      	cmp	r0, #0
 800af0e:	db05      	blt.n	800af1c <__hi0bits+0x38>
 800af10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af14:	f103 0301 	add.w	r3, r3, #1
 800af18:	bf08      	it	eq
 800af1a:	2320      	moveq	r3, #32
 800af1c:	4618      	mov	r0, r3
 800af1e:	4770      	bx	lr
 800af20:	2300      	movs	r3, #0
 800af22:	e7e4      	b.n	800aeee <__hi0bits+0xa>

0800af24 <__lo0bits>:
 800af24:	6803      	ldr	r3, [r0, #0]
 800af26:	f013 0207 	ands.w	r2, r3, #7
 800af2a:	d00c      	beq.n	800af46 <__lo0bits+0x22>
 800af2c:	07d9      	lsls	r1, r3, #31
 800af2e:	d422      	bmi.n	800af76 <__lo0bits+0x52>
 800af30:	079a      	lsls	r2, r3, #30
 800af32:	bf49      	itett	mi
 800af34:	085b      	lsrmi	r3, r3, #1
 800af36:	089b      	lsrpl	r3, r3, #2
 800af38:	6003      	strmi	r3, [r0, #0]
 800af3a:	2201      	movmi	r2, #1
 800af3c:	bf5c      	itt	pl
 800af3e:	6003      	strpl	r3, [r0, #0]
 800af40:	2202      	movpl	r2, #2
 800af42:	4610      	mov	r0, r2
 800af44:	4770      	bx	lr
 800af46:	b299      	uxth	r1, r3
 800af48:	b909      	cbnz	r1, 800af4e <__lo0bits+0x2a>
 800af4a:	0c1b      	lsrs	r3, r3, #16
 800af4c:	2210      	movs	r2, #16
 800af4e:	b2d9      	uxtb	r1, r3
 800af50:	b909      	cbnz	r1, 800af56 <__lo0bits+0x32>
 800af52:	3208      	adds	r2, #8
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	0719      	lsls	r1, r3, #28
 800af58:	bf04      	itt	eq
 800af5a:	091b      	lsreq	r3, r3, #4
 800af5c:	3204      	addeq	r2, #4
 800af5e:	0799      	lsls	r1, r3, #30
 800af60:	bf04      	itt	eq
 800af62:	089b      	lsreq	r3, r3, #2
 800af64:	3202      	addeq	r2, #2
 800af66:	07d9      	lsls	r1, r3, #31
 800af68:	d403      	bmi.n	800af72 <__lo0bits+0x4e>
 800af6a:	085b      	lsrs	r3, r3, #1
 800af6c:	f102 0201 	add.w	r2, r2, #1
 800af70:	d003      	beq.n	800af7a <__lo0bits+0x56>
 800af72:	6003      	str	r3, [r0, #0]
 800af74:	e7e5      	b.n	800af42 <__lo0bits+0x1e>
 800af76:	2200      	movs	r2, #0
 800af78:	e7e3      	b.n	800af42 <__lo0bits+0x1e>
 800af7a:	2220      	movs	r2, #32
 800af7c:	e7e1      	b.n	800af42 <__lo0bits+0x1e>
	...

0800af80 <__i2b>:
 800af80:	b510      	push	{r4, lr}
 800af82:	460c      	mov	r4, r1
 800af84:	2101      	movs	r1, #1
 800af86:	f7ff ff05 	bl	800ad94 <_Balloc>
 800af8a:	4602      	mov	r2, r0
 800af8c:	b928      	cbnz	r0, 800af9a <__i2b+0x1a>
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <__i2b+0x24>)
 800af90:	4805      	ldr	r0, [pc, #20]	; (800afa8 <__i2b+0x28>)
 800af92:	f240 1145 	movw	r1, #325	; 0x145
 800af96:	f000 fca9 	bl	800b8ec <__assert_func>
 800af9a:	2301      	movs	r3, #1
 800af9c:	6144      	str	r4, [r0, #20]
 800af9e:	6103      	str	r3, [r0, #16]
 800afa0:	bd10      	pop	{r4, pc}
 800afa2:	bf00      	nop
 800afa4:	0800c270 	.word	0x0800c270
 800afa8:	0800c281 	.word	0x0800c281

0800afac <__multiply>:
 800afac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb0:	4691      	mov	r9, r2
 800afb2:	690a      	ldr	r2, [r1, #16]
 800afb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afb8:	429a      	cmp	r2, r3
 800afba:	bfb8      	it	lt
 800afbc:	460b      	movlt	r3, r1
 800afbe:	460c      	mov	r4, r1
 800afc0:	bfbc      	itt	lt
 800afc2:	464c      	movlt	r4, r9
 800afc4:	4699      	movlt	r9, r3
 800afc6:	6927      	ldr	r7, [r4, #16]
 800afc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800afcc:	68a3      	ldr	r3, [r4, #8]
 800afce:	6861      	ldr	r1, [r4, #4]
 800afd0:	eb07 060a 	add.w	r6, r7, sl
 800afd4:	42b3      	cmp	r3, r6
 800afd6:	b085      	sub	sp, #20
 800afd8:	bfb8      	it	lt
 800afda:	3101      	addlt	r1, #1
 800afdc:	f7ff feda 	bl	800ad94 <_Balloc>
 800afe0:	b930      	cbnz	r0, 800aff0 <__multiply+0x44>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b44      	ldr	r3, [pc, #272]	; (800b0f8 <__multiply+0x14c>)
 800afe6:	4845      	ldr	r0, [pc, #276]	; (800b0fc <__multiply+0x150>)
 800afe8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800afec:	f000 fc7e 	bl	800b8ec <__assert_func>
 800aff0:	f100 0514 	add.w	r5, r0, #20
 800aff4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aff8:	462b      	mov	r3, r5
 800affa:	2200      	movs	r2, #0
 800affc:	4543      	cmp	r3, r8
 800affe:	d321      	bcc.n	800b044 <__multiply+0x98>
 800b000:	f104 0314 	add.w	r3, r4, #20
 800b004:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b008:	f109 0314 	add.w	r3, r9, #20
 800b00c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b010:	9202      	str	r2, [sp, #8]
 800b012:	1b3a      	subs	r2, r7, r4
 800b014:	3a15      	subs	r2, #21
 800b016:	f022 0203 	bic.w	r2, r2, #3
 800b01a:	3204      	adds	r2, #4
 800b01c:	f104 0115 	add.w	r1, r4, #21
 800b020:	428f      	cmp	r7, r1
 800b022:	bf38      	it	cc
 800b024:	2204      	movcc	r2, #4
 800b026:	9201      	str	r2, [sp, #4]
 800b028:	9a02      	ldr	r2, [sp, #8]
 800b02a:	9303      	str	r3, [sp, #12]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d80c      	bhi.n	800b04a <__multiply+0x9e>
 800b030:	2e00      	cmp	r6, #0
 800b032:	dd03      	ble.n	800b03c <__multiply+0x90>
 800b034:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d05b      	beq.n	800b0f4 <__multiply+0x148>
 800b03c:	6106      	str	r6, [r0, #16]
 800b03e:	b005      	add	sp, #20
 800b040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b044:	f843 2b04 	str.w	r2, [r3], #4
 800b048:	e7d8      	b.n	800affc <__multiply+0x50>
 800b04a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b04e:	f1ba 0f00 	cmp.w	sl, #0
 800b052:	d024      	beq.n	800b09e <__multiply+0xf2>
 800b054:	f104 0e14 	add.w	lr, r4, #20
 800b058:	46a9      	mov	r9, r5
 800b05a:	f04f 0c00 	mov.w	ip, #0
 800b05e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b062:	f8d9 1000 	ldr.w	r1, [r9]
 800b066:	fa1f fb82 	uxth.w	fp, r2
 800b06a:	b289      	uxth	r1, r1
 800b06c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b070:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b074:	f8d9 2000 	ldr.w	r2, [r9]
 800b078:	4461      	add	r1, ip
 800b07a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b07e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b086:	b289      	uxth	r1, r1
 800b088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b08c:	4577      	cmp	r7, lr
 800b08e:	f849 1b04 	str.w	r1, [r9], #4
 800b092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b096:	d8e2      	bhi.n	800b05e <__multiply+0xb2>
 800b098:	9a01      	ldr	r2, [sp, #4]
 800b09a:	f845 c002 	str.w	ip, [r5, r2]
 800b09e:	9a03      	ldr	r2, [sp, #12]
 800b0a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	f1b9 0f00 	cmp.w	r9, #0
 800b0aa:	d021      	beq.n	800b0f0 <__multiply+0x144>
 800b0ac:	6829      	ldr	r1, [r5, #0]
 800b0ae:	f104 0c14 	add.w	ip, r4, #20
 800b0b2:	46ae      	mov	lr, r5
 800b0b4:	f04f 0a00 	mov.w	sl, #0
 800b0b8:	f8bc b000 	ldrh.w	fp, [ip]
 800b0bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b0c0:	fb09 220b 	mla	r2, r9, fp, r2
 800b0c4:	4452      	add	r2, sl
 800b0c6:	b289      	uxth	r1, r1
 800b0c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b0cc:	f84e 1b04 	str.w	r1, [lr], #4
 800b0d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b0d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0d8:	f8be 1000 	ldrh.w	r1, [lr]
 800b0dc:	fb09 110a 	mla	r1, r9, sl, r1
 800b0e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b0e4:	4567      	cmp	r7, ip
 800b0e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b0ea:	d8e5      	bhi.n	800b0b8 <__multiply+0x10c>
 800b0ec:	9a01      	ldr	r2, [sp, #4]
 800b0ee:	50a9      	str	r1, [r5, r2]
 800b0f0:	3504      	adds	r5, #4
 800b0f2:	e799      	b.n	800b028 <__multiply+0x7c>
 800b0f4:	3e01      	subs	r6, #1
 800b0f6:	e79b      	b.n	800b030 <__multiply+0x84>
 800b0f8:	0800c270 	.word	0x0800c270
 800b0fc:	0800c281 	.word	0x0800c281

0800b100 <__pow5mult>:
 800b100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b104:	4615      	mov	r5, r2
 800b106:	f012 0203 	ands.w	r2, r2, #3
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	d007      	beq.n	800b120 <__pow5mult+0x20>
 800b110:	4c25      	ldr	r4, [pc, #148]	; (800b1a8 <__pow5mult+0xa8>)
 800b112:	3a01      	subs	r2, #1
 800b114:	2300      	movs	r3, #0
 800b116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b11a:	f7ff fe9d 	bl	800ae58 <__multadd>
 800b11e:	4607      	mov	r7, r0
 800b120:	10ad      	asrs	r5, r5, #2
 800b122:	d03d      	beq.n	800b1a0 <__pow5mult+0xa0>
 800b124:	69f4      	ldr	r4, [r6, #28]
 800b126:	b97c      	cbnz	r4, 800b148 <__pow5mult+0x48>
 800b128:	2010      	movs	r0, #16
 800b12a:	f7ff fd7f 	bl	800ac2c <malloc>
 800b12e:	4602      	mov	r2, r0
 800b130:	61f0      	str	r0, [r6, #28]
 800b132:	b928      	cbnz	r0, 800b140 <__pow5mult+0x40>
 800b134:	4b1d      	ldr	r3, [pc, #116]	; (800b1ac <__pow5mult+0xac>)
 800b136:	481e      	ldr	r0, [pc, #120]	; (800b1b0 <__pow5mult+0xb0>)
 800b138:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b13c:	f000 fbd6 	bl	800b8ec <__assert_func>
 800b140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b144:	6004      	str	r4, [r0, #0]
 800b146:	60c4      	str	r4, [r0, #12]
 800b148:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b150:	b94c      	cbnz	r4, 800b166 <__pow5mult+0x66>
 800b152:	f240 2171 	movw	r1, #625	; 0x271
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ff12 	bl	800af80 <__i2b>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b162:	4604      	mov	r4, r0
 800b164:	6003      	str	r3, [r0, #0]
 800b166:	f04f 0900 	mov.w	r9, #0
 800b16a:	07eb      	lsls	r3, r5, #31
 800b16c:	d50a      	bpl.n	800b184 <__pow5mult+0x84>
 800b16e:	4639      	mov	r1, r7
 800b170:	4622      	mov	r2, r4
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff ff1a 	bl	800afac <__multiply>
 800b178:	4639      	mov	r1, r7
 800b17a:	4680      	mov	r8, r0
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7ff fe49 	bl	800ae14 <_Bfree>
 800b182:	4647      	mov	r7, r8
 800b184:	106d      	asrs	r5, r5, #1
 800b186:	d00b      	beq.n	800b1a0 <__pow5mult+0xa0>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	b938      	cbnz	r0, 800b19c <__pow5mult+0x9c>
 800b18c:	4622      	mov	r2, r4
 800b18e:	4621      	mov	r1, r4
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff ff0b 	bl	800afac <__multiply>
 800b196:	6020      	str	r0, [r4, #0]
 800b198:	f8c0 9000 	str.w	r9, [r0]
 800b19c:	4604      	mov	r4, r0
 800b19e:	e7e4      	b.n	800b16a <__pow5mult+0x6a>
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0800c3d0 	.word	0x0800c3d0
 800b1ac:	0800c201 	.word	0x0800c201
 800b1b0:	0800c281 	.word	0x0800c281

0800b1b4 <__lshift>:
 800b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	6849      	ldr	r1, [r1, #4]
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1c2:	68a3      	ldr	r3, [r4, #8]
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	4691      	mov	r9, r2
 800b1c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1cc:	f108 0601 	add.w	r6, r8, #1
 800b1d0:	42b3      	cmp	r3, r6
 800b1d2:	db0b      	blt.n	800b1ec <__lshift+0x38>
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	f7ff fddd 	bl	800ad94 <_Balloc>
 800b1da:	4605      	mov	r5, r0
 800b1dc:	b948      	cbnz	r0, 800b1f2 <__lshift+0x3e>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <__lshift+0xd0>)
 800b1e2:	4829      	ldr	r0, [pc, #164]	; (800b288 <__lshift+0xd4>)
 800b1e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b1e8:	f000 fb80 	bl	800b8ec <__assert_func>
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	e7ee      	b.n	800b1d0 <__lshift+0x1c>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f100 0114 	add.w	r1, r0, #20
 800b1f8:	f100 0210 	add.w	r2, r0, #16
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	4553      	cmp	r3, sl
 800b200:	db33      	blt.n	800b26a <__lshift+0xb6>
 800b202:	6920      	ldr	r0, [r4, #16]
 800b204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b208:	f104 0314 	add.w	r3, r4, #20
 800b20c:	f019 091f 	ands.w	r9, r9, #31
 800b210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b218:	d02b      	beq.n	800b272 <__lshift+0xbe>
 800b21a:	f1c9 0e20 	rsb	lr, r9, #32
 800b21e:	468a      	mov	sl, r1
 800b220:	2200      	movs	r2, #0
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	fa00 f009 	lsl.w	r0, r0, r9
 800b228:	4310      	orrs	r0, r2
 800b22a:	f84a 0b04 	str.w	r0, [sl], #4
 800b22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b232:	459c      	cmp	ip, r3
 800b234:	fa22 f20e 	lsr.w	r2, r2, lr
 800b238:	d8f3      	bhi.n	800b222 <__lshift+0x6e>
 800b23a:	ebac 0304 	sub.w	r3, ip, r4
 800b23e:	3b15      	subs	r3, #21
 800b240:	f023 0303 	bic.w	r3, r3, #3
 800b244:	3304      	adds	r3, #4
 800b246:	f104 0015 	add.w	r0, r4, #21
 800b24a:	4584      	cmp	ip, r0
 800b24c:	bf38      	it	cc
 800b24e:	2304      	movcc	r3, #4
 800b250:	50ca      	str	r2, [r1, r3]
 800b252:	b10a      	cbz	r2, 800b258 <__lshift+0xa4>
 800b254:	f108 0602 	add.w	r6, r8, #2
 800b258:	3e01      	subs	r6, #1
 800b25a:	4638      	mov	r0, r7
 800b25c:	612e      	str	r6, [r5, #16]
 800b25e:	4621      	mov	r1, r4
 800b260:	f7ff fdd8 	bl	800ae14 <_Bfree>
 800b264:	4628      	mov	r0, r5
 800b266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b26e:	3301      	adds	r3, #1
 800b270:	e7c5      	b.n	800b1fe <__lshift+0x4a>
 800b272:	3904      	subs	r1, #4
 800b274:	f853 2b04 	ldr.w	r2, [r3], #4
 800b278:	f841 2f04 	str.w	r2, [r1, #4]!
 800b27c:	459c      	cmp	ip, r3
 800b27e:	d8f9      	bhi.n	800b274 <__lshift+0xc0>
 800b280:	e7ea      	b.n	800b258 <__lshift+0xa4>
 800b282:	bf00      	nop
 800b284:	0800c270 	.word	0x0800c270
 800b288:	0800c281 	.word	0x0800c281

0800b28c <__mcmp>:
 800b28c:	b530      	push	{r4, r5, lr}
 800b28e:	6902      	ldr	r2, [r0, #16]
 800b290:	690c      	ldr	r4, [r1, #16]
 800b292:	1b12      	subs	r2, r2, r4
 800b294:	d10e      	bne.n	800b2b4 <__mcmp+0x28>
 800b296:	f100 0314 	add.w	r3, r0, #20
 800b29a:	3114      	adds	r1, #20
 800b29c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2ac:	42a5      	cmp	r5, r4
 800b2ae:	d003      	beq.n	800b2b8 <__mcmp+0x2c>
 800b2b0:	d305      	bcc.n	800b2be <__mcmp+0x32>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	4283      	cmp	r3, r0
 800b2ba:	d3f3      	bcc.n	800b2a4 <__mcmp+0x18>
 800b2bc:	e7fa      	b.n	800b2b4 <__mcmp+0x28>
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c2:	e7f7      	b.n	800b2b4 <__mcmp+0x28>

0800b2c4 <__mdiff>:
 800b2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4690      	mov	r8, r2
 800b2d2:	f7ff ffdb 	bl	800b28c <__mcmp>
 800b2d6:	1e05      	subs	r5, r0, #0
 800b2d8:	d110      	bne.n	800b2fc <__mdiff+0x38>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7ff fd59 	bl	800ad94 <_Balloc>
 800b2e2:	b930      	cbnz	r0, 800b2f2 <__mdiff+0x2e>
 800b2e4:	4b3a      	ldr	r3, [pc, #232]	; (800b3d0 <__mdiff+0x10c>)
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	f240 2137 	movw	r1, #567	; 0x237
 800b2ec:	4839      	ldr	r0, [pc, #228]	; (800b3d4 <__mdiff+0x110>)
 800b2ee:	f000 fafd 	bl	800b8ec <__assert_func>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	bfa4      	itt	ge
 800b2fe:	4643      	movge	r3, r8
 800b300:	46a0      	movge	r8, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b308:	bfa6      	itte	ge
 800b30a:	461c      	movge	r4, r3
 800b30c:	2500      	movge	r5, #0
 800b30e:	2501      	movlt	r5, #1
 800b310:	f7ff fd40 	bl	800ad94 <_Balloc>
 800b314:	b920      	cbnz	r0, 800b320 <__mdiff+0x5c>
 800b316:	4b2e      	ldr	r3, [pc, #184]	; (800b3d0 <__mdiff+0x10c>)
 800b318:	4602      	mov	r2, r0
 800b31a:	f240 2145 	movw	r1, #581	; 0x245
 800b31e:	e7e5      	b.n	800b2ec <__mdiff+0x28>
 800b320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b324:	6926      	ldr	r6, [r4, #16]
 800b326:	60c5      	str	r5, [r0, #12]
 800b328:	f104 0914 	add.w	r9, r4, #20
 800b32c:	f108 0514 	add.w	r5, r8, #20
 800b330:	f100 0e14 	add.w	lr, r0, #20
 800b334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b33c:	f108 0210 	add.w	r2, r8, #16
 800b340:	46f2      	mov	sl, lr
 800b342:	2100      	movs	r1, #0
 800b344:	f859 3b04 	ldr.w	r3, [r9], #4
 800b348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b34c:	fa11 f88b 	uxtah	r8, r1, fp
 800b350:	b299      	uxth	r1, r3
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	eba8 0801 	sub.w	r8, r8, r1
 800b358:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b35c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b360:	fa1f f888 	uxth.w	r8, r8
 800b364:	1419      	asrs	r1, r3, #16
 800b366:	454e      	cmp	r6, r9
 800b368:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b36c:	f84a 3b04 	str.w	r3, [sl], #4
 800b370:	d8e8      	bhi.n	800b344 <__mdiff+0x80>
 800b372:	1b33      	subs	r3, r6, r4
 800b374:	3b15      	subs	r3, #21
 800b376:	f023 0303 	bic.w	r3, r3, #3
 800b37a:	3304      	adds	r3, #4
 800b37c:	3415      	adds	r4, #21
 800b37e:	42a6      	cmp	r6, r4
 800b380:	bf38      	it	cc
 800b382:	2304      	movcc	r3, #4
 800b384:	441d      	add	r5, r3
 800b386:	4473      	add	r3, lr
 800b388:	469e      	mov	lr, r3
 800b38a:	462e      	mov	r6, r5
 800b38c:	4566      	cmp	r6, ip
 800b38e:	d30e      	bcc.n	800b3ae <__mdiff+0xea>
 800b390:	f10c 0203 	add.w	r2, ip, #3
 800b394:	1b52      	subs	r2, r2, r5
 800b396:	f022 0203 	bic.w	r2, r2, #3
 800b39a:	3d03      	subs	r5, #3
 800b39c:	45ac      	cmp	ip, r5
 800b39e:	bf38      	it	cc
 800b3a0:	2200      	movcc	r2, #0
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3a8:	b17a      	cbz	r2, 800b3ca <__mdiff+0x106>
 800b3aa:	6107      	str	r7, [r0, #16]
 800b3ac:	e7a4      	b.n	800b2f8 <__mdiff+0x34>
 800b3ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800b3b2:	fa11 f288 	uxtah	r2, r1, r8
 800b3b6:	1414      	asrs	r4, r2, #16
 800b3b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b3bc:	b292      	uxth	r2, r2
 800b3be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b3c2:	f84e 2b04 	str.w	r2, [lr], #4
 800b3c6:	1421      	asrs	r1, r4, #16
 800b3c8:	e7e0      	b.n	800b38c <__mdiff+0xc8>
 800b3ca:	3f01      	subs	r7, #1
 800b3cc:	e7ea      	b.n	800b3a4 <__mdiff+0xe0>
 800b3ce:	bf00      	nop
 800b3d0:	0800c270 	.word	0x0800c270
 800b3d4:	0800c281 	.word	0x0800c281

0800b3d8 <__d2b>:
 800b3d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	460f      	mov	r7, r1
 800b3de:	2101      	movs	r1, #1
 800b3e0:	ec59 8b10 	vmov	r8, r9, d0
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	f7ff fcd5 	bl	800ad94 <_Balloc>
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	b930      	cbnz	r0, 800b3fc <__d2b+0x24>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b24      	ldr	r3, [pc, #144]	; (800b484 <__d2b+0xac>)
 800b3f2:	4825      	ldr	r0, [pc, #148]	; (800b488 <__d2b+0xb0>)
 800b3f4:	f240 310f 	movw	r1, #783	; 0x30f
 800b3f8:	f000 fa78 	bl	800b8ec <__assert_func>
 800b3fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b404:	bb2d      	cbnz	r5, 800b452 <__d2b+0x7a>
 800b406:	9301      	str	r3, [sp, #4]
 800b408:	f1b8 0300 	subs.w	r3, r8, #0
 800b40c:	d026      	beq.n	800b45c <__d2b+0x84>
 800b40e:	4668      	mov	r0, sp
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	f7ff fd87 	bl	800af24 <__lo0bits>
 800b416:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b41a:	b1e8      	cbz	r0, 800b458 <__d2b+0x80>
 800b41c:	f1c0 0320 	rsb	r3, r0, #32
 800b420:	fa02 f303 	lsl.w	r3, r2, r3
 800b424:	430b      	orrs	r3, r1
 800b426:	40c2      	lsrs	r2, r0
 800b428:	6163      	str	r3, [r4, #20]
 800b42a:	9201      	str	r2, [sp, #4]
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	61a3      	str	r3, [r4, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	bf14      	ite	ne
 800b434:	2202      	movne	r2, #2
 800b436:	2201      	moveq	r2, #1
 800b438:	6122      	str	r2, [r4, #16]
 800b43a:	b1bd      	cbz	r5, 800b46c <__d2b+0x94>
 800b43c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b440:	4405      	add	r5, r0
 800b442:	603d      	str	r5, [r7, #0]
 800b444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	4620      	mov	r0, r4
 800b44c:	b003      	add	sp, #12
 800b44e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b456:	e7d6      	b.n	800b406 <__d2b+0x2e>
 800b458:	6161      	str	r1, [r4, #20]
 800b45a:	e7e7      	b.n	800b42c <__d2b+0x54>
 800b45c:	a801      	add	r0, sp, #4
 800b45e:	f7ff fd61 	bl	800af24 <__lo0bits>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	6163      	str	r3, [r4, #20]
 800b466:	3020      	adds	r0, #32
 800b468:	2201      	movs	r2, #1
 800b46a:	e7e5      	b.n	800b438 <__d2b+0x60>
 800b46c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b474:	6038      	str	r0, [r7, #0]
 800b476:	6918      	ldr	r0, [r3, #16]
 800b478:	f7ff fd34 	bl	800aee4 <__hi0bits>
 800b47c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b480:	e7e2      	b.n	800b448 <__d2b+0x70>
 800b482:	bf00      	nop
 800b484:	0800c270 	.word	0x0800c270
 800b488:	0800c281 	.word	0x0800c281

0800b48c <__ssputs_r>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	688e      	ldr	r6, [r1, #8]
 800b492:	461f      	mov	r7, r3
 800b494:	42be      	cmp	r6, r7
 800b496:	680b      	ldr	r3, [r1, #0]
 800b498:	4682      	mov	sl, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	4690      	mov	r8, r2
 800b49e:	d82c      	bhi.n	800b4fa <__ssputs_r+0x6e>
 800b4a0:	898a      	ldrh	r2, [r1, #12]
 800b4a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4a6:	d026      	beq.n	800b4f6 <__ssputs_r+0x6a>
 800b4a8:	6965      	ldr	r5, [r4, #20]
 800b4aa:	6909      	ldr	r1, [r1, #16]
 800b4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4b0:	eba3 0901 	sub.w	r9, r3, r1
 800b4b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4b8:	1c7b      	adds	r3, r7, #1
 800b4ba:	444b      	add	r3, r9
 800b4bc:	106d      	asrs	r5, r5, #1
 800b4be:	429d      	cmp	r5, r3
 800b4c0:	bf38      	it	cc
 800b4c2:	461d      	movcc	r5, r3
 800b4c4:	0553      	lsls	r3, r2, #21
 800b4c6:	d527      	bpl.n	800b518 <__ssputs_r+0x8c>
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	f7ff fbd7 	bl	800ac7c <_malloc_r>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	b360      	cbz	r0, 800b52c <__ssputs_r+0xa0>
 800b4d2:	6921      	ldr	r1, [r4, #16]
 800b4d4:	464a      	mov	r2, r9
 800b4d6:	f7fe fcd2 	bl	8009e7e <memcpy>
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e4:	81a3      	strh	r3, [r4, #12]
 800b4e6:	6126      	str	r6, [r4, #16]
 800b4e8:	6165      	str	r5, [r4, #20]
 800b4ea:	444e      	add	r6, r9
 800b4ec:	eba5 0509 	sub.w	r5, r5, r9
 800b4f0:	6026      	str	r6, [r4, #0]
 800b4f2:	60a5      	str	r5, [r4, #8]
 800b4f4:	463e      	mov	r6, r7
 800b4f6:	42be      	cmp	r6, r7
 800b4f8:	d900      	bls.n	800b4fc <__ssputs_r+0x70>
 800b4fa:	463e      	mov	r6, r7
 800b4fc:	6820      	ldr	r0, [r4, #0]
 800b4fe:	4632      	mov	r2, r6
 800b500:	4641      	mov	r1, r8
 800b502:	f000 f9c9 	bl	800b898 <memmove>
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	1b9b      	subs	r3, r3, r6
 800b50a:	60a3      	str	r3, [r4, #8]
 800b50c:	6823      	ldr	r3, [r4, #0]
 800b50e:	4433      	add	r3, r6
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	2000      	movs	r0, #0
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	462a      	mov	r2, r5
 800b51a:	f000 fa2d 	bl	800b978 <_realloc_r>
 800b51e:	4606      	mov	r6, r0
 800b520:	2800      	cmp	r0, #0
 800b522:	d1e0      	bne.n	800b4e6 <__ssputs_r+0x5a>
 800b524:	6921      	ldr	r1, [r4, #16]
 800b526:	4650      	mov	r0, sl
 800b528:	f7ff fb34 	bl	800ab94 <_free_r>
 800b52c:	230c      	movs	r3, #12
 800b52e:	f8ca 3000 	str.w	r3, [sl]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	e7e9      	b.n	800b514 <__ssputs_r+0x88>

0800b540 <_svfiprintf_r>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4698      	mov	r8, r3
 800b546:	898b      	ldrh	r3, [r1, #12]
 800b548:	061b      	lsls	r3, r3, #24
 800b54a:	b09d      	sub	sp, #116	; 0x74
 800b54c:	4607      	mov	r7, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	4614      	mov	r4, r2
 800b552:	d50e      	bpl.n	800b572 <_svfiprintf_r+0x32>
 800b554:	690b      	ldr	r3, [r1, #16]
 800b556:	b963      	cbnz	r3, 800b572 <_svfiprintf_r+0x32>
 800b558:	2140      	movs	r1, #64	; 0x40
 800b55a:	f7ff fb8f 	bl	800ac7c <_malloc_r>
 800b55e:	6028      	str	r0, [r5, #0]
 800b560:	6128      	str	r0, [r5, #16]
 800b562:	b920      	cbnz	r0, 800b56e <_svfiprintf_r+0x2e>
 800b564:	230c      	movs	r3, #12
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	f04f 30ff 	mov.w	r0, #4294967295
 800b56c:	e0d0      	b.n	800b710 <_svfiprintf_r+0x1d0>
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	616b      	str	r3, [r5, #20]
 800b572:	2300      	movs	r3, #0
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	2320      	movs	r3, #32
 800b578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b580:	2330      	movs	r3, #48	; 0x30
 800b582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b728 <_svfiprintf_r+0x1e8>
 800b586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b58a:	f04f 0901 	mov.w	r9, #1
 800b58e:	4623      	mov	r3, r4
 800b590:	469a      	mov	sl, r3
 800b592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b596:	b10a      	cbz	r2, 800b59c <_svfiprintf_r+0x5c>
 800b598:	2a25      	cmp	r2, #37	; 0x25
 800b59a:	d1f9      	bne.n	800b590 <_svfiprintf_r+0x50>
 800b59c:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a0:	d00b      	beq.n	800b5ba <_svfiprintf_r+0x7a>
 800b5a2:	465b      	mov	r3, fp
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f7ff ff6f 	bl	800b48c <__ssputs_r>
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	f000 80a9 	beq.w	800b706 <_svfiprintf_r+0x1c6>
 800b5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b6:	445a      	add	r2, fp
 800b5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80a1 	beq.w	800b706 <_svfiprintf_r+0x1c6>
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ce:	f10a 0a01 	add.w	sl, sl, #1
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	9307      	str	r3, [sp, #28]
 800b5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5da:	931a      	str	r3, [sp, #104]	; 0x68
 800b5dc:	4654      	mov	r4, sl
 800b5de:	2205      	movs	r2, #5
 800b5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e4:	4850      	ldr	r0, [pc, #320]	; (800b728 <_svfiprintf_r+0x1e8>)
 800b5e6:	f7f4 fdf3 	bl	80001d0 <memchr>
 800b5ea:	9a04      	ldr	r2, [sp, #16]
 800b5ec:	b9d8      	cbnz	r0, 800b626 <_svfiprintf_r+0xe6>
 800b5ee:	06d0      	lsls	r0, r2, #27
 800b5f0:	bf44      	itt	mi
 800b5f2:	2320      	movmi	r3, #32
 800b5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f8:	0711      	lsls	r1, r2, #28
 800b5fa:	bf44      	itt	mi
 800b5fc:	232b      	movmi	r3, #43	; 0x2b
 800b5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b2a      	cmp	r3, #42	; 0x2a
 800b608:	d015      	beq.n	800b636 <_svfiprintf_r+0xf6>
 800b60a:	9a07      	ldr	r2, [sp, #28]
 800b60c:	4654      	mov	r4, sl
 800b60e:	2000      	movs	r0, #0
 800b610:	f04f 0c0a 	mov.w	ip, #10
 800b614:	4621      	mov	r1, r4
 800b616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b61a:	3b30      	subs	r3, #48	; 0x30
 800b61c:	2b09      	cmp	r3, #9
 800b61e:	d94d      	bls.n	800b6bc <_svfiprintf_r+0x17c>
 800b620:	b1b0      	cbz	r0, 800b650 <_svfiprintf_r+0x110>
 800b622:	9207      	str	r2, [sp, #28]
 800b624:	e014      	b.n	800b650 <_svfiprintf_r+0x110>
 800b626:	eba0 0308 	sub.w	r3, r0, r8
 800b62a:	fa09 f303 	lsl.w	r3, r9, r3
 800b62e:	4313      	orrs	r3, r2
 800b630:	9304      	str	r3, [sp, #16]
 800b632:	46a2      	mov	sl, r4
 800b634:	e7d2      	b.n	800b5dc <_svfiprintf_r+0x9c>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	1d19      	adds	r1, r3, #4
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	9103      	str	r1, [sp, #12]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bfbb      	ittet	lt
 800b642:	425b      	neglt	r3, r3
 800b644:	f042 0202 	orrlt.w	r2, r2, #2
 800b648:	9307      	strge	r3, [sp, #28]
 800b64a:	9307      	strlt	r3, [sp, #28]
 800b64c:	bfb8      	it	lt
 800b64e:	9204      	strlt	r2, [sp, #16]
 800b650:	7823      	ldrb	r3, [r4, #0]
 800b652:	2b2e      	cmp	r3, #46	; 0x2e
 800b654:	d10c      	bne.n	800b670 <_svfiprintf_r+0x130>
 800b656:	7863      	ldrb	r3, [r4, #1]
 800b658:	2b2a      	cmp	r3, #42	; 0x2a
 800b65a:	d134      	bne.n	800b6c6 <_svfiprintf_r+0x186>
 800b65c:	9b03      	ldr	r3, [sp, #12]
 800b65e:	1d1a      	adds	r2, r3, #4
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	9203      	str	r2, [sp, #12]
 800b664:	2b00      	cmp	r3, #0
 800b666:	bfb8      	it	lt
 800b668:	f04f 33ff 	movlt.w	r3, #4294967295
 800b66c:	3402      	adds	r4, #2
 800b66e:	9305      	str	r3, [sp, #20]
 800b670:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b738 <_svfiprintf_r+0x1f8>
 800b674:	7821      	ldrb	r1, [r4, #0]
 800b676:	2203      	movs	r2, #3
 800b678:	4650      	mov	r0, sl
 800b67a:	f7f4 fda9 	bl	80001d0 <memchr>
 800b67e:	b138      	cbz	r0, 800b690 <_svfiprintf_r+0x150>
 800b680:	9b04      	ldr	r3, [sp, #16]
 800b682:	eba0 000a 	sub.w	r0, r0, sl
 800b686:	2240      	movs	r2, #64	; 0x40
 800b688:	4082      	lsls	r2, r0
 800b68a:	4313      	orrs	r3, r2
 800b68c:	3401      	adds	r4, #1
 800b68e:	9304      	str	r3, [sp, #16]
 800b690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b694:	4825      	ldr	r0, [pc, #148]	; (800b72c <_svfiprintf_r+0x1ec>)
 800b696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b69a:	2206      	movs	r2, #6
 800b69c:	f7f4 fd98 	bl	80001d0 <memchr>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d038      	beq.n	800b716 <_svfiprintf_r+0x1d6>
 800b6a4:	4b22      	ldr	r3, [pc, #136]	; (800b730 <_svfiprintf_r+0x1f0>)
 800b6a6:	bb1b      	cbnz	r3, 800b6f0 <_svfiprintf_r+0x1b0>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	3307      	adds	r3, #7
 800b6ac:	f023 0307 	bic.w	r3, r3, #7
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	9303      	str	r3, [sp, #12]
 800b6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b6:	4433      	add	r3, r6
 800b6b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ba:	e768      	b.n	800b58e <_svfiprintf_r+0x4e>
 800b6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	2001      	movs	r0, #1
 800b6c4:	e7a6      	b.n	800b614 <_svfiprintf_r+0xd4>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	3401      	adds	r4, #1
 800b6ca:	9305      	str	r3, [sp, #20]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f04f 0c0a 	mov.w	ip, #10
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d8:	3a30      	subs	r2, #48	; 0x30
 800b6da:	2a09      	cmp	r2, #9
 800b6dc:	d903      	bls.n	800b6e6 <_svfiprintf_r+0x1a6>
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d0c6      	beq.n	800b670 <_svfiprintf_r+0x130>
 800b6e2:	9105      	str	r1, [sp, #20]
 800b6e4:	e7c4      	b.n	800b670 <_svfiprintf_r+0x130>
 800b6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e7f0      	b.n	800b6d2 <_svfiprintf_r+0x192>
 800b6f0:	ab03      	add	r3, sp, #12
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	; (800b734 <_svfiprintf_r+0x1f4>)
 800b6f8:	a904      	add	r1, sp, #16
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	f7fd fe54 	bl	80093a8 <_printf_float>
 800b700:	1c42      	adds	r2, r0, #1
 800b702:	4606      	mov	r6, r0
 800b704:	d1d6      	bne.n	800b6b4 <_svfiprintf_r+0x174>
 800b706:	89ab      	ldrh	r3, [r5, #12]
 800b708:	065b      	lsls	r3, r3, #25
 800b70a:	f53f af2d 	bmi.w	800b568 <_svfiprintf_r+0x28>
 800b70e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b710:	b01d      	add	sp, #116	; 0x74
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b716:	ab03      	add	r3, sp, #12
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	462a      	mov	r2, r5
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <_svfiprintf_r+0x1f4>)
 800b71e:	a904      	add	r1, sp, #16
 800b720:	4638      	mov	r0, r7
 800b722:	f7fe f8e5 	bl	80098f0 <_printf_i>
 800b726:	e7eb      	b.n	800b700 <_svfiprintf_r+0x1c0>
 800b728:	0800c3dc 	.word	0x0800c3dc
 800b72c:	0800c3e6 	.word	0x0800c3e6
 800b730:	080093a9 	.word	0x080093a9
 800b734:	0800b48d 	.word	0x0800b48d
 800b738:	0800c3e2 	.word	0x0800c3e2

0800b73c <__sflush_r>:
 800b73c:	898a      	ldrh	r2, [r1, #12]
 800b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	4605      	mov	r5, r0
 800b744:	0710      	lsls	r0, r2, #28
 800b746:	460c      	mov	r4, r1
 800b748:	d458      	bmi.n	800b7fc <__sflush_r+0xc0>
 800b74a:	684b      	ldr	r3, [r1, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	dc05      	bgt.n	800b75c <__sflush_r+0x20>
 800b750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc02      	bgt.n	800b75c <__sflush_r+0x20>
 800b756:	2000      	movs	r0, #0
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d0f9      	beq.n	800b756 <__sflush_r+0x1a>
 800b762:	2300      	movs	r3, #0
 800b764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b768:	682f      	ldr	r7, [r5, #0]
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	d032      	beq.n	800b7d6 <__sflush_r+0x9a>
 800b770:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	075a      	lsls	r2, r3, #29
 800b776:	d505      	bpl.n	800b784 <__sflush_r+0x48>
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	1ac0      	subs	r0, r0, r3
 800b77c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b77e:	b10b      	cbz	r3, 800b784 <__sflush_r+0x48>
 800b780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b782:	1ac0      	subs	r0, r0, r3
 800b784:	2300      	movs	r3, #0
 800b786:	4602      	mov	r2, r0
 800b788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b78a:	6a21      	ldr	r1, [r4, #32]
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b0      	blx	r6
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	d106      	bne.n	800b7a4 <__sflush_r+0x68>
 800b796:	6829      	ldr	r1, [r5, #0]
 800b798:	291d      	cmp	r1, #29
 800b79a:	d82b      	bhi.n	800b7f4 <__sflush_r+0xb8>
 800b79c:	4a29      	ldr	r2, [pc, #164]	; (800b844 <__sflush_r+0x108>)
 800b79e:	410a      	asrs	r2, r1
 800b7a0:	07d6      	lsls	r6, r2, #31
 800b7a2:	d427      	bmi.n	800b7f4 <__sflush_r+0xb8>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	6062      	str	r2, [r4, #4]
 800b7a8:	04d9      	lsls	r1, r3, #19
 800b7aa:	6922      	ldr	r2, [r4, #16]
 800b7ac:	6022      	str	r2, [r4, #0]
 800b7ae:	d504      	bpl.n	800b7ba <__sflush_r+0x7e>
 800b7b0:	1c42      	adds	r2, r0, #1
 800b7b2:	d101      	bne.n	800b7b8 <__sflush_r+0x7c>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b903      	cbnz	r3, 800b7ba <__sflush_r+0x7e>
 800b7b8:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7bc:	602f      	str	r7, [r5, #0]
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	d0c9      	beq.n	800b756 <__sflush_r+0x1a>
 800b7c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7c6:	4299      	cmp	r1, r3
 800b7c8:	d002      	beq.n	800b7d0 <__sflush_r+0x94>
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f7ff f9e2 	bl	800ab94 <_free_r>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	6360      	str	r0, [r4, #52]	; 0x34
 800b7d4:	e7c0      	b.n	800b758 <__sflush_r+0x1c>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b0      	blx	r6
 800b7dc:	1c41      	adds	r1, r0, #1
 800b7de:	d1c8      	bne.n	800b772 <__sflush_r+0x36>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d0c5      	beq.n	800b772 <__sflush_r+0x36>
 800b7e6:	2b1d      	cmp	r3, #29
 800b7e8:	d001      	beq.n	800b7ee <__sflush_r+0xb2>
 800b7ea:	2b16      	cmp	r3, #22
 800b7ec:	d101      	bne.n	800b7f2 <__sflush_r+0xb6>
 800b7ee:	602f      	str	r7, [r5, #0]
 800b7f0:	e7b1      	b.n	800b756 <__sflush_r+0x1a>
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e7ad      	b.n	800b758 <__sflush_r+0x1c>
 800b7fc:	690f      	ldr	r7, [r1, #16]
 800b7fe:	2f00      	cmp	r7, #0
 800b800:	d0a9      	beq.n	800b756 <__sflush_r+0x1a>
 800b802:	0793      	lsls	r3, r2, #30
 800b804:	680e      	ldr	r6, [r1, #0]
 800b806:	bf08      	it	eq
 800b808:	694b      	ldreq	r3, [r1, #20]
 800b80a:	600f      	str	r7, [r1, #0]
 800b80c:	bf18      	it	ne
 800b80e:	2300      	movne	r3, #0
 800b810:	eba6 0807 	sub.w	r8, r6, r7
 800b814:	608b      	str	r3, [r1, #8]
 800b816:	f1b8 0f00 	cmp.w	r8, #0
 800b81a:	dd9c      	ble.n	800b756 <__sflush_r+0x1a>
 800b81c:	6a21      	ldr	r1, [r4, #32]
 800b81e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b820:	4643      	mov	r3, r8
 800b822:	463a      	mov	r2, r7
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	2800      	cmp	r0, #0
 800b82a:	dc06      	bgt.n	800b83a <__sflush_r+0xfe>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e78e      	b.n	800b758 <__sflush_r+0x1c>
 800b83a:	4407      	add	r7, r0
 800b83c:	eba8 0800 	sub.w	r8, r8, r0
 800b840:	e7e9      	b.n	800b816 <__sflush_r+0xda>
 800b842:	bf00      	nop
 800b844:	dfbffffe 	.word	0xdfbffffe

0800b848 <_fflush_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	690b      	ldr	r3, [r1, #16]
 800b84c:	4605      	mov	r5, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b913      	cbnz	r3, 800b858 <_fflush_r+0x10>
 800b852:	2500      	movs	r5, #0
 800b854:	4628      	mov	r0, r5
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	b118      	cbz	r0, 800b862 <_fflush_r+0x1a>
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	b90b      	cbnz	r3, 800b862 <_fflush_r+0x1a>
 800b85e:	f7fe f9f5 	bl	8009c4c <__sinit>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f3      	beq.n	800b852 <_fflush_r+0xa>
 800b86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b86c:	07d0      	lsls	r0, r2, #31
 800b86e:	d404      	bmi.n	800b87a <_fflush_r+0x32>
 800b870:	0599      	lsls	r1, r3, #22
 800b872:	d402      	bmi.n	800b87a <_fflush_r+0x32>
 800b874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b876:	f7fe fb00 	bl	8009e7a <__retarget_lock_acquire_recursive>
 800b87a:	4628      	mov	r0, r5
 800b87c:	4621      	mov	r1, r4
 800b87e:	f7ff ff5d 	bl	800b73c <__sflush_r>
 800b882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b884:	07da      	lsls	r2, r3, #31
 800b886:	4605      	mov	r5, r0
 800b888:	d4e4      	bmi.n	800b854 <_fflush_r+0xc>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	059b      	lsls	r3, r3, #22
 800b88e:	d4e1      	bmi.n	800b854 <_fflush_r+0xc>
 800b890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b892:	f7fe faf3 	bl	8009e7c <__retarget_lock_release_recursive>
 800b896:	e7dd      	b.n	800b854 <_fflush_r+0xc>

0800b898 <memmove>:
 800b898:	4288      	cmp	r0, r1
 800b89a:	b510      	push	{r4, lr}
 800b89c:	eb01 0402 	add.w	r4, r1, r2
 800b8a0:	d902      	bls.n	800b8a8 <memmove+0x10>
 800b8a2:	4284      	cmp	r4, r0
 800b8a4:	4623      	mov	r3, r4
 800b8a6:	d807      	bhi.n	800b8b8 <memmove+0x20>
 800b8a8:	1e43      	subs	r3, r0, #1
 800b8aa:	42a1      	cmp	r1, r4
 800b8ac:	d008      	beq.n	800b8c0 <memmove+0x28>
 800b8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b6:	e7f8      	b.n	800b8aa <memmove+0x12>
 800b8b8:	4402      	add	r2, r0
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	428a      	cmp	r2, r1
 800b8be:	d100      	bne.n	800b8c2 <memmove+0x2a>
 800b8c0:	bd10      	pop	{r4, pc}
 800b8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8ca:	e7f7      	b.n	800b8bc <memmove+0x24>

0800b8cc <_sbrk_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d06      	ldr	r5, [pc, #24]	; (800b8e8 <_sbrk_r+0x1c>)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	602b      	str	r3, [r5, #0]
 800b8d8:	f7f8 fa60 	bl	8003d9c <_sbrk>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_sbrk_r+0x1a>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_sbrk_r+0x1a>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	2000077c 	.word	0x2000077c

0800b8ec <__assert_func>:
 800b8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	4b09      	ldr	r3, [pc, #36]	; (800b918 <__assert_func+0x2c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	68d8      	ldr	r0, [r3, #12]
 800b8fa:	b14c      	cbz	r4, 800b910 <__assert_func+0x24>
 800b8fc:	4b07      	ldr	r3, [pc, #28]	; (800b91c <__assert_func+0x30>)
 800b8fe:	9100      	str	r1, [sp, #0]
 800b900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b904:	4906      	ldr	r1, [pc, #24]	; (800b920 <__assert_func+0x34>)
 800b906:	462b      	mov	r3, r5
 800b908:	f000 f872 	bl	800b9f0 <fiprintf>
 800b90c:	f000 f882 	bl	800ba14 <abort>
 800b910:	4b04      	ldr	r3, [pc, #16]	; (800b924 <__assert_func+0x38>)
 800b912:	461c      	mov	r4, r3
 800b914:	e7f3      	b.n	800b8fe <__assert_func+0x12>
 800b916:	bf00      	nop
 800b918:	20000070 	.word	0x20000070
 800b91c:	0800c3f7 	.word	0x0800c3f7
 800b920:	0800c404 	.word	0x0800c404
 800b924:	0800c432 	.word	0x0800c432

0800b928 <_calloc_r>:
 800b928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b92a:	fba1 2402 	umull	r2, r4, r1, r2
 800b92e:	b94c      	cbnz	r4, 800b944 <_calloc_r+0x1c>
 800b930:	4611      	mov	r1, r2
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	f7ff f9a2 	bl	800ac7c <_malloc_r>
 800b938:	9a01      	ldr	r2, [sp, #4]
 800b93a:	4605      	mov	r5, r0
 800b93c:	b930      	cbnz	r0, 800b94c <_calloc_r+0x24>
 800b93e:	4628      	mov	r0, r5
 800b940:	b003      	add	sp, #12
 800b942:	bd30      	pop	{r4, r5, pc}
 800b944:	220c      	movs	r2, #12
 800b946:	6002      	str	r2, [r0, #0]
 800b948:	2500      	movs	r5, #0
 800b94a:	e7f8      	b.n	800b93e <_calloc_r+0x16>
 800b94c:	4621      	mov	r1, r4
 800b94e:	f7fe fa16 	bl	8009d7e <memset>
 800b952:	e7f4      	b.n	800b93e <_calloc_r+0x16>

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	b901      	cbnz	r1, 800b95a <__ascii_mbtowc+0x6>
 800b958:	a901      	add	r1, sp, #4
 800b95a:	b142      	cbz	r2, 800b96e <__ascii_mbtowc+0x1a>
 800b95c:	b14b      	cbz	r3, 800b972 <__ascii_mbtowc+0x1e>
 800b95e:	7813      	ldrb	r3, [r2, #0]
 800b960:	600b      	str	r3, [r1, #0]
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	1e10      	subs	r0, r2, #0
 800b966:	bf18      	it	ne
 800b968:	2001      	movne	r0, #1
 800b96a:	b002      	add	sp, #8
 800b96c:	4770      	bx	lr
 800b96e:	4610      	mov	r0, r2
 800b970:	e7fb      	b.n	800b96a <__ascii_mbtowc+0x16>
 800b972:	f06f 0001 	mvn.w	r0, #1
 800b976:	e7f8      	b.n	800b96a <__ascii_mbtowc+0x16>

0800b978 <_realloc_r>:
 800b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97c:	4680      	mov	r8, r0
 800b97e:	4614      	mov	r4, r2
 800b980:	460e      	mov	r6, r1
 800b982:	b921      	cbnz	r1, 800b98e <_realloc_r+0x16>
 800b984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b988:	4611      	mov	r1, r2
 800b98a:	f7ff b977 	b.w	800ac7c <_malloc_r>
 800b98e:	b92a      	cbnz	r2, 800b99c <_realloc_r+0x24>
 800b990:	f7ff f900 	bl	800ab94 <_free_r>
 800b994:	4625      	mov	r5, r4
 800b996:	4628      	mov	r0, r5
 800b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99c:	f000 f841 	bl	800ba22 <_malloc_usable_size_r>
 800b9a0:	4284      	cmp	r4, r0
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	d802      	bhi.n	800b9ac <_realloc_r+0x34>
 800b9a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9aa:	d812      	bhi.n	800b9d2 <_realloc_r+0x5a>
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff f964 	bl	800ac7c <_malloc_r>
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0ed      	beq.n	800b996 <_realloc_r+0x1e>
 800b9ba:	42bc      	cmp	r4, r7
 800b9bc:	4622      	mov	r2, r4
 800b9be:	4631      	mov	r1, r6
 800b9c0:	bf28      	it	cs
 800b9c2:	463a      	movcs	r2, r7
 800b9c4:	f7fe fa5b 	bl	8009e7e <memcpy>
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	f7ff f8e2 	bl	800ab94 <_free_r>
 800b9d0:	e7e1      	b.n	800b996 <_realloc_r+0x1e>
 800b9d2:	4635      	mov	r5, r6
 800b9d4:	e7df      	b.n	800b996 <_realloc_r+0x1e>

0800b9d6 <__ascii_wctomb>:
 800b9d6:	b149      	cbz	r1, 800b9ec <__ascii_wctomb+0x16>
 800b9d8:	2aff      	cmp	r2, #255	; 0xff
 800b9da:	bf85      	ittet	hi
 800b9dc:	238a      	movhi	r3, #138	; 0x8a
 800b9de:	6003      	strhi	r3, [r0, #0]
 800b9e0:	700a      	strbls	r2, [r1, #0]
 800b9e2:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9e6:	bf98      	it	ls
 800b9e8:	2001      	movls	r0, #1
 800b9ea:	4770      	bx	lr
 800b9ec:	4608      	mov	r0, r1
 800b9ee:	4770      	bx	lr

0800b9f0 <fiprintf>:
 800b9f0:	b40e      	push	{r1, r2, r3}
 800b9f2:	b503      	push	{r0, r1, lr}
 800b9f4:	4601      	mov	r1, r0
 800b9f6:	ab03      	add	r3, sp, #12
 800b9f8:	4805      	ldr	r0, [pc, #20]	; (800ba10 <fiprintf+0x20>)
 800b9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9fe:	6800      	ldr	r0, [r0, #0]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	f000 f83f 	bl	800ba84 <_vfiprintf_r>
 800ba06:	b002      	add	sp, #8
 800ba08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba0c:	b003      	add	sp, #12
 800ba0e:	4770      	bx	lr
 800ba10:	20000070 	.word	0x20000070

0800ba14 <abort>:
 800ba14:	b508      	push	{r3, lr}
 800ba16:	2006      	movs	r0, #6
 800ba18:	f000 fa0c 	bl	800be34 <raise>
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	f7f8 f945 	bl	8003cac <_exit>

0800ba22 <_malloc_usable_size_r>:
 800ba22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba26:	1f18      	subs	r0, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfbc      	itt	lt
 800ba2c:	580b      	ldrlt	r3, [r1, r0]
 800ba2e:	18c0      	addlt	r0, r0, r3
 800ba30:	4770      	bx	lr

0800ba32 <__sfputc_r>:
 800ba32:	6893      	ldr	r3, [r2, #8]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	b410      	push	{r4}
 800ba3a:	6093      	str	r3, [r2, #8]
 800ba3c:	da08      	bge.n	800ba50 <__sfputc_r+0x1e>
 800ba3e:	6994      	ldr	r4, [r2, #24]
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	db01      	blt.n	800ba48 <__sfputc_r+0x16>
 800ba44:	290a      	cmp	r1, #10
 800ba46:	d103      	bne.n	800ba50 <__sfputc_r+0x1e>
 800ba48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba4c:	f000 b934 	b.w	800bcb8 <__swbuf_r>
 800ba50:	6813      	ldr	r3, [r2, #0]
 800ba52:	1c58      	adds	r0, r3, #1
 800ba54:	6010      	str	r0, [r2, #0]
 800ba56:	7019      	strb	r1, [r3, #0]
 800ba58:	4608      	mov	r0, r1
 800ba5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <__sfputs_r>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	4614      	mov	r4, r2
 800ba68:	18d5      	adds	r5, r2, r3
 800ba6a:	42ac      	cmp	r4, r5
 800ba6c:	d101      	bne.n	800ba72 <__sfputs_r+0x12>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	e007      	b.n	800ba82 <__sfputs_r+0x22>
 800ba72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba76:	463a      	mov	r2, r7
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff ffda 	bl	800ba32 <__sfputc_r>
 800ba7e:	1c43      	adds	r3, r0, #1
 800ba80:	d1f3      	bne.n	800ba6a <__sfputs_r+0xa>
 800ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba84 <_vfiprintf_r>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	460d      	mov	r5, r1
 800ba8a:	b09d      	sub	sp, #116	; 0x74
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	4698      	mov	r8, r3
 800ba90:	4606      	mov	r6, r0
 800ba92:	b118      	cbz	r0, 800ba9c <_vfiprintf_r+0x18>
 800ba94:	6a03      	ldr	r3, [r0, #32]
 800ba96:	b90b      	cbnz	r3, 800ba9c <_vfiprintf_r+0x18>
 800ba98:	f7fe f8d8 	bl	8009c4c <__sinit>
 800ba9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba9e:	07d9      	lsls	r1, r3, #31
 800baa0:	d405      	bmi.n	800baae <_vfiprintf_r+0x2a>
 800baa2:	89ab      	ldrh	r3, [r5, #12]
 800baa4:	059a      	lsls	r2, r3, #22
 800baa6:	d402      	bmi.n	800baae <_vfiprintf_r+0x2a>
 800baa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baaa:	f7fe f9e6 	bl	8009e7a <__retarget_lock_acquire_recursive>
 800baae:	89ab      	ldrh	r3, [r5, #12]
 800bab0:	071b      	lsls	r3, r3, #28
 800bab2:	d501      	bpl.n	800bab8 <_vfiprintf_r+0x34>
 800bab4:	692b      	ldr	r3, [r5, #16]
 800bab6:	b99b      	cbnz	r3, 800bae0 <_vfiprintf_r+0x5c>
 800bab8:	4629      	mov	r1, r5
 800baba:	4630      	mov	r0, r6
 800babc:	f000 f93a 	bl	800bd34 <__swsetup_r>
 800bac0:	b170      	cbz	r0, 800bae0 <_vfiprintf_r+0x5c>
 800bac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac4:	07dc      	lsls	r4, r3, #31
 800bac6:	d504      	bpl.n	800bad2 <_vfiprintf_r+0x4e>
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	b01d      	add	sp, #116	; 0x74
 800bace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	0598      	lsls	r0, r3, #22
 800bad6:	d4f7      	bmi.n	800bac8 <_vfiprintf_r+0x44>
 800bad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bada:	f7fe f9cf 	bl	8009e7c <__retarget_lock_release_recursive>
 800bade:	e7f3      	b.n	800bac8 <_vfiprintf_r+0x44>
 800bae0:	2300      	movs	r3, #0
 800bae2:	9309      	str	r3, [sp, #36]	; 0x24
 800bae4:	2320      	movs	r3, #32
 800bae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baea:	f8cd 800c 	str.w	r8, [sp, #12]
 800baee:	2330      	movs	r3, #48	; 0x30
 800baf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bca4 <_vfiprintf_r+0x220>
 800baf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baf8:	f04f 0901 	mov.w	r9, #1
 800bafc:	4623      	mov	r3, r4
 800bafe:	469a      	mov	sl, r3
 800bb00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb04:	b10a      	cbz	r2, 800bb0a <_vfiprintf_r+0x86>
 800bb06:	2a25      	cmp	r2, #37	; 0x25
 800bb08:	d1f9      	bne.n	800bafe <_vfiprintf_r+0x7a>
 800bb0a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0e:	d00b      	beq.n	800bb28 <_vfiprintf_r+0xa4>
 800bb10:	465b      	mov	r3, fp
 800bb12:	4622      	mov	r2, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	4630      	mov	r0, r6
 800bb18:	f7ff ffa2 	bl	800ba60 <__sfputs_r>
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	f000 80a9 	beq.w	800bc74 <_vfiprintf_r+0x1f0>
 800bb22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb24:	445a      	add	r2, fp
 800bb26:	9209      	str	r2, [sp, #36]	; 0x24
 800bb28:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80a1 	beq.w	800bc74 <_vfiprintf_r+0x1f0>
 800bb32:	2300      	movs	r3, #0
 800bb34:	f04f 32ff 	mov.w	r2, #4294967295
 800bb38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb3c:	f10a 0a01 	add.w	sl, sl, #1
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	9307      	str	r3, [sp, #28]
 800bb44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb48:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4a:	4654      	mov	r4, sl
 800bb4c:	2205      	movs	r2, #5
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	4854      	ldr	r0, [pc, #336]	; (800bca4 <_vfiprintf_r+0x220>)
 800bb54:	f7f4 fb3c 	bl	80001d0 <memchr>
 800bb58:	9a04      	ldr	r2, [sp, #16]
 800bb5a:	b9d8      	cbnz	r0, 800bb94 <_vfiprintf_r+0x110>
 800bb5c:	06d1      	lsls	r1, r2, #27
 800bb5e:	bf44      	itt	mi
 800bb60:	2320      	movmi	r3, #32
 800bb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb66:	0713      	lsls	r3, r2, #28
 800bb68:	bf44      	itt	mi
 800bb6a:	232b      	movmi	r3, #43	; 0x2b
 800bb6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb70:	f89a 3000 	ldrb.w	r3, [sl]
 800bb74:	2b2a      	cmp	r3, #42	; 0x2a
 800bb76:	d015      	beq.n	800bba4 <_vfiprintf_r+0x120>
 800bb78:	9a07      	ldr	r2, [sp, #28]
 800bb7a:	4654      	mov	r4, sl
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f04f 0c0a 	mov.w	ip, #10
 800bb82:	4621      	mov	r1, r4
 800bb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb88:	3b30      	subs	r3, #48	; 0x30
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d94d      	bls.n	800bc2a <_vfiprintf_r+0x1a6>
 800bb8e:	b1b0      	cbz	r0, 800bbbe <_vfiprintf_r+0x13a>
 800bb90:	9207      	str	r2, [sp, #28]
 800bb92:	e014      	b.n	800bbbe <_vfiprintf_r+0x13a>
 800bb94:	eba0 0308 	sub.w	r3, r0, r8
 800bb98:	fa09 f303 	lsl.w	r3, r9, r3
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	9304      	str	r3, [sp, #16]
 800bba0:	46a2      	mov	sl, r4
 800bba2:	e7d2      	b.n	800bb4a <_vfiprintf_r+0xc6>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1d19      	adds	r1, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	9103      	str	r1, [sp, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	bfbb      	ittet	lt
 800bbb0:	425b      	neglt	r3, r3
 800bbb2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb6:	9307      	strge	r3, [sp, #28]
 800bbb8:	9307      	strlt	r3, [sp, #28]
 800bbba:	bfb8      	it	lt
 800bbbc:	9204      	strlt	r2, [sp, #16]
 800bbbe:	7823      	ldrb	r3, [r4, #0]
 800bbc0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc2:	d10c      	bne.n	800bbde <_vfiprintf_r+0x15a>
 800bbc4:	7863      	ldrb	r3, [r4, #1]
 800bbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc8:	d134      	bne.n	800bc34 <_vfiprintf_r+0x1b0>
 800bbca:	9b03      	ldr	r3, [sp, #12]
 800bbcc:	1d1a      	adds	r2, r3, #4
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	9203      	str	r2, [sp, #12]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bfb8      	it	lt
 800bbd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbda:	3402      	adds	r4, #2
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bcb4 <_vfiprintf_r+0x230>
 800bbe2:	7821      	ldrb	r1, [r4, #0]
 800bbe4:	2203      	movs	r2, #3
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	f7f4 faf2 	bl	80001d0 <memchr>
 800bbec:	b138      	cbz	r0, 800bbfe <_vfiprintf_r+0x17a>
 800bbee:	9b04      	ldr	r3, [sp, #16]
 800bbf0:	eba0 000a 	sub.w	r0, r0, sl
 800bbf4:	2240      	movs	r2, #64	; 0x40
 800bbf6:	4082      	lsls	r2, r0
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	3401      	adds	r4, #1
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc02:	4829      	ldr	r0, [pc, #164]	; (800bca8 <_vfiprintf_r+0x224>)
 800bc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc08:	2206      	movs	r2, #6
 800bc0a:	f7f4 fae1 	bl	80001d0 <memchr>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d03f      	beq.n	800bc92 <_vfiprintf_r+0x20e>
 800bc12:	4b26      	ldr	r3, [pc, #152]	; (800bcac <_vfiprintf_r+0x228>)
 800bc14:	bb1b      	cbnz	r3, 800bc5e <_vfiprintf_r+0x1da>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	3307      	adds	r3, #7
 800bc1a:	f023 0307 	bic.w	r3, r3, #7
 800bc1e:	3308      	adds	r3, #8
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	443b      	add	r3, r7
 800bc26:	9309      	str	r3, [sp, #36]	; 0x24
 800bc28:	e768      	b.n	800bafc <_vfiprintf_r+0x78>
 800bc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc2e:	460c      	mov	r4, r1
 800bc30:	2001      	movs	r0, #1
 800bc32:	e7a6      	b.n	800bb82 <_vfiprintf_r+0xfe>
 800bc34:	2300      	movs	r3, #0
 800bc36:	3401      	adds	r4, #1
 800bc38:	9305      	str	r3, [sp, #20]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	f04f 0c0a 	mov.w	ip, #10
 800bc40:	4620      	mov	r0, r4
 800bc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc46:	3a30      	subs	r2, #48	; 0x30
 800bc48:	2a09      	cmp	r2, #9
 800bc4a:	d903      	bls.n	800bc54 <_vfiprintf_r+0x1d0>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0c6      	beq.n	800bbde <_vfiprintf_r+0x15a>
 800bc50:	9105      	str	r1, [sp, #20]
 800bc52:	e7c4      	b.n	800bbde <_vfiprintf_r+0x15a>
 800bc54:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc58:	4604      	mov	r4, r0
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e7f0      	b.n	800bc40 <_vfiprintf_r+0x1bc>
 800bc5e:	ab03      	add	r3, sp, #12
 800bc60:	9300      	str	r3, [sp, #0]
 800bc62:	462a      	mov	r2, r5
 800bc64:	4b12      	ldr	r3, [pc, #72]	; (800bcb0 <_vfiprintf_r+0x22c>)
 800bc66:	a904      	add	r1, sp, #16
 800bc68:	4630      	mov	r0, r6
 800bc6a:	f7fd fb9d 	bl	80093a8 <_printf_float>
 800bc6e:	4607      	mov	r7, r0
 800bc70:	1c78      	adds	r0, r7, #1
 800bc72:	d1d6      	bne.n	800bc22 <_vfiprintf_r+0x19e>
 800bc74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc76:	07d9      	lsls	r1, r3, #31
 800bc78:	d405      	bmi.n	800bc86 <_vfiprintf_r+0x202>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	059a      	lsls	r2, r3, #22
 800bc7e:	d402      	bmi.n	800bc86 <_vfiprintf_r+0x202>
 800bc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc82:	f7fe f8fb 	bl	8009e7c <__retarget_lock_release_recursive>
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	065b      	lsls	r3, r3, #25
 800bc8a:	f53f af1d 	bmi.w	800bac8 <_vfiprintf_r+0x44>
 800bc8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc90:	e71c      	b.n	800bacc <_vfiprintf_r+0x48>
 800bc92:	ab03      	add	r3, sp, #12
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	462a      	mov	r2, r5
 800bc98:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <_vfiprintf_r+0x22c>)
 800bc9a:	a904      	add	r1, sp, #16
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f7fd fe27 	bl	80098f0 <_printf_i>
 800bca2:	e7e4      	b.n	800bc6e <_vfiprintf_r+0x1ea>
 800bca4:	0800c3dc 	.word	0x0800c3dc
 800bca8:	0800c3e6 	.word	0x0800c3e6
 800bcac:	080093a9 	.word	0x080093a9
 800bcb0:	0800ba61 	.word	0x0800ba61
 800bcb4:	0800c3e2 	.word	0x0800c3e2

0800bcb8 <__swbuf_r>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	460e      	mov	r6, r1
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	b118      	cbz	r0, 800bcca <__swbuf_r+0x12>
 800bcc2:	6a03      	ldr	r3, [r0, #32]
 800bcc4:	b90b      	cbnz	r3, 800bcca <__swbuf_r+0x12>
 800bcc6:	f7fd ffc1 	bl	8009c4c <__sinit>
 800bcca:	69a3      	ldr	r3, [r4, #24]
 800bccc:	60a3      	str	r3, [r4, #8]
 800bcce:	89a3      	ldrh	r3, [r4, #12]
 800bcd0:	071a      	lsls	r2, r3, #28
 800bcd2:	d525      	bpl.n	800bd20 <__swbuf_r+0x68>
 800bcd4:	6923      	ldr	r3, [r4, #16]
 800bcd6:	b31b      	cbz	r3, 800bd20 <__swbuf_r+0x68>
 800bcd8:	6823      	ldr	r3, [r4, #0]
 800bcda:	6922      	ldr	r2, [r4, #16]
 800bcdc:	1a98      	subs	r0, r3, r2
 800bcde:	6963      	ldr	r3, [r4, #20]
 800bce0:	b2f6      	uxtb	r6, r6
 800bce2:	4283      	cmp	r3, r0
 800bce4:	4637      	mov	r7, r6
 800bce6:	dc04      	bgt.n	800bcf2 <__swbuf_r+0x3a>
 800bce8:	4621      	mov	r1, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7ff fdac 	bl	800b848 <_fflush_r>
 800bcf0:	b9e0      	cbnz	r0, 800bd2c <__swbuf_r+0x74>
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	60a3      	str	r3, [r4, #8]
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	6022      	str	r2, [r4, #0]
 800bcfe:	701e      	strb	r6, [r3, #0]
 800bd00:	6962      	ldr	r2, [r4, #20]
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d004      	beq.n	800bd12 <__swbuf_r+0x5a>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	07db      	lsls	r3, r3, #31
 800bd0c:	d506      	bpl.n	800bd1c <__swbuf_r+0x64>
 800bd0e:	2e0a      	cmp	r6, #10
 800bd10:	d104      	bne.n	800bd1c <__swbuf_r+0x64>
 800bd12:	4621      	mov	r1, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7ff fd97 	bl	800b848 <_fflush_r>
 800bd1a:	b938      	cbnz	r0, 800bd2c <__swbuf_r+0x74>
 800bd1c:	4638      	mov	r0, r7
 800bd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd20:	4621      	mov	r1, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	f000 f806 	bl	800bd34 <__swsetup_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0d5      	beq.n	800bcd8 <__swbuf_r+0x20>
 800bd2c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd30:	e7f4      	b.n	800bd1c <__swbuf_r+0x64>
	...

0800bd34 <__swsetup_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4b2a      	ldr	r3, [pc, #168]	; (800bde0 <__swsetup_r+0xac>)
 800bd38:	4605      	mov	r5, r0
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	b118      	cbz	r0, 800bd48 <__swsetup_r+0x14>
 800bd40:	6a03      	ldr	r3, [r0, #32]
 800bd42:	b90b      	cbnz	r3, 800bd48 <__swsetup_r+0x14>
 800bd44:	f7fd ff82 	bl	8009c4c <__sinit>
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd4e:	0718      	lsls	r0, r3, #28
 800bd50:	d422      	bmi.n	800bd98 <__swsetup_r+0x64>
 800bd52:	06d9      	lsls	r1, r3, #27
 800bd54:	d407      	bmi.n	800bd66 <__swsetup_r+0x32>
 800bd56:	2309      	movs	r3, #9
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	f04f 30ff 	mov.w	r0, #4294967295
 800bd64:	e034      	b.n	800bdd0 <__swsetup_r+0x9c>
 800bd66:	0758      	lsls	r0, r3, #29
 800bd68:	d512      	bpl.n	800bd90 <__swsetup_r+0x5c>
 800bd6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd6c:	b141      	cbz	r1, 800bd80 <__swsetup_r+0x4c>
 800bd6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd72:	4299      	cmp	r1, r3
 800bd74:	d002      	beq.n	800bd7c <__swsetup_r+0x48>
 800bd76:	4628      	mov	r0, r5
 800bd78:	f7fe ff0c 	bl	800ab94 <_free_r>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	6363      	str	r3, [r4, #52]	; 0x34
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6063      	str	r3, [r4, #4]
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	f043 0308 	orr.w	r3, r3, #8
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	b94b      	cbnz	r3, 800bdb0 <__swsetup_r+0x7c>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bda2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bda6:	d003      	beq.n	800bdb0 <__swsetup_r+0x7c>
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f000 f884 	bl	800beb8 <__smakebuf_r>
 800bdb0:	89a0      	ldrh	r0, [r4, #12]
 800bdb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdb6:	f010 0301 	ands.w	r3, r0, #1
 800bdba:	d00a      	beq.n	800bdd2 <__swsetup_r+0x9e>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	60a3      	str	r3, [r4, #8]
 800bdc0:	6963      	ldr	r3, [r4, #20]
 800bdc2:	425b      	negs	r3, r3
 800bdc4:	61a3      	str	r3, [r4, #24]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	b943      	cbnz	r3, 800bddc <__swsetup_r+0xa8>
 800bdca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bdce:	d1c4      	bne.n	800bd5a <__swsetup_r+0x26>
 800bdd0:	bd38      	pop	{r3, r4, r5, pc}
 800bdd2:	0781      	lsls	r1, r0, #30
 800bdd4:	bf58      	it	pl
 800bdd6:	6963      	ldrpl	r3, [r4, #20]
 800bdd8:	60a3      	str	r3, [r4, #8]
 800bdda:	e7f4      	b.n	800bdc6 <__swsetup_r+0x92>
 800bddc:	2000      	movs	r0, #0
 800bdde:	e7f7      	b.n	800bdd0 <__swsetup_r+0x9c>
 800bde0:	20000070 	.word	0x20000070

0800bde4 <_raise_r>:
 800bde4:	291f      	cmp	r1, #31
 800bde6:	b538      	push	{r3, r4, r5, lr}
 800bde8:	4604      	mov	r4, r0
 800bdea:	460d      	mov	r5, r1
 800bdec:	d904      	bls.n	800bdf8 <_raise_r+0x14>
 800bdee:	2316      	movs	r3, #22
 800bdf0:	6003      	str	r3, [r0, #0]
 800bdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}
 800bdf8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bdfa:	b112      	cbz	r2, 800be02 <_raise_r+0x1e>
 800bdfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be00:	b94b      	cbnz	r3, 800be16 <_raise_r+0x32>
 800be02:	4620      	mov	r0, r4
 800be04:	f000 f830 	bl	800be68 <_getpid_r>
 800be08:	462a      	mov	r2, r5
 800be0a:	4601      	mov	r1, r0
 800be0c:	4620      	mov	r0, r4
 800be0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be12:	f000 b817 	b.w	800be44 <_kill_r>
 800be16:	2b01      	cmp	r3, #1
 800be18:	d00a      	beq.n	800be30 <_raise_r+0x4c>
 800be1a:	1c59      	adds	r1, r3, #1
 800be1c:	d103      	bne.n	800be26 <_raise_r+0x42>
 800be1e:	2316      	movs	r3, #22
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	e7e7      	b.n	800bdf6 <_raise_r+0x12>
 800be26:	2400      	movs	r4, #0
 800be28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be2c:	4628      	mov	r0, r5
 800be2e:	4798      	blx	r3
 800be30:	2000      	movs	r0, #0
 800be32:	e7e0      	b.n	800bdf6 <_raise_r+0x12>

0800be34 <raise>:
 800be34:	4b02      	ldr	r3, [pc, #8]	; (800be40 <raise+0xc>)
 800be36:	4601      	mov	r1, r0
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f7ff bfd3 	b.w	800bde4 <_raise_r>
 800be3e:	bf00      	nop
 800be40:	20000070 	.word	0x20000070

0800be44 <_kill_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	; (800be64 <_kill_r+0x20>)
 800be48:	2300      	movs	r3, #0
 800be4a:	4604      	mov	r4, r0
 800be4c:	4608      	mov	r0, r1
 800be4e:	4611      	mov	r1, r2
 800be50:	602b      	str	r3, [r5, #0]
 800be52:	f7f7 ff1b 	bl	8003c8c <_kill>
 800be56:	1c43      	adds	r3, r0, #1
 800be58:	d102      	bne.n	800be60 <_kill_r+0x1c>
 800be5a:	682b      	ldr	r3, [r5, #0]
 800be5c:	b103      	cbz	r3, 800be60 <_kill_r+0x1c>
 800be5e:	6023      	str	r3, [r4, #0]
 800be60:	bd38      	pop	{r3, r4, r5, pc}
 800be62:	bf00      	nop
 800be64:	2000077c 	.word	0x2000077c

0800be68 <_getpid_r>:
 800be68:	f7f7 bf08 	b.w	8003c7c <_getpid>

0800be6c <__swhatbuf_r>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	460c      	mov	r4, r1
 800be70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be74:	2900      	cmp	r1, #0
 800be76:	b096      	sub	sp, #88	; 0x58
 800be78:	4615      	mov	r5, r2
 800be7a:	461e      	mov	r6, r3
 800be7c:	da0d      	bge.n	800be9a <__swhatbuf_r+0x2e>
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f013 0f80 	tst.w	r3, #128	; 0x80
 800be84:	f04f 0100 	mov.w	r1, #0
 800be88:	bf0c      	ite	eq
 800be8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800be8e:	2340      	movne	r3, #64	; 0x40
 800be90:	2000      	movs	r0, #0
 800be92:	6031      	str	r1, [r6, #0]
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	b016      	add	sp, #88	; 0x58
 800be98:	bd70      	pop	{r4, r5, r6, pc}
 800be9a:	466a      	mov	r2, sp
 800be9c:	f000 f848 	bl	800bf30 <_fstat_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	dbec      	blt.n	800be7e <__swhatbuf_r+0x12>
 800bea4:	9901      	ldr	r1, [sp, #4]
 800bea6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800beaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800beae:	4259      	negs	r1, r3
 800beb0:	4159      	adcs	r1, r3
 800beb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beb6:	e7eb      	b.n	800be90 <__swhatbuf_r+0x24>

0800beb8 <__smakebuf_r>:
 800beb8:	898b      	ldrh	r3, [r1, #12]
 800beba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bebc:	079d      	lsls	r5, r3, #30
 800bebe:	4606      	mov	r6, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	d507      	bpl.n	800bed4 <__smakebuf_r+0x1c>
 800bec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	6123      	str	r3, [r4, #16]
 800becc:	2301      	movs	r3, #1
 800bece:	6163      	str	r3, [r4, #20]
 800bed0:	b002      	add	sp, #8
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	ab01      	add	r3, sp, #4
 800bed6:	466a      	mov	r2, sp
 800bed8:	f7ff ffc8 	bl	800be6c <__swhatbuf_r>
 800bedc:	9900      	ldr	r1, [sp, #0]
 800bede:	4605      	mov	r5, r0
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7fe fecb 	bl	800ac7c <_malloc_r>
 800bee6:	b948      	cbnz	r0, 800befc <__smakebuf_r+0x44>
 800bee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beec:	059a      	lsls	r2, r3, #22
 800beee:	d4ef      	bmi.n	800bed0 <__smakebuf_r+0x18>
 800bef0:	f023 0303 	bic.w	r3, r3, #3
 800bef4:	f043 0302 	orr.w	r3, r3, #2
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	e7e3      	b.n	800bec4 <__smakebuf_r+0xc>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	6020      	str	r0, [r4, #0]
 800bf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	9b00      	ldr	r3, [sp, #0]
 800bf08:	6163      	str	r3, [r4, #20]
 800bf0a:	9b01      	ldr	r3, [sp, #4]
 800bf0c:	6120      	str	r0, [r4, #16]
 800bf0e:	b15b      	cbz	r3, 800bf28 <__smakebuf_r+0x70>
 800bf10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf14:	4630      	mov	r0, r6
 800bf16:	f000 f81d 	bl	800bf54 <_isatty_r>
 800bf1a:	b128      	cbz	r0, 800bf28 <__smakebuf_r+0x70>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	f023 0303 	bic.w	r3, r3, #3
 800bf22:	f043 0301 	orr.w	r3, r3, #1
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	89a3      	ldrh	r3, [r4, #12]
 800bf2a:	431d      	orrs	r5, r3
 800bf2c:	81a5      	strh	r5, [r4, #12]
 800bf2e:	e7cf      	b.n	800bed0 <__smakebuf_r+0x18>

0800bf30 <_fstat_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d07      	ldr	r5, [pc, #28]	; (800bf50 <_fstat_r+0x20>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	602b      	str	r3, [r5, #0]
 800bf3e:	f7f7 ff04 	bl	8003d4a <_fstat>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	d102      	bne.n	800bf4c <_fstat_r+0x1c>
 800bf46:	682b      	ldr	r3, [r5, #0]
 800bf48:	b103      	cbz	r3, 800bf4c <_fstat_r+0x1c>
 800bf4a:	6023      	str	r3, [r4, #0]
 800bf4c:	bd38      	pop	{r3, r4, r5, pc}
 800bf4e:	bf00      	nop
 800bf50:	2000077c 	.word	0x2000077c

0800bf54 <_isatty_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d06      	ldr	r5, [pc, #24]	; (800bf70 <_isatty_r+0x1c>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	602b      	str	r3, [r5, #0]
 800bf60:	f7f7 ff03 	bl	8003d6a <_isatty>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_isatty_r+0x1a>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_isatty_r+0x1a>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	2000077c 	.word	0x2000077c

0800bf74 <_init>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	bf00      	nop
 800bf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf7a:	bc08      	pop	{r3}
 800bf7c:	469e      	mov	lr, r3
 800bf7e:	4770      	bx	lr

0800bf80 <_fini>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr
